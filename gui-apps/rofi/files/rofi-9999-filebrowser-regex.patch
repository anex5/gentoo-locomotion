--- a/source/modes/filebrowser.c
+++ b/source/modes/filebrowser.c
@@ -106,6 +106,7 @@ typedef struct {
   FBFile *array;
   unsigned int array_length;
   unsigned int array_length_real;
+  GRegex *filter_regex;
 } FileBrowserModePrivateData;
 
 /**
@@ -260,6 +261,11 @@ static void get_file_browser(Mode *sw) {
       if (g_strcmp0(rd->d_name, ".") == 0) {
         continue;
       }
+      if (pd->filter_regex && rd->d_type != DT_DIR && 
+            g_regex_match(pd->filter_regex, rd->d_name, 0, NULL)) {
+        continue;
+      }
+
       if (rd->d_name[0] == '.' && file_browser_config.show_hidden == FALSE) {
         continue;
       }
@@ -389,6 +395,23 @@ static void file_browser_mode_init_confi
   if (p != NULL && p->type == P_BOOLEAN) {
     file_browser_config.show_hidden = p->value.b;
   }
+  
+  p = rofi_theme_find_property(wid, P_STRING, "filter-regex", TRUE);
+  if (p != NULL && p->type == P_STRING) {
+    GError *error = NULL;
+    g_debug("compile regex: %s\n", p->value.s);
+    pd->filter_regex = g_regex_new(p->value.s, G_REGEX_OPTIMIZE, 0, &error);
+    if (error) {
+      msg = g_strdup_printf("\"%s\" is not a valid regex for filtering: %s",
+                            p->value.s, error->message);
+      found_error = TRUE;
+      g_error_free(error);
+    }
+  }
+  if (pd->filter_regex == NULL) {
+    g_debug("compile default regex\n");
+    pd->filter_regex = g_regex_new("^(\\..*)", G_REGEX_OPTIMIZE, 0, NULL);
+  }
 
   p = rofi_theme_find_property(wid, P_STRING, "command", TRUE);
   if (p != NULL && p->type == P_STRING) {
@@ -556,6 +579,9 @@ static void file_browser_mode_destroy(Mo
   FileBrowserModePrivateData *pd =
       (FileBrowserModePrivateData *)mode_get_private_data(sw);
   if (pd != NULL) {
+    if (pd->filter_regex) {
+      g_regex_unref(pd->filter_regex);
+    }
     g_object_unref(pd->current_dir);
     g_free(pd->command);
     free_list(pd);
