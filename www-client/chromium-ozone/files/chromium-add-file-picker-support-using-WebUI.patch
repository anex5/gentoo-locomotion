From e3956cea61b64f7be441d646559937b9bc7311c6 Mon Sep 17 00:00:00 2001
From: Joone Hur <joone.hur@intel.com>
Date: Fri, 11 Sep 2015 18:45:01 -0700
Subject: [PATCH 08/14] Add file picker support using WebUI

File-picker has not been supported in oz-wl because Gtk+2 does not work under
Wayland, but Chromium Linux version still uses Gtk+2 for file-picker.

This implementation allows oz-wl to show a web based file picker UI.
Currently, the WebUI only supports basic functionality for opening a file.
File browsing UI will be added later.
---

diff --git a/chrome/app/generated_resources.grd b/chrome/app/generated_resources.grd
index 9732bb1..37dce66 100644
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -14675,6 +14675,14 @@ Do you accept?
     <message name="IDS_FLAGS_ENABLE_EXPERIMENTAL_HOTWORDING_DESCRIPTION" desc="Description of about:flags option for hotword detection.">
       Enables experimental 'Ok Google' hotword detection features, such as using the built-in extension. The hotword extension from the Chrome Web Store will no longer be used.
     </message>
+
+    <!-- File-picker strings -->
+    <message name="IDS_FILE_PICKER_TITLE" desc="File picker title">
+      Save file as
+    </message>
+    <message name="IDS_FILE_PICKER_FILE_NAME" desc="File Name">
+      File name
+    </message>
   </messages>
   </release>
 </grit>
diff --git a/chrome/browser/browser_resources.grd b/chrome/browser/browser_resources.grd
index f352fc8..46b3020 100644
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -623,6 +623,9 @@
         </if>
         <include name="IDR_BRAILLE_MANIFEST" file="resources\chromeos\braille_ime\manifest.json" type="BINDATA" />
       </if>
+      <include name="IDR_FILE_PICKER_HTML" file="resources\file_picker\file_picker.html" type="BINDATA" />
+      <include name="IDR_FILE_PICKER_JS" file="resources\file_picker\file_picker.js" type="BINDATA" />
+      <include name="IDR_FILE_PICKER_CSS" file="resources\file_picker\file_picker.css" type="BINDATA" />
       <part file="media_router_resources.grdp" />
       <if expr="chromeos or is_win or is_macosx">
         <include name="IDR_CAST_HTML" file="resources\cast\cast.html" type="BINDATA" />
diff --git a/chrome/browser/resources/file_picker/file_picker.css b/chrome/browser/resources/file_picker/file_picker.css
new file mode 100644
index 0000000..a675d89
--- /dev/null
+++ b/chrome/browser/resources/file_picker/file_picker.css
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2014 The Chromium Authors. All rights reserved.
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#main-table {
+  border-collapse: collapse;
+  border-width: 0;
+  margin-left: auto;
+  margin-right: auto;
+  table-layout: fixed;
+  width: 1000px;
+}
+
+tr.section-row {
+  border-bottom-width: 2px;
+  border-color: #000;
+  border-left-width: 0;
+  border-right-width: 0;
+  border-style: solid;
+  border-top-width: 2px;
+  width: 100%;
+}
+
+td.title-cell {
+  border-width: 0;
+  text-align: right;
+  vertical-align: top;
+  width: 15%;
+}
+
+p.title-text {
+  font-weight: bold;
+  margin-right: 10px;
+}
+
+td.show-button-cell {
+  border-bottom-width: 0;
+  border-color: #aaa;
+  border-left-width: 1px;
+  border-right-width: 1px;
+  border-style: solid;
+  border-top-width: 0;
+  text-align: center;
+  vertical-align: top;
+  width: 10%;
+}
+
+td.plots-cell {
+  border-width: 0;
+  padding: 10px;
+  text-align: left;
+  width: 75%;
+}
+
+div.section-div {
+  width: 100%;
+}
+
+div.plots-div {
+  width: 100%;
+}
+
+button.show-button {
+  margin: 10px;
+}
+
+button.reload-button {
+  margin-bottom: 10px;
+  margin-top: 10px;
+}
diff --git a/chrome/browser/resources/file_picker/file_picker.html b/chrome/browser/resources/file_picker/file_picker.html
new file mode 100644
index 0000000..7710c81
--- /dev/null
+++ b/chrome/browser/resources/file_picker/file_picker.html
@@ -0,0 +1,37 @@
+<!DOCTYPE HTML>
+<html i18n-values="dir:textdirection">
+<head>
+  <meta charset="utf-8">
+  <title i18n-content="dialogTitle"></title>
+  <script src="chrome://resources/js/cr.js"></script>
+  <script src="chrome://resources/js/load_time_data.js"></script>
+  <script src="chrome://resources/js/util.js"></script>
+  <script src="strings.js"></script>
+  <script src="file_picker.js"></script>
+  <link rel="stylesheet" href="file_picker.css">
+</head>
+<body i18n-values=".style.fontFamily:fontfamily;.style.fontSize:fontsize">
+
+<p>Input a file name</p>
+<table>
+<tr>
+<td><div id="file-picker-file-name" i18n-content="filePickerFileNameLabel"></div>
+</td>
+<td>
+<input id="file-name-inputbox" type="text" name="FileName">
+</td>
+</tr>
+<tr>
+<td>
+  <div id="button-row">
+    <button id="save-button" i18n-content="saveButtonText"></button>
+    <button id="open-button" i18n-content="openButtonText"></button>
+    <button id="cancel-button" i18n-content="cancelButtonText"></button>
+  </div>
+</td>
+</tr>
+</table>
+  <!-- Must be last in the DOM: processes elements and inserts i18n strings -->
+  <script src="chrome://resources/js/i18n_template2.js"></script>
+</body>
+</html>
diff --git a/chrome/browser/resources/file_picker/file_picker.js b/chrome/browser/resources/file_picker/file_picker.js
new file mode 100644
index 0000000..4161330
--- /dev/null
+++ b/chrome/browser/resources/file_picker/file_picker.js
@@ -0,0 +1,51 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+cr.define('filePicker', function() {
+  'use strict';
+
+  function initialize() {
+
+    var args = JSON.parse(chrome.getVariableValue('dialogArguments'));
+
+    var input_box = document.getElementById("file-name-inputbox");
+    input_box.value = args.filePath;
+
+    $('cancel-button').addEventListener('click', function() {
+        chrome.send('cancel');
+        self.close();
+    });
+    $('cancel-button').innerText =
+        loadTimeData.getStringF('cancelButtonText');
+
+    if (args.promptForOpenFile) {
+      $('open-button').addEventListener('click', function() {
+            var file_path = document.getElementById("file-name-inputbox").value;
+            chrome.send('done', [file_path]);
+            self.close();
+      });
+      $('open-button').innerText =
+        loadTimeData.getStringF('openButtonText');
+      $('save-button').style.display = 'none';
+    } else {
+      $('save-button').addEventListener('click', function() {
+          var file_path = document.getElementById("file-name-inputbox").value;
+          chrome.send('done', [file_path]);
+          self.close();
+      });
+      $('save-button').innerText =
+        loadTimeData.getStringF('saveButtonText');
+      $('open-button').style.display = 'none';
+   }
+
+    $('button-row').style['text-align'] = 'end';
+  }
+
+  return {
+    initialize: initialize
+  };
+});
+
+document.addEventListener('DOMContentLoaded',
+                          filePicker.initialize);
diff --git a/chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc b/chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
index d44c7fe..22ba213 100644
--- a/chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
+++ b/chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc1
@@ -10,11 +10,11 @@
 #include "chrome/browser/themes/theme_service.h"
 #include "chrome/browser/themes/theme_service_factory.h"
 #include "chrome/browser/ui/browser_list.h"
-#include "chrome/browser/ui/libgtkui/gtk_ui.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/theme_profile_key.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
+#include "ozone/ui/webui/ozone_webui.h"
 #include "ui/aura/env.h"
 #include "ui/aura/window.h"
 #include "ui/base/ime/input_method_initializer.h"
@@ -28,6 +28,10 @@
 #include "ui/views/widget/desktop_aura/x11_desktop_handler.h"
 #include "ui/views/widget/native_widget_aura.h"

+#if defined(USE_X11) && !defined(OS_CHROMEOS)
+#include "chrome/browser/ui/libgtkui/gtk_ui.h"
+#endif
+
 namespace {

 ui::NativeTheme* GetNativeThemeForWindow(aura::Window* window) {
@@ -67,9 +71,13 @@ ChromeBrowserMainExtraPartsViewsLinux::
 }

 void ChromeBrowserMainExtraPartsViewsLinux::PreEarlyInitialization() {
+  #if defined(USE_OZONE)
+  views::LinuxUI::SetInstance(BuildWebUI());
+  #elseif
   views::LinuxUI* gtk_ui = BuildGtkUi();
   gtk_ui->SetNativeThemeOverride(base::Bind(&GetNativeThemeForWindow));
-  views::LinuxUI::SetInstance(gtk_ui);
+  views::LinuxUI::SetInstance(gtk_ui);
+  #endif
 }

 void ChromeBrowserMainExtraPartsViewsLinux::ToolkitInitialized() {
diff --git a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
index 5d978a4..f6782d7 100644
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -31,6 +31,8 @@
 #include "chrome/browser/ui/webui/domain_reliability_internals_ui.h"
 #include "chrome/browser/ui/webui/download_internals/download_internals_ui.h"
 #include "chrome/browser/ui/webui/engagement/site_engagement_ui.h"
+#include "chrome/browser/ui/webui/extensions/extensions_ui.h"
+#include "chrome/browser/ui/webui/file_picker/file_picker_ui.h"
 #include "chrome/browser/ui/webui/flags_ui.h"
 #include "chrome/browser/ui/webui/flash_ui.h"
 #include "chrome/browser/ui/webui/gcm_internals_ui.h"
@@ -359,6 +362,8 @@ WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,
     return &NewWebUI<DownloadInternalsUI>;
   if (url.host_piece() == chrome::kChromeUIFlagsHost)
     return &NewWebUI<FlagsUI>;
+  if (url.host_piece() == chrome::kChromeUIFilePickerHost)
+    return &NewWebUI<ui::FilePickerUI>;
   if (url.host_piece() == chrome::kChromeUIGCMInternalsHost)
     return &NewWebUI<GCMInternalsUI>;
   if (url.host_piece() == chrome::kChromeUIInterstitialHost)
diff --git a/chrome/browser/ui/webui/file_picker/file_picker_ui.cc b/chrome/browser/ui/webui/file_picker/file_picker_ui.cc
new file mode 100644
index 0000000..9663fbb
--- /dev/null
+++ b/chrome/browser/ui/webui/file_picker/file_picker_ui.cc
@@ -0,0 +1,46 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/file_picker/file_picker_ui.h"
+
+#include "base/values.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/common/url_constants.h"
+#include "chrome/grit/browser_resources.h"
+#include "chrome/grit/chromium_strings.h"
+#include "chrome/grit/generated_resources.h"
+#include "content/public/browser/web_contents.h"
+#include "content/public/browser/web_ui.h"
+#include "content/public/browser/web_ui_data_source.h"
+#include "ui/base/l10n/l10n_util.h"
+#include "ui/base/resource/resource_bundle.h"
+
+namespace ui {
+FilePickerUI::FilePickerUI(content::WebUI* web_ui)
+  : WebDialogUI(web_ui) {
+  content::WebUIDataSource* html_source = content::WebUIDataSource::Create(
+      chrome::kChromeUIFilePickerHost);
+
+  html_source->AddLocalizedString(
+       "filePickerFileNameLabel",
+       IDS_FILE_PICKER_FILE_NAME);
+
+  html_source->AddLocalizedString("saveButtonText", IDS_SAVE);
+  html_source->AddLocalizedString("openButtonText", IDS_OK);
+  html_source->AddLocalizedString("cancelButtonText", IDS_CANCEL);
+
+  html_source->SetJsonPath("strings.js");
+
+  html_source->AddResourcePath("file_picker.js", IDR_FILE_PICKER_JS);
+  html_source->AddResourcePath("file_picker.css", IDR_FILE_PICKER_CSS);
+  html_source->SetDefaultResource(IDR_FILE_PICKER_HTML);
+
+  Profile* profile = Profile::FromWebUI(web_ui);
+  content::WebUIDataSource::Add(profile, html_source);
+}
+
+FilePickerUI::~FilePickerUI() {
+}
+
+}  // namespace ui
diff --git a/chrome/browser/ui/webui/file_picker/file_picker_ui.h b/chrome/browser/ui/webui/file_picker/file_picker_ui.h
new file mode 100644
index 0000000..908eb06
--- /dev/null
+++ b/chrome/browser/ui/webui/file_picker/file_picker_ui.h
@@ -0,0 +1,23 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_FILE_PICKER_UI_H_
+#define CHROME_BROWSER_UI_WEBUI_FILE_PICKER_UI_H_
+
+#include "ui/web_dialogs/web_dialog_ui.h"
+
+namespace ui {
+
+class FilePickerUI : public WebDialogUI {
+ public:
+  explicit FilePickerUI(content::WebUI* web_ui);
+  ~FilePickerUI() override;
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(FilePickerUI);
+};
+
+}  // namespace ui
+
+#endif  // CHROME_BROWSER_UI_WEBUI_FILE_PICKER_UI_H_
diff --git a/chrome/browser/ui/webui/file_picker/file_picker_web_dialog.cc b/chrome/browser/ui/webui/file_picker/file_picker_web_dialog.cc
new file mode 100644
index 0000000..7711b44
--- /dev/null
+++ b/chrome/browser/ui/webui/file_picker/file_picker_web_dialog.cc
@@ -0,0 +1,164 @@
+// Copyright (c) 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ozone/ui/webui/file_picker_web_dialog.h"
+
+#include "base/json/json_writer.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "chrome/browser/ui/browser_dialogs.h"
+#include "chrome/common/url_constants.h"
+#include "chrome/grit/browser_resources.h"
+#include "chrome/grit/chromium_strings.h"
+#include "chrome/grit/generated_resources.h"
+#include "content/public/browser/web_ui.h"
+#include "content/public/browser/web_ui_message_handler.h"
+#include "ui/strings/grit/ui_strings.h"
+#include "ui/base/l10n/l10n_util.h"
+#include "ui/gfx/geometry/size.h"
+
+using content::WebContents;
+using content::WebUIMessageHandler;
+
+namespace {
+
+// Default width/height of the dialog.
+const int kDefaultWidth = 350;
+const int kDefaultHeight = 225;
+}
+
+namespace ui {
+
+class FilePickerMessageHandler : public content::WebUIMessageHandler {
+ public:
+  FilePickerMessageHandler(
+      const ui::FilePickerWebDialog* dialog);
+  ~FilePickerMessageHandler() override;
+  void RegisterMessages() override;
+
+ private:
+  // content::WebUIMessageHandler implementation.
+  void OnCancelButtonClicked(const base::ListValue* args);
+  void OnSaveButtonClicked(const base::ListValue* args);
+
+  // Weak ptr to parent dialog.
+  const ui::FilePickerWebDialog* dialog_;
+};
+
+FilePickerMessageHandler::FilePickerMessageHandler(
+    const ui::FilePickerWebDialog* dialog)
+  : dialog_(dialog) {
+}
+
+FilePickerMessageHandler::~FilePickerMessageHandler() {
+}
+
+void FilePickerMessageHandler::RegisterMessages() {
+  web_ui()->RegisterMessageCallback(
+      "cancel",
+      base::Bind(&FilePickerMessageHandler::OnCancelButtonClicked,
+                 base::Unretained(this)));
+  web_ui()->RegisterMessageCallback(
+      "done",
+      base::Bind(&FilePickerMessageHandler::OnSaveButtonClicked,
+                 base::Unretained(this)));
+}
+
+void FilePickerMessageHandler::OnCancelButtonClicked(
+    const base::ListValue* args) {
+    std::string file_path;
+    dialog_->Close(file_path);
+}
+
+void FilePickerMessageHandler::OnSaveButtonClicked(
+    const base::ListValue* args) {
+    std::string file_path;
+    args->GetString(0, &file_path);
+    dialog_->Close(file_path);
+}
+
+}  // namespace ui
+
+namespace ui {
+
+// static
+void FilePickerWebDialog::ShowDialog(SelectFileDialog::Type type, gfx::NativeWindow owning_window,
+    content::WebContents* contents,  SelectFileDialog::Listener* listener) {
+  chrome::ShowWebDialog(owning_window,
+                        ProfileManager::GetActiveUserProfile(),
+                        new FilePickerWebDialog(type, listener));
+}
+
+void FilePickerWebDialog::Close(const std::string& file_path) const {
+  if (!file_path.empty())
+    listener_->FileSelected(base::FilePath(file_path), 0 , NULL);
+  else
+    listener_->FileSelectionCanceled(NULL);
+}
+
+FilePickerWebDialog::FilePickerWebDialog(SelectFileDialog::Type type, SelectFileDialog::Listener* listener)
+    : type_(type), listener_(listener) {
+}
+
+ui::ModalType FilePickerWebDialog::GetDialogModalType() const {
+  return ui::MODAL_TYPE_SYSTEM;
+}
+
+base::string16 FilePickerWebDialog::GetDialogTitle() const {
+
+  if (type_ == SelectFileDialog::SELECT_OPEN_FILE)
+    return l10n_util::GetStringUTF16(IDS_OPEN_FILE_DIALOG_TITLE);
+  else if (type_ == SelectFileDialog::SELECT_SAVEAS_FILE)
+    return l10n_util::GetStringUTF16(IDS_SAVE_AS_DIALOG_TITLE);
+
+  return base::string16();
+}
+
+GURL FilePickerWebDialog::GetDialogContentURL() const {
+  return GURL(chrome::kChromeUIFilePickerURL);
+}
+
+void FilePickerWebDialog::GetWebUIMessageHandlers(
+    std::vector<content::WebUIMessageHandler*>* handlers) const {
+  handlers->push_back(new FilePickerMessageHandler(this));
+}
+
+void FilePickerWebDialog::GetDialogSize(gfx::Size* size) const {
+  size->SetSize(kDefaultWidth, kDefaultHeight);
+}
+
+std::string FilePickerWebDialog::GetDialogArgs() const {
+  std::string data;
+  base::DictionaryValue file_info;
+  if (type_ == SelectFileDialog::SELECT_OPEN_FILE)
+    file_info.SetBoolean("promptForOpenFile",  true);
+  else
+    file_info.SetBoolean("promptForOpenFile",  false);
+
+  // FIXME(joone): Pass the home directory
+  file_info.SetString("filePath",  "/home/app");
+  base::JSONWriter::Write(file_info, &data);
+  return data;
+}
+
+void FilePickerWebDialog::OnDialogClosed(const std::string& json_retval) {
+  delete this;
+}
+
+void FilePickerWebDialog::OnCloseContents(WebContents* source,
+                                                bool* out_close_dialog) {
+  if (out_close_dialog)
+    *out_close_dialog = true;
+}
+
+bool FilePickerWebDialog::ShouldShowDialogTitle() const {
+  return true;
+}
+
+bool FilePickerWebDialog::HandleContextMenu(
+    const content::ContextMenuParams& params) {
+  // Disable context menu.
+  return true;
+}
+
+}  // namespace ui
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index c57b1a0..4463e31 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -245,6 +245,9 @@ jumbo_split_static_library("ui") {
     "webui/favicon_source.h",
     "webui/fileicon_source.cc",
     "webui/fileicon_source.h",
+    "webui/file_picker/file_picker_ui.cc",
+    "webui/file_picker/file_picker_ui.h",
+    "webui/file_picker/file_picker_web_dialog.cc",
     "webui/flags_ui.cc",
     "webui/flags_ui.h",
     "webui/gcm_internals_ui.cc",
diff --git a/chrome/common/webui_url_constants.cc b/chrome/common/webui_url_constants.cc
index 8c22f2a..fa02b48 100644
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -69,6 +69,8 @@ const char kChromeUIExtensionsInternalsHost[] = "extensions-internals";
 const char kChromeUIExtensionsURL[] = "chrome://extensions/";
 const char kChromeUIFaviconHost[] = "favicon";
 const char kChromeUIFaviconURL[] = "chrome://favicon/";
+const char kChromeUIFilePickerHost[] = "file-picker";
+const char kChromeUIFilePickerURL[] = "chrome://file-picker/";
 const char kChromeUIFlagsHost[] = "flags";
 const char kChromeUIFlagsURL[] = "chrome://flags/";
 const char kChromeUIFlashHost[] = "flash";
@@ -329,6 +331,7 @@ const char* const kChromeHostURLs[] = {
 #endif
     kChromeUIDeviceLogHost,
     kChromeUIDownloadInternalsHost,
+    kChromeUIFilePickerHost,
     kChromeUIFlagsHost,
     kChromeUIGCMInternalsHost,
     kChromeUIHistoryHost,
diff --git a/chrome/common/webui_url_constants.h b/chrome/common/webui_url_constants.h
index c1de504..577c686 100644
--- a/chrome/common/webui_url_constants.h
+++ b/chrome/common/webui_url_constants.h
@@ -74,6 +74,8 @@ extern const char kChromeUIExtensionsInternalsHost[];
 extern const char kChromeUIExtensionsURL[];
 extern const char kChromeUIFaviconHost[];
 extern const char kChromeUIFaviconURL[];
+extern const char kChromeUIFilePickerHost[];
+extern const char kChromeUIFilePickerURL[];
 extern const char kChromeUIFlagsHost[];
 extern const char kChromeUIFlagsURL[];
 extern const char kChromeUIFlashHost[];
-- 
1.9.1

