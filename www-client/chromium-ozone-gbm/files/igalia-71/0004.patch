--- a/content/browser/BUILD.gn	2018-12-13 00:56:07.000000000 +0300
+++ b/content/browser/BUILD.gn	2019-01-24 15:34:07.684000000 +0300
@@ -193,6 +193,7 @@
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base",
     "//ui/base:ui_features",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/display/types",
--- a/content/browser/renderer_host/clipboard_host_impl.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/browser/renderer_host/clipboard_host_impl.cc	2019-01-24 15:34:13.420000000 +0300
@@ -16,6 +16,7 @@
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
 #include "url/gurl.h"
@@ -66,21 +67,21 @@
   switch (format) {
     case blink::mojom::ClipboardFormat::kPlaintext:
       result = clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextWFormatType(), clipboard_type) ||
+                   ui::GetPlainTextWClipboardFormatType(), clipboard_type) ||
                clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextFormatType(), clipboard_type);
+                   ui::GetPlainTextClipboardFormatType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kHtml:
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetHtmlFormatType(),
+      result = clipboard_->IsFormatAvailable(ui::GetHtmlClipboardFormatType(),
                                              clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kSmartPaste:
       result = clipboard_->IsFormatAvailable(
-          ui::Clipboard::GetWebKitSmartPasteFormatType(), clipboard_type);
+          ui::GetWebKitSmartPasteClipboardFormatType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kBookmark:
 #if defined(OS_WIN) || defined(OS_MACOSX)
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetUrlWFormatType(),
+      result = clipboard_->IsFormatAvailable(ui::GetUrlWClipboardFormatType(),
                                              clipboard_type);
 #else
       result = false;
@@ -93,11 +94,11 @@
 void ClipboardHostImpl::ReadText(ui::ClipboardType clipboard_type,
                                  ReadTextCallback callback) {
   base::string16 result;
-  if (clipboard_->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
+  if (clipboard_->IsFormatAvailable(ui::GetPlainTextWClipboardFormatType(),
                                     clipboard_type)) {
     clipboard_->ReadText(clipboard_type, &result);
   } else if (clipboard_->IsFormatAvailable(
-                 ui::Clipboard::GetPlainTextFormatType(), clipboard_type)) {
+                 ui::GetPlainTextClipboardFormatType(), clipboard_type)) {
     std::string ascii;
     clipboard_->ReadAsciiText(clipboard_type, &ascii);
     result = base::ASCIIToUTF16(ascii);
@@ -159,7 +160,7 @@
   base::Pickle pickle;
   ui::WriteCustomDataToPickle(data, &pickle);
   clipboard_writer_->WritePickledData(
-      pickle, ui::Clipboard::GetWebCustomDataFormatType());
+      pickle, ui::GetWebCustomDataClipboardFormatType());
 }
 
 void ClipboardHostImpl::WriteBookmark(ui::ClipboardType,
--- a/content/browser/renderer_host/clipboard_host_impl_unittest.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/browser/renderer_host/clipboard_host_impl_unittest.cc	2019-01-24 15:34:13.668000000 +0300
@@ -15,7 +15,7 @@
 #include "mojo/public/cpp/system/message_pipe.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "third_party/skia/include/core/SkBitmap.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/gfx/skia_util.h"
 
 namespace content {
@@ -55,9 +55,9 @@
   EXPECT_NE(sequence_number, system_clipboard()->GetSequenceNumber(
                                  ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_FALSE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetPlainTextFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::GetPlainTextClipboardFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetBitmapFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::GetBitmapClipboardFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
 
   SkBitmap actual =
       system_clipboard()->ReadImage(ui::CLIPBOARD_TYPE_COPY_PASTE);
--- a/content/browser/renderer_host/render_widget_host_impl.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/browser/renderer_host/render_widget_host_impl.cc	2019-01-24 15:34:13.740000000 +0300
@@ -98,7 +98,7 @@
 #include "skia/ext/platform_canvas.h"
 #include "storage/browser/fileapi/isolated_context.h"
 #include "third_party/blink/public/web/web_ime_text_span.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/display/display_switches.h"
 #include "ui/display/screen.h"
@@ -221,20 +221,17 @@
   std::vector<DropData::Metadata> metadata;
   if (!drop_data.text.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeText)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeText)));
   }
 
   if (drop_data.url.is_valid()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeURIList)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeURIList)));
   }
 
   if (!drop_data.html.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeHTML)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeHTML)));
   }
 
   // On Aura, filenames are available before drop.
--- a/content/browser/web_contents/web_contents_view_aura.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/browser/web_contents/web_contents_view_aura.cc	2019-01-24 15:34:15.564000000 +0300
@@ -228,10 +228,10 @@
 }
 #endif  // defined(OS_WIN)
 
-// Returns the FormatType to store file system files.
-const ui::Clipboard::FormatType& GetFileSystemFileFormatType() {
-  static base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"));
+// Returns the ClipboardFormatType to store file system files.
+const ui::ClipboardFormatType& GetFileSystemFileClipboardFormatType() {
+  static base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::GetClipboardFormatType("chromium/x-file-system-files"));
   return *format;
 }
 
@@ -270,13 +269,12 @@
     base::Pickle pickle;
     DropData::FileSystemFileInfo::WriteFileSystemFilesToPickle(
         drop_data.file_system_files, &pickle);
-    provider->SetPickledData(GetFileSystemFileFormatType(), pickle);
+    provider->SetPickledData(GetFileSystemFileClipboardFormatType(), pickle);
   }
   if (!drop_data.custom_data.empty()) {
     base::Pickle pickle;
     ui::WriteCustomDataToPickle(drop_data.custom_data, &pickle);
-    provider->SetPickledData(ui::Clipboard::GetWebCustomDataFormatType(),
-                             pickle);
+    provider->SetPickledData(ui::GetWebCustomDataClipboardFormatType(), pickle);
   }
 }
 
@@ -310,12 +308,12 @@
 
   base::Pickle pickle;
   std::vector<DropData::FileSystemFileInfo> file_system_files;
-  if (data.GetPickledData(GetFileSystemFileFormatType(), &pickle) &&
+  if (data.GetPickledData(GetFileSystemFileClipboardFormatType(), &pickle) &&
       DropData::FileSystemFileInfo::ReadFileSystemFilesFromPickle(
           pickle, &file_system_files))
     drop_data->file_system_files = file_system_files;
 
-  if (data.GetPickledData(ui::Clipboard::GetWebCustomDataFormatType(), &pickle))
+  if (data.GetPickledData(ui::GetWebCustomDataClipboardFormatType(), &pickle))
     ui::ReadCustomDataIntoMap(
         pickle.data(), pickle.size(), &drop_data->custom_data);
 }
--- a/content/public/test/browser_test_utils.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/public/test/browser_test_utils.cc	2019-01-24 15:34:25.844000000 +0300
@@ -112,8 +112,8 @@
 #include "third_party/blink/public/mojom/filesystem/file_system.mojom.h"
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/resource/resource_bundle.h"
-#include "ui/base/test/test_clipboard.h"
 #include "ui/compositor/test/draw_waiter_for_test.h"
 #include "ui/events/base_event_utils.h"
 #include "ui/events/gesture_detection/gesture_configuration.h"
--- a/content/renderer/BUILD.gn	2018-12-13 00:56:07.000000000 +0300
+++ b/content/renderer/BUILD.gn	2019-01-24 15:34:26.364000000 +0300
@@ -755,6 +755,7 @@
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:dom_keycode_converter",
--- a/content/renderer/drop_data_builder.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/renderer/drop_data_builder.cc	2019-01-24 15:34:26.732000000 +0300
@@ -13,7 +13,7 @@
 #include "third_party/blink/public/platform/web_drag_data.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/public/platform/web_vector.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 using blink::WebDragData;
 using blink::WebString;
@@ -33,20 +33,20 @@
     switch (item.storage_type) {
       case WebDragData::Item::kStorageTypeString: {
         base::string16 str_type(item.string_type.Utf16());
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeText)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeText)) {
           result.text = WebString::ToNullableString16(item.string_data);
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeURIList)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeURIList)) {
           result.url = blink::WebStringToGURL(item.string_data);
           result.url_title = item.title.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeDownloadURL)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeDownloadURL)) {
           result.download_metadata = item.string_data.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeHTML)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeHTML)) {
           result.html = WebString::ToNullableString16(item.string_data);
           result.html_base_url = item.base_url;
           break;
--- a/content/renderer/render_widget.cc	2018-12-13 00:56:07.000000000 +0300
+++ b/content/renderer/render_widget.cc	2019-01-24 15:34:28.040000000 +0300
@@ -108,7 +108,7 @@
 #include "third_party/blink/public/web/web_view.h"
 #include "third_party/blink/public/web/web_widget.h"
 #include "third_party/skia/include/core/SkShader.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/events/base_event_utils.h"
@@ -229,8 +229,7 @@
       // DropData::MetaData --> WebDragData-->DropData. In the end, DropData
       // will contain an empty URL (which means no URL is dragged) if the URL in
       // WebDragData is empty.
-      if (base::EqualsASCII(meta_data_item.mime_type,
-                            ui::Clipboard::kMimeTypeURIList)) {
+      if (base::EqualsASCII(meta_data_item.mime_type, ui::kMimeTypeURIList)) {
         item.string_data = WebString::FromUTF8("about:dragdrop-placeholder");
       }
       item_list.push_back(item);
@@ -275,7 +274,7 @@
   if (!drop_data.text.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeText);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeText);
     item.string_data = WebString::FromUTF16(drop_data.text.string());
     item_list.push_back(item);
   }
@@ -283,7 +282,7 @@
   if (!drop_data.url.is_empty()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeURIList);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeURIList);
     item.string_data = WebString::FromUTF8(drop_data.url.spec());
     item.title = WebString::FromUTF16(drop_data.url_title);
     item_list.push_back(item);
@@ -292,7 +291,7 @@
   if (!drop_data.html.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeHTML);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeHTML);
     item.string_data = WebString::FromUTF16(drop_data.html.string());
     item.base_url = drop_data.html_base_url;
     item_list.push_back(item);
--- a/content/shell/BUILD.gn	2018-12-13 00:56:07.000000000 +0300
+++ b/content/shell/BUILD.gn	2019-01-24 15:34:28.288000000 +0300
@@ -322,6 +322,7 @@
     "//third_party/blink/public:test_support",
     "//third_party/icu",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:events_base",
--- a/content/test/BUILD.gn	2018-12-13 00:56:07.000000000 +0300
+++ b/content/test/BUILD.gn	2019-01-24 15:34:28.396000000 +0300
@@ -377,6 +377,8 @@
     "//ui/base",
     "//ui/base:test_support",
     "//ui/base:ui_data_pack",
+    "//ui/base/clipboard",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
@@ -1008,6 +1010,7 @@
     "//ui/accessibility",
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/display",
@@ -1949,6 +1952,7 @@
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base:test_support",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
