--- chromium-69.0.3472.3/base/callback_helpers.h.gcc7	2018-06-26 06:32:56.000000000 +0200
+++ chromium-69.0.3472.3/base/callback_helpers.h	2018-07-07 16:00:33.724127746 +0200
@@ -91,7 +91,7 @@
   void ReplaceClosure(OnceClosure closure);
 
   // Releases the Closure without calling.
-  OnceClosure Release() WARN_UNUSED_RESULT;
+  OnceClosure Release();
 
  private:
   OnceClosure closure_;
--- chromium-69.0.3497.4/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc.gcc7	2018-07-21 09:13:41.000000000 +0200
+++ chromium-69.0.3497.4/third_party/blink/renderer/core/xmlhttprequest/xml_http_request.cc	2018-07-22 12:12:33.199377829 +0200
@@ -1851,9 +1851,6 @@ void XMLHttpRequest::DidSendData(uint64_
 
 void XMLHttpRequest::DidReceiveResponse(uint64_t identifier,
                                         const ResourceResponse& response) {
-  // TODO(yhirano): Remove this CHECK: see https://crbug.com/570946.
-  CHECK(&response);
-
   DVLOG(1) << this << " didReceiveResponse(" << identifier << ")";
   ScopedEventDispatchProtect protect(&event_dispatch_recursion_level_);
 
--- chromium-77.0.3865.35/net/base/address_tracker_linux.cc.gcc9	2019-08-15 00:02:09.000000000 +0200
+++ chromium-77.0.3865.35/net/base/address_tracker_linux.cc	2019-08-18 02:40:46.959280055 +0200
@@ -109,7 +109,7 @@ char* AddressTrackerLinux::GetInterfaceN
   ifr.ifr_ifindex = interface_index;
 
   if (ioctl(ioctl_socket.get(), SIOCGIFNAME, &ifr) == 0)
-    strncpy(buf, ifr.ifr_name, IFNAMSIZ - 1);
+    strncpy(buf, ifr.ifr_name, IFNAMSIZ);
   return buf;
 }
 
--- chromium-77.0.3865.35/mojo/public/cpp/bindings/interface_ptr.h.gcc9	2019-08-15 00:02:09.000000000 +0200
+++ chromium-77.0.3865.35/mojo/public/cpp/bindings/interface_ptr.h	2019-08-19 17:50:50.761940919 +0200
@@ -234,7 +234,7 @@ InterfacePtr<Interface> MakeProxy(
   InterfacePtr<Interface> ptr;
   if (info.is_valid())
     ptr.Bind(std::move(info), std::move(runner));
-  return std::move(ptr);
+  return ptr;
 }
 
 }  // namespace mojo
--- chromium-77.0.3865.35/extensions/browser/api/declarative/declarative_rule.h.gcc9	2019-08-15 00:02:07.000000000 +0200
+++ chromium-77.0.3865.35/extensions/browser/api/declarative/declarative_rule.h	2019-08-19 21:09:58.931468347 +0200
@@ -455,7 +455,7 @@ DeclarativeRule<ConditionT, ActionT>::Cr
   std::unique_ptr<ConditionSet> conditions = ConditionSet::Create(
       extension, url_matcher_condition_factory, rule.conditions, error);
   if (!error->empty())
-    return std::move(error_result);
+    return error_result;
   CHECK(conditions.get());
 
   bool bad_message = false;
@@ -466,17 +466,17 @@ DeclarativeRule<ConditionT, ActionT>::Cr
     // should be killed in case it is true.
     *error = "An action of a rule set had an invalid "
         "structure that should have been caught by the JSON validator.";
-    return std::move(error_result);
+    return error_result;
   }
   if (!error->empty() || bad_message)
-    return std::move(error_result);
+    return error_result;
   CHECK(actions.get());
 
   if (!check_consistency.is_null() &&
       !std::move(check_consistency)
            .Run(conditions.get(), actions.get(), error)) {
     DCHECK(!error->empty());
-    return std::move(error_result);
+    return error_result;
   }
 
   CHECK(rule.priority.get());
--- chromium-77.0.3865.35/ui/accessibility/ax_range.h.gcc9	2019-08-15 00:02:31.000000000 +0200
+++ chromium-77.0.3865.35/ui/accessibility/ax_range.h	2019-08-19 21:16:26.972767645 +0200
@@ -199,7 +199,7 @@ class AXRange {
       AXRange current_leaf_text_range(current_start_->AsTextPosition(),
                                       current_end->AsTextPosition());
       DCHECK(current_leaf_text_range.IsLeafTextRange());
-      return std::move(current_leaf_text_range);
+      return current_leaf_text_range;
     }
 
    private:
--- chromium-77.0.3865.35/third_party/blink/renderer/platform/wtf/hash_table.h.gcc9	2019-08-20 01:13:49.676102112 +0200
+++ chromium-77.0.3865.35/third_party/blink/renderer/platform/wtf/hash_table.h	2019-08-20 01:14:19.562593807 +0200
@@ -354,7 +354,7 @@ class HashTableConstIterator final {
   }
 
  public:
-  HashTableConstIterator() = default;
+  HashTableConstIterator() : position_(0), end_position_(0) {}
 
   GetType Get() const {
     CheckModifications();
--- chromium-78.0.3904.21/chrome/browser/resource_coordinator/tab_ranker/pairwise_inference.cc.gcc9	2019-09-19 20:50:27.000000000 +0200
+++ chromium-78.0.3904.21/chrome/browser/resource_coordinator/tab_ranker/pairwise_inference.cc	2019-09-22 16:25:52.738825612 +0200
@@ -58,12 +58,11 @@ void FullyConnected(const int32_t* __res
 template <typename T>
 void Relu(const int32_t rank,
           const int32_t* __restrict input_shape,
-          const T* __restrict input_values,
-          T* __restrict output_values) {
+          T* __restrict values) {
   const int32_t size = ShapeSize(rank, input_shape);
   for (int32_t i = 0; i < size; ++i) {
-    const T value = input_values[i];
-    output_values[i] = std::max(value, static_cast<T>(0));
+    const T value = values[i];
+    values[i] = std::max(value, static_cast<T>(0));
   }
 }
 
@@ -1980,7 +1979,7 @@ void Inference(const float* __restrict f
 
   // dnn/hiddenlayer_0/hiddenlayer_0/Relu
   Relu<float>(2,  // rank
-              fixed->shape0, fixed->alloc1, fixed->alloc1);
+              fixed->shape0, fixed->alloc1);
 
   // dnn/logits/MatMul_merged_with_dnn/logits/BiasAdd
   FullyConnected<float>(
--- chromium-78.0.3904.70/sandbox/linux/seccomp-bpf/syscall.cc.gcc9	2019-10-21 21:06:39.000000000 +0200
+++ chromium-78.0.3904.70/sandbox/linux/seccomp-bpf/syscall.cc	2019-10-28 21:14:17.697737345 +0100
@@ -371,7 +371,7 @@ intptr_t Syscall::Call(int nr,
       // N.B. These are not the calling conventions normally used by the ABI.
       : "=a"(ret)
       : "0"(ret), "D"(args)
-      : "cc", "esp", "memory", "ecx", "edx");
+      : "cc", "memory", "ecx", "edx");
 #elif defined(__x86_64__)
   intptr_t ret = SyscallAsm(nr, args);
 #elif defined(__arm__)
--- chromium-78.0.3904.70/third_party/tcmalloc/vendor/src/base/linux_syscall_support.h.gcc9	2019-10-21 21:07:26.000000000 +0200
+++ chromium-78.0.3904.70/third_party/tcmalloc/vendor/src/base/linux_syscall_support.h	2019-10-28 22:00:44.319641968 +0100
@@ -1066,7 +1066,7 @@ struct kernel_stat {
                            "pop %%ebx\n"                                      \
                            CFI_ADJUST_CFA_OFFSET(-4)                          \
                            args                                               \
-                           : "esp", "memory");                                \
+                           : "memory");                                       \
       LSS_RETURN(type,__res)
     #undef  _syscall0
     #define _syscall0(type,name)                                              \
@@ -1123,7 +1123,7 @@ struct kernel_stat {
                              : "i" (__NR_##name), "ri" ((long)(arg1)),        \
                                "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                                "S" ((long)(arg4)), "D" ((long)(arg5))         \
-                             : "esp", "memory");                              \
+                             : "memory");                                     \
         LSS_RETURN(type,__res);                                               \
       }
     #undef  _syscall6
@@ -1145,7 +1145,7 @@ struct kernel_stat {
                              : "i" (__NR_##name),  "0" ((long)(&__s)),        \
                                "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                                "S" ((long)(arg4)), "D" ((long)(arg5))         \
-                             : "esp", "memory");                              \
+                             : "memory");                                     \
         LSS_RETURN(type,__res);                                               \
       }
     LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
@@ -1231,7 +1231,7 @@ struct kernel_stat {
                            : "0"(-EINVAL), "i"(__NR_clone),
                              "m"(fn), "m"(child_stack), "m"(flags), "m"(arg),
                              "m"(parent_tidptr), "m"(newtls), "m"(child_tidptr)
-                           : "esp", "memory", "ecx", "edx", "esi", "edi");
+                           : "memory", "ecx", "edx", "esi", "edi");
       LSS_RETURN(int, __res);
     }
 
--- chromium-78.0.3904.70/third_party/tcmalloc/chromium/src/base/linux_syscall_support.h.gcc9	2019-10-21 21:07:26.000000000 +0200
+++ chromium-78.0.3904.70/third_party/tcmalloc/chromium/src/base/linux_syscall_support.h	2019-10-28 22:01:10.371213784 +0100
@@ -1067,7 +1067,7 @@ struct kernel_stat {
                            "pop %%ebx\n"                                      \
                            CFI_ADJUST_CFA_OFFSET(-4)                          \
                            args                                               \
-                           : "esp", "memory");                                \
+                           : "memory");                                       \
       LSS_RETURN(type,__res)
     #undef  _syscall0
     #define _syscall0(type,name)                                              \
@@ -1124,7 +1124,7 @@ struct kernel_stat {
                              : "i" (__NR_##name), "ri" ((long)(arg1)),        \
                                "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                                "S" ((long)(arg4)), "D" ((long)(arg5))         \
-                             : "esp", "memory");                              \
+                             : "memory");                                     \
         LSS_RETURN(type,__res);                                               \
       }
     #undef  _syscall6
@@ -1146,7 +1146,7 @@ struct kernel_stat {
                              : "i" (__NR_##name),  "0" ((long)(&__s)),        \
                                "c" ((long)(arg2)), "d" ((long)(arg3)),        \
                                "S" ((long)(arg4)), "D" ((long)(arg5))         \
-                             : "esp", "memory");                              \
+                             : "memory");                                     \
         LSS_RETURN(type,__res);                                               \
       }
     LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,
@@ -1232,7 +1232,7 @@ struct kernel_stat {
                            : "0"(-EINVAL), "i"(__NR_clone),
                              "m"(fn), "m"(child_stack), "m"(flags), "m"(arg),
                              "m"(parent_tidptr), "m"(newtls), "m"(child_tidptr)
-                           : "esp", "memory", "ecx", "edx", "esi", "edi");
+                           : "memory", "ecx", "edx", "esi", "edi");
       LSS_RETURN(int, __res);
     }
 
--- chromium-78.0.3904.70/v8/src/diagnostics/ia32/disasm-ia32.cc.gcc9	2019-10-21 21:09:21.000000000 +0200
+++ chromium-78.0.3904.70/v8/src/diagnostics/ia32/disasm-ia32.cc	2019-10-29 20:20:31.149741601 +0100
@@ -543,7 +543,7 @@ int DisassemblerIA32::F7Instruction(byte
   byte modrm = *++data;
   int mod, regop, rm;
   get_modrm(modrm, &mod, &regop, &rm);
-  const char* mnem = nullptr;
+  const char* mnem = "???";
   switch (regop) {
     case 0:
       mnem = "test";
--- chromium-80.0.3987.78/third_party/webrtc/api/function_view.h.gcc9	2020-01-29 22:41:12.000000000 +0100
+++ chromium-80.0.3987.78/third_party/webrtc/api/function_view.h	2020-02-02 00:35:42.969510416 +0100
@@ -76,7 +76,7 @@ class FunctionView<RetT(ArgT...)> final
           typename std::remove_reference<F>::type>::type>::value>::type* =
           nullptr>
   FunctionView(F&& f)
-      : call_(f ? CallFunPtr<typename std::remove_pointer<F>::type> : nullptr) {
+      : call_(CallFunPtr<typename std::remove_pointer<F>::type>) {
     f_.fun_ptr = reinterpret_cast<void (*)()>(f);
   }
 
--- chromium-80.0.3987.78/third_party/blink/renderer/core/editing/commands/delete_selection_command.cc.gcc9	2020-01-29 22:39:40.000000000 +0100
+++ chromium-80.0.3987.78/third_party/blink/renderer/core/editing/commands/delete_selection_command.cc	2020-02-03 06:16:46.601992850 +0100
@@ -226,15 +226,6 @@ static Position TrailingWhitespacePositi
   return Position();
 }
 
-// Workaround: GCC fails to resolve overloaded template functions, passed as
-// parameters of EnclosingNodeType. But it works wrapping that in a utility
-// function.
-#if defined(COMPILER_GCC)
-static bool IsHTMLTableRowElement(const blink::Node* node) {
-  return IsA<HTMLTableRowElement>(node);
-}
-#endif
-
 void DeleteSelectionCommand::InitializePositionData(
     EditingState* editing_state) {
   DCHECK(!GetDocument().NeedsLayoutTreeUpdate());
@@ -262,19 +253,10 @@ void DeleteSelectionCommand::InitializeP
 
   start_root_ = RootEditableElementOf(start);
   end_root_ = RootEditableElementOf(end);
-
-#if defined(COMPILER_GCC)
-  // Workaround. See declaration of IsHTMLTableRowElement
-  start_table_row_ = To<HTMLTableRowElement>(
-      EnclosingNodeOfType(start, &IsHTMLTableRowElement));
-  end_table_row_ =
-      To<HTMLTableRowElement>(EnclosingNodeOfType(end, &IsHTMLTableRowElement));
-#else
   start_table_row_ = To<HTMLTableRowElement>(
-      EnclosingNodeOfType(start, &IsA<HTMLTableRowElement>));
+      EnclosingNodeOfType(start, &IsA<HTMLTableRowElement, blink::Node>));
   end_table_row_ = To<HTMLTableRowElement>(
-      EnclosingNodeOfType(end, &IsA<HTMLTableRowElement>));
-#endif
+      EnclosingNodeOfType(end, &IsA<HTMLTableRowElement, blink::Node>));
 
   // Don't move content out of a table cell.
   // If the cell is non-editable, enclosingNodeOfType won't return it by
--- chromium-83.0.4103.7/components/metrics/call_stack_profile_metadata.cc.gcc9	2020-04-09 00:27:56.000000000 +0200
+++ chromium-83.0.4103.7/components/metrics/call_stack_profile_metadata.cc	2020-04-18 16:16:42.963270266 +0200
@@ -20,8 +20,9 @@ class MatchesNameHashIndexAndKey {
   bool operator()(const CallStackProfile::MetadataItem& item) const {
     absl::optional<int64_t> item_key_as_optional =
         item.has_key() ? item.key() : absl::optional<int64_t>();
-    return item.name_hash_index() == name_hash_index_ &&
-           key_ == item_key_as_optional;
+    bool a = item.name_hash_index() == name_hash_index_;
+    bool b = key_ == item_key_as_optional;
+    return a && b;
   }
 
  private:
--- chromium-83.0.4103.14/content/common/user_agent.cc.gcc9	2020-04-14 23:55:25.000000000 +0200
+++ chromium-83.0.4103.14/content/common/user_agent.cc	2020-04-19 01:31:33.960311497 +0200
@@ -122,7 +122,7 @@ std::string GetOSVersion(bool include_an
                       "%s%s", android_version_str.c_str(),
                       android_info_str.c_str()
 #else
-                      ""
+                      "%s", ""
 #endif
   );
   return os_version;
--- chromium-83.0.4103.56/third_party/crashpad/crashpad/client/annotation.h.gcc10	2020-05-14 17:55:53.898057027 +0200
+++ chromium-83.0.4103.56/third_party/crashpad/crashpad/client/annotation.h	2020-05-14 17:56:14.374688872 +0200
@@ -241,7 +241,7 @@ class StringAnnotation : public Annotati
   void Set(base::StringPiece string) {
     Annotation::ValueSizeType size =
         std::min(MaxSize, base::saturated_cast<ValueSizeType>(string.size()));
-    memcpy(value_, string.data(), size);
+    memcpy(&value_[0], string.data(), size);
     // Check for no embedded `NUL` characters.
     DCHECK(!memchr(value_, '\0', size)) << "embedded NUL";
     SetSize(size);
--- chromium-83.0.4103.56/v8/src/base/ieee754.cc.gcc10	2020-05-13 20:41:59.000000000 +0200
+++ chromium-83.0.4103.56/v8/src/base/ieee754.cc	2020-05-14 22:46:53.395984542 +0200
@@ -614,7 +614,7 @@ recompute:
       fw = 0.0;
       for (i = jz; i >= 0; i--) fw += fq[i];
       y[0] = (ih == 0) ? fw : -fw;
-      fw = fq[0] - fw;
+      fw = (jz >= 0) ? fq[0] - fw : 0;
       for (i = 1; i <= jz; i++) fw += fq[i];
       y[1] = (ih == 0) ? fw : -fw;
       break;
--- chromium-84.0.4147.89/third_party/vulkan_memory_allocator/include/vk_mem_alloc.h.gcc10	2020-07-13 20:43:47.000000000 +0200
+++ chromium-84.0.4147.89/third_party/vulkan_memory_allocator/include/vk_mem_alloc.h	2020-07-18 17:06:26.013970016 +0200
@@ -11290,8 +11290,10 @@ void VmaBlockMetadata_Linear::Alloc(
         {
             SuballocationVectorType& suballocations1st = AccessSuballocations1st();
             // New allocation at the end of 2-part ring buffer, so before first allocation from 1st vector.
-            VMA_ASSERT(!suballocations1st.empty() &&
-                request.offset + allocSize <= suballocations1st[m_1stNullItemsBeginCount].offset);
+            if(suballocations1st.empty() ||
+                request.offset + allocSize > suballocations1st[m_1stNullItemsBeginCount].offset) {
+                VMA_ASSERT(true);
+            }
             SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();
 
             switch(m_2ndVectorMode)
@@ -12885,7 +12887,9 @@ VkResult VmaBlockVector::AllocatePage(
                     if(IsCorruptionDetectionEnabled())
                     {
                         VkResult res = pBestRequestBlock->WriteMagicValueAroundAllocation(m_hAllocator, bestRequest.offset, size);
-                        VMA_ASSERT(res == VK_SUCCESS && "Couldn't map block memory to write magic value.");
+                        if (res != VK_SUCCESS) {
+                            VMA_ASSERT("Couldn't map block memory to write magic value.");
+                        }
                     }
                     return VK_SUCCESS;
                 }
@@ -12931,7 +12935,9 @@ void VmaBlockVector::Free(
         if(IsCorruptionDetectionEnabled())
         {
             VkResult res = pBlock->ValidateMagicValueAroundAllocation(m_hAllocator, hAllocation->GetOffset(), hAllocation->GetSize());
-            VMA_ASSERT(res == VK_SUCCESS && "Couldn't map block memory to validate magic value.");
+            if (res != VK_SUCCESS) {
+                VMA_ASSERT("Couldn't map block memory to validate magic value.");
+            }
         }
 
         if(hAllocation->IsPersistentMap())
@@ -13088,7 +13094,9 @@ VkResult VmaBlockVector::AllocateFromBlo
         if(IsCorruptionDetectionEnabled())
         {
             VkResult res = pBlock->WriteMagicValueAroundAllocation(m_hAllocator, currRequest.offset, size);
-            VMA_ASSERT(res == VK_SUCCESS && "Couldn't map block memory to write magic value.");
+            if (res != VK_SUCCESS) {
+                VMA_ASSERT("Couldn't map block memory to write magic value.");
+            }
         }
         return VK_SUCCESS;
     }
--- chromium-87.0.4280.40/third_party/crashpad/crashpad/client/crashpad_client_linux.cc.gcc10	2020-10-29 23:26:23.000000000 +0100
+++ chromium-87.0.4280.40/third_party/crashpad/crashpad/client/crashpad_client_linux.cc	2020-10-31 21:52:40.400501538 +0100
@@ -455,8 +455,10 @@ bool CrashpadClient::InitializeSignalSta
       const size_t kStackAllocSize = kStackSize + 2 * kGuardPageSize;
 
       stack_t stack;
+      stack_t stack2;
       stack.ss_flags = SS_DISABLE;
-      if (sigaltstack(&stack, &stack) != 0) {
+      stack2.ss_flags = SS_DISABLE;
+      if (sigaltstack(&stack2, &stack) != 0) {
         PLOG(ERROR) << "sigaltstack";
       } else if (stack.ss_sp !=
                  static_cast<char*>(stack_mem) + kGuardPageSize) {
--- chromium-87.0.4280.40/ui/events/ozone/layout/xkb/xkb_keyboard_layout_engine.cc.gcc10	2020-10-29 23:26:28.000000000 +0100
+++ chromium-87.0.4280.40/ui/events/ozone/layout/xkb/xkb_keyboard_layout_engine.cc	2020-10-31 23:23:45.016173466 +0100
@@ -839,7 +839,9 @@ void XkbKeyboardLayoutEngine::SetKeymap(
                {ui::EF_NUM_LOCK_ON, XKB_MOD_NAME_NUM}};
   xkb_flag_map_.clear();
   xkb_flag_map_.reserve(base::size(flags));
+#if defined(OS_CHROMEOS)
   xkb_mod_mask_t num_lock_mask = 0;
+#endif
   for (size_t i = 0; i < base::size(flags); ++i) {
     xkb_mod_index_t index = xkb_keymap_mod_get_index(keymap, flags[i].xkb_name);
     if (index == XKB_MOD_INVALID) {
@@ -848,8 +850,10 @@ void XkbKeyboardLayoutEngine::SetKeymap(
       xkb_mod_mask_t flag = static_cast<xkb_mod_mask_t>(1) << index;
       XkbFlagMapEntry e = {flags[i].ui_flag, flag, index};
       xkb_flag_map_.push_back(e);
+#if defined(OS_CHROMEOS)
       if (flags[i].ui_flag == EF_NUM_LOCK_ON)
         num_lock_mask = flag;
+#endif
     }
   }
 
--- chromium-87.0.4280.40/cc/trees/layer_tree_host_impl.cc.gcc10	2020-10-31 11:39:32.501883564 +0100
+++ chromium-87.0.4280.40/cc/trees/layer_tree_host_impl.cc	2020-11-01 03:15:02.320905832 +0100
@@ -2307,8 +2307,10 @@ bool LayerTreeHostImpl::DrawLayers(Frame
   auto compositor_frame = GenerateCompositorFrame(frame);
   const auto frame_token = compositor_frame.metadata.frame_token;
   frame->frame_token = frame_token;
+#if DCHECK_IS_ON()
   const viz::BeginFrameId begin_frame_ack_frame_id =
       compositor_frame.metadata.begin_frame_ack.frame_id;
+#endif
 
   // Collect |latency_info| information for tracking
   lag_tracking_manager_.CollectScrollEventsFromFrame(
--- chromium-87.0.4280.40/third_party/blink/renderer/bindings/core/v8/generated_code_helper.h.gcc10	2020-10-29 23:25:43.000000000 +0100
+++ chromium-87.0.4280.40/third_party/blink/renderer/bindings/core/v8/generated_code_helper.h	2020-11-01 23:08:24.891153676 +0100
@@ -131,7 +131,7 @@ typename IDLSequence<T>::ImplType Variad
     if (UNLIKELY(exception_state.HadException()))
       return VectorType();
   }
-  return std::move(result);
+  return result;
 }
 
 CORE_EXPORT absl::optional<size_t> FindIndexInEnumStringTable(
--- chromium-92.0.4515.51/ui/views/controls/scrollbar/scroll_bar.cc.gcc11	2021-06-11 00:12:29.000000000 +0200
+++ chromium-92.0.4515.51/ui/views/controls/scrollbar/scroll_bar.cc	2021-06-14 00:55:16.810973460 +0200
@@ -127,78 +127,81 @@ void ScrollBar::OnGestureEvent(ui::Gestu
     scroll_animator_->Stop();
   }
 
-  if (event->type() == ui::ET_GESTURE_TAP_DOWN) {
-    ProcessPressEvent(*event);
-    event->SetHandled();
-    return;
-  }
+  switch (event->type()) {
+    case ui::ET_GESTURE_TAP_DOWN:
+      ProcessPressEvent(*event);
+      event->SetHandled();
+      return;
 
-  if (event->type() == ui::ET_GESTURE_LONG_PRESS) {
-    // For a long-press, the repeater started in tap-down should continue. So
-    // return early.
-    return;
+    case ui::ET_GESTURE_LONG_PRESS:
+      // For a long-press, the repeater started in tap-down should continue. So
+      // return early.
+      return;
+    default:
+      break;
   }
 
   repeater_.Stop();
 
-  if (event->type() == ui::ET_GESTURE_TAP) {
-    // TAP_DOWN would have already scrolled some amount. So scrolling again on
-    // TAP is not necessary.
-    event->SetHandled();
-    return;
-  }
-
-  if (event->type() == ui::ET_GESTURE_SCROLL_BEGIN) {
-    scroll_status_ = ScrollStatus::kScrollStarted;
-    event->SetHandled();
-    return;
-  }
-
-  if (event->type() == ui::ET_GESTURE_SCROLL_END) {
-    scroll_status_ = ScrollStatus::kScrollEnded;
-    controller()->OnScrollEnded();
-    event->SetHandled();
-    return;
-  }
+  switch (event->type()) {
+    case ui::ET_GESTURE_TAP:
+      // TAP_DOWN would have already scrolled some amount. So scrolling again on
+      // TAP is not necessary.
+      event->SetHandled();
+      return;
 
-  // Update the |scroll_status_| to |kScrollEnded| in case the gesture sequence
-  // ends incorrectly.
-  if (event->type() == ui::ET_GESTURE_END &&
-      scroll_status_ == ScrollStatus::kScrollInEnding &&
-      scroll_status_ == ScrollStatus::kScrollEnded) {
-    scroll_status_ = ScrollStatus::kScrollEnded;
-    controller()->OnScrollEnded();
-  }
+    case ui::ET_GESTURE_SCROLL_BEGIN:
+      scroll_status_ = ScrollStatus::kScrollStarted;
+      event->SetHandled();
+      return;
 
-  if (event->type() == ui::ET_GESTURE_SCROLL_UPDATE) {
-    if (scroll_status_ == ScrollStatus::kScrollStarted)
-      scroll_status_ = ScrollStatus::kScrollInProgress;
-
-    float scroll_amount_f;
-    int scroll_amount;
-    if (IsHorizontal()) {
-      scroll_amount_f = event->details().scroll_x() - roundoff_error_.x();
-      scroll_amount = base::ClampRound(scroll_amount_f);
-      roundoff_error_.set_x(scroll_amount - scroll_amount_f);
-    } else {
-      scroll_amount_f = event->details().scroll_y() - roundoff_error_.y();
-      scroll_amount = base::ClampRound(scroll_amount_f);
-      roundoff_error_.set_y(scroll_amount - scroll_amount_f);
-    }
-    if (ScrollByContentsOffset(scroll_amount))
+    case ui::ET_GESTURE_SCROLL_END:
+      scroll_status_ = ScrollStatus::kScrollEnded;
+      controller()->OnScrollEnded();
       event->SetHandled();
-    return;
-  }
+      return;
 
-  if (event->type() == ui::ET_SCROLL_FLING_START) {
-    scroll_status_ = ScrollStatus::kScrollInEnding;
-    if (!scroll_animator_)
-      scroll_animator_ = std::make_unique<ScrollAnimator>(this);
-    scroll_animator_->Start(
-        IsHorizontal() ? event->details().velocity_x() : 0.f,
-        IsHorizontal() ? 0.f : event->details().velocity_y());
-    event->SetHandled();
-  }
+    // Update the |scroll_status_| to |kScrollEnded| in case the gesture sequence
+    // ends incorrectly.
+    case ui::ET_GESTURE_END:
+      if (scroll_status_ == ScrollStatus::kScrollInEnding &&
+        scroll_status_ == ScrollStatus::kScrollEnded) {
+        scroll_status_ = ScrollStatus::kScrollEnded;
+        controller()->OnScrollEnded();
+      }
+      break;
+
+    case ui::ET_GESTURE_SCROLL_UPDATE:
+      if (scroll_status_ == ScrollStatus::kScrollStarted)
+        scroll_status_ = ScrollStatus::kScrollInProgress;
+
+      float scroll_amount_f;
+      int scroll_amount;
+      if (IsHorizontal()) {
+        scroll_amount_f = event->details().scroll_x() - roundoff_error_.x();
+        scroll_amount = base::ClampRound(scroll_amount_f);
+        roundoff_error_.set_x(scroll_amount - scroll_amount_f);
+      } else {
+        scroll_amount_f = event->details().scroll_y() - roundoff_error_.y();
+        scroll_amount = base::ClampRound(scroll_amount_f);
+        roundoff_error_.set_y(scroll_amount - scroll_amount_f);
+      }
+      if (ScrollByContentsOffset(scroll_amount))
+        event->SetHandled();
+      return;
+
+    case ui::ET_SCROLL_FLING_START:
+      scroll_status_ = ScrollStatus::kScrollInEnding;
+      if (!scroll_animator_)
+        scroll_animator_ = std::make_unique<ScrollAnimator>(this);
+      scroll_animator_->Start(
+          IsHorizontal() ? event->details().velocity_x() : 0.f,
+          IsHorizontal() ? 0.f : event->details().velocity_y());
+      event->SetHandled();
+      break;
+    default:
+      break;
+    }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
--- chromium-94.0.4606.20/base/cxx17_backports.h.gcc11	2021-08-25 21:12:06.000000000 +0200
+++ chromium-94.0.4606.20/base/cxx17_backports.h	2021-09-02 19:32:14.514543694 +0200
@@ -105,7 +105,7 @@ constexpr const T& clamp(const T& v, con
 
 template <typename T>
 constexpr const T& clamp(const T& v, const T& lo, const T& hi) {
-  return clamp(v, lo, hi, std::less<T>{});
+  return base::clamp(v, lo, hi, std::less<T>{});
 }
 
 }  // namespace base
--- chromium-94.0.4606.20/third_party/angle/src/libANGLE/renderer/vulkan/CommandProcessor.h.gcc11	2021-08-25 21:15:34.000000000 +0200
+++ chromium-94.0.4606.20/third_party/angle/src/libANGLE/renderer/vulkan/CommandProcessor.h	2021-09-02 21:26:54.854314940 +0200
@@ -234,6 +234,7 @@ class DeviceQueueMap : public angle::Pac
     DeviceQueueMap(uint32_t queueFamilyIndex, bool isProtected)
         : mIndex(queueFamilyIndex), mIsProtected(isProtected)
     {}
+    constexpr DeviceQueueMap(DeviceQueueMap const &) = default;
     ~DeviceQueueMap();
     DeviceQueueMap &operator=(const DeviceQueueMap &other);
 
--- chromium-94.0.4606.20/third_party/blink/renderer/platform/audio/audio_destination.h.gcc11	2021-08-25 21:12:29.000000000 +0200
+++ chromium-94.0.4606.20/third_party/blink/renderer/platform/audio/audio_destination.h	2021-09-04 11:55:28.920473655 +0200
@@ -43,11 +43,13 @@
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 #include "third_party/blink/renderer/platform/wtf/thread_safe_ref_counted.h"
 
-namespace absl {
+namespace std {
 template <typename>
 class optional;
 }
-
+namespace absl {
+using std::optional;
+}
 namespace blink {
 
 class PushPullFIFO;
--- chromium-94.0.4606.20/third_party/blink/renderer/core/page/frame_tree.cc.gcc11	2021-08-25 21:12:28.000000000 +0200
+++ chromium-94.0.4606.20/third_party/blink/renderer/core/page/frame_tree.cc	2021-09-04 12:52:19.835603937 +0200
@@ -393,9 +393,9 @@ static void printFrames(const blink::Fra
   printf("  document=%p\n", local_frame ? local_frame->GetDocument() : nullptr);
   printIndent(indent);
   printf("  uri=%s\n\n",
-         local_frame && local_frame->GetDocument()
+         (local_frame && local_frame->GetDocument())
              ? local_frame->GetDocument()->Url().GetString().Utf8().c_str()
-             : nullptr);
+             : "");
 
   for (blink::Frame* child = frame->Tree().FirstChild(); child;
        child = child->Tree().NextSibling())
