--- chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc.format	2018-02-06 21:06:22.000000000 +0100
+++ chromium-65.0.3325.51/ui/gfx/ipc/buffer_types/gfx_param_traits.cc	2018-02-17 02:35:15.445832776 +0100
@@ -30,7 +30,7 @@
 void ParamTraits<gfx::BufferUsageAndFormat>::Log(
     const gfx::BufferUsageAndFormat& p,
     std::string* l) {
-  l->append(base::StringPrintf("(%d, %d)", p.usage, p.format));
+  l->append(base::StringPrintf("(%d, %d)", int(p.usage), int(p.format)));
 }
 
 }  // namespace IPC
--- chromium-66.0.3359.66/third_party/blink/renderer/platform/mhtml/mhtml_parser.cc.gcc7-5	2018-04-02 02:25:58.873350066 +0200
+++ chromium-66.0.3359.66/third_party/blink/renderer/platform/mhtml/mhtml_parser.cc	2018-04-02 02:27:48.929444720 +0200
@@ -316,9 +316,10 @@
     // In order to support parsing the MHTML archive file produced before the
     // MHTMLArchive bug was fixed, we need to take a risk of stripping off the
     // CRLF that indeed belongs to the content.
-    if (content.size() >= 2 && content[content.size() - 2] == '\r' &&
-        content[content.size() - 1] == '\n') {
-      content.resize(content.size() - 2);
+    size_t size = content.size();
+    if (size >= 2 && content[size - 2] == '\r' &&
+        content[size - 1] == '\n') {
+      content.resize(size - 2);
     }
 
     Vector<char> next_chars;
--- chromium-67.0.3396.10/third_party/blink/renderer/core/html/parser/html_tree_builder.cc.gcc7	2018-04-18 21:05:39.000000000 +0200
+++ chromium-67.0.3396.10/third_party/blink/renderer/core/html/parser/html_tree_builder.cc	2018-04-22 22:29:51.951074679 +0200
@@ -978,7 +978,7 @@ void HTMLTreeBuilder::ProcessStartTagFor
   }
   if (token->GetName() == html_names::kColTag) {
     ProcessFakeStartTag(html_names::kColgroupTag);
-    DCHECK(kInColumnGroupMode);
+    DCHECK(kInColumnGroupMode != 0);
     ProcessStartTag(token);
     return;
   }
--- chromium-68.0.3440.7/content/browser/renderer_host/render_widget_host_view_base.cc.gcc7	2018-05-31 12:45:40.000000000 +0200
+++ chromium-68.0.3440.7/content/browser/renderer_host/render_widget_host_view_base.cc	2018-06-02 20:27:56.685605639 +0200
@@ -227,7 +227,7 @@
   if (default_background_color_ == color)
     return;
 
-  bool opaque = default_background_color_
+  int opaque = default_background_color_
                     ? SkColorGetA(*default_background_color_)
                     : SK_AlphaOPAQUE;
   default_background_color_ = color;
--- chromium-69.0.3497.4/content/browser/web_package/signed_exchange_handler.cc.gcc7	2018-07-21 20:30:02.788552807 +0200
+++ chromium-69.0.3497.4/content/browser/web_package/signed_exchange_handler.cc	2018-07-22 00:32:42.325559060 +0200
@@ -615,7 +615,7 @@ void SignedExchangeHandler::OnVerifyCert
       error_message = base::StringPrintf(
           "CT verification failed. result: %s, policy compliance: %d",
           net::ErrorToShortString(error_code).c_str(),
-          cv_result.policy_compliance);
+          int(cv_result.policy_compliance));
       result = SignedExchangeLoadResult::kCTVerificationError;
     } else {
       error_message =
--- chromium-70.0.3528.4/gpu/command_buffer/client/gl_helper.cc.gcc8	2018-08-21 11:49:36.000000000 +0200
+++ chromium-70.0.3528.4/gpu/command_buffer/client/gl_helper.cc	2018-08-22 20:20:05.439042583 +0200
@@ -476,7 +476,7 @@
 }
 
 bool GLHelper::CopyTextureToImpl::IsBGRAReadbackSupported() {
-  if (bgra_support_ == BGRA_PREFERENCE_UNKNOWN) {
+  if (bgra_support_ == BGRA_SUPPORT_UNKNOWN) {
     bgra_support_ = BGRA_NOT_SUPPORTED;
     if (auto* extensions = gl_->GetString(GL_EXTENSIONS)) {
       const std::string extensions_string =
--- chromium-72.0.3626.81/third_party/blink/renderer/modules/cache_storage/inspector_cache_storage_agent.cc.gcc8	2019-01-30 02:18:16.000000000 +0100
+++ chromium-72.0.3626.81/third_party/blink/renderer/modules/cache_storage/inspector_cache_storage_agent.cc	2019-02-03 21:58:09.187174953 +0100
@@ -461,7 +461,7 @@ class CachedResponseFileReaderLoaderClie
   void DidFail(FileErrorCode error) override {
     callback_->sendFailure(ProtocolResponse::ServerError(
         String::Format("Unable to read the cached response, error code: %d",
-                       error)
+                       int(error))
             .Utf8()));
     dispose();
   }
--- chromium-74.0.3729.40/services/proxy_resolver/proxy_resolver_v8_tracing.cc.gcc8	2019-03-27 19:50:21.000000000 +0100
+++ chromium-74.0.3729.40/services/proxy_resolver/proxy_resolver_v8_tracing.cc	2019-03-31 17:44:54.755229746 +0200
@@ -857,7 +857,7 @@ void Job::SaveDnsToLocalCache(const std:
 
 std::string Job::MakeDnsCacheKey(const std::string& host,
                                  net::ProxyResolveDnsOperation op) {
-  return base::StringPrintf("%d:%s", op, host.c_str());
+  return base::StringPrintf("%d:%s", int(op), host.c_str());
 }
 
 void Job::HandleAlertOrError(bool is_alert,
--- chromium-75.0.3770.8/ui/events/blink/web_input_event_traits.cc.gcc8	2019-04-25 07:50:39.000000000 +0200
+++ chromium-75.0.3770.8/ui/events/blink/web_input_event_traits.cc	2019-05-01 09:33:52.140508136 +0200
@@ -61,7 +61,7 @@ void ApppendEventDetails(const WebGestur
                 " RawData: (%f, %f, %f, %f)\n}",
                 event.PositionInWidget().x(), event.PositionInWidget().y(),
                 event.PositionInScreen().x(), event.PositionInScreen().y(),
-                event.SourceDevice(), event.data.scroll_update.delta_x,
+                int(event.SourceDevice()), event.data.scroll_update.delta_x,
                 event.data.scroll_update.delta_y,
                 event.data.scroll_update.velocity_x,
                 event.data.scroll_update.velocity_y);
--- chromium-76.0.3809.46/device/fido/credential_management.cc.gcc8	2019-06-27 23:59:25.000000000 +0200
+++ chromium-76.0.3809.46/device/fido/credential_management.cc	2019-07-02 21:18:35.700132318 +0200
@@ -130,7 +130,7 @@ absl::optional<CredentialsMetadataRespon
   if (it == response_map.end() || !it->second.is_unsigned()) {
     return absl::nullopt;
   }
-  const int64_t existing_count = it->second.GetUnsigned();
+  const uint64_t existing_count = uint64_t(it->second.GetUnsigned());
   if (existing_count > std::numeric_limits<size_t>::max()) {
     return absl::nullopt;
   }
@@ -142,7 +142,7 @@ absl::optional<CredentialsMetadataRespon
   if (it == response_map.end() || !it->second.is_unsigned()) {
     return absl::nullopt;
   }
-  const int64_t remaining_count = it->second.GetUnsigned();
+  const uint64_t remaining_count = uint64_t(it->second.GetUnsigned());
   if (remaining_count > std::numeric_limits<size_t>::max()) {
     return absl::nullopt;
   }
@@ -174,7 +174,7 @@ absl::optional<EnumerateRPsResponse> Enu
   }
   if (expect_rp_count) {
     if (it == response_map.end() || !it->second.is_unsigned() ||
-        it->second.GetUnsigned() > std::numeric_limits<size_t>::max()) {
+        uint64_t(it->second.GetUnsigned()) > std::numeric_limits<size_t>::max()) {
       return absl::nullopt;
     }
     rp_count = static_cast<size_t>(it->second.GetUnsigned());
@@ -292,7 +292,7 @@ EnumerateCredentialsResponse::Parse(
         static_cast<int>(CredentialManagementResponseKey::kTotalCredentials)));
     if (it == response_map.end() || !it->second.is_unsigned() ||
         it->second.GetUnsigned() == 0 ||
-        it->second.GetUnsigned() > std::numeric_limits<size_t>::max()) {
+        uint64_t(it->second.GetUnsigned()) > std::numeric_limits<size_t>::max()) {
       return absl::nullopt;
     }
     credential_count = static_cast<size_t>(it->second.GetUnsigned());
--- chromium-76.0.3809.46/storage/browser/file_system/obfuscated_file_util_memory_delegate.cc.gcc8	2019-06-27 23:59:34.000000000 +0200
+++ chromium-76.0.3809.46/storage/browser/file_system/obfuscated_file_util_memory_delegate.cc	2019-07-02 22:09:50.604979383 +0200
@@ -512,8 +512,8 @@ base::File::Error ObfuscatedFileUtilMemo
 
   // |size_t| limits the maximum size that the memory file can keep and |int|
   // limits the maximum size that base::ReadFile function reads.
-  if (source_info.size > std::numeric_limits<size_t>::max() ||
-      source_info.size > std::numeric_limits<int>::max()) {
+  if (uint64_t(source_info.size) > std::numeric_limits<size_t>::max() ||
+      uint64_t(source_info.size) > std::numeric_limits<int>::max()) {
     return base::File::FILE_ERROR_NO_SPACE;
   }
 
--- chromium-77.0.3865.35/extensions/browser/api/socket/tcp_socket.cc.gcc9	2019-08-15 00:02:07.000000000 +0200
+++ chromium-77.0.3865.35/extensions/browser/api/socket/tcp_socket.cc	2019-08-19 15:53:57.756002626 +0200
@@ -165,7 +165,7 @@ void TCPSocket::Disconnect(bool socket_d
 void TCPSocket::Bind(const std::string& address,
                      uint16_t port,
                      net::CompletionOnceCallback callback) {
-  std::move(callback).Run(net::ERR_FAILED);
+  std::move(callback).Run(false);
 }
 
 void TCPSocket::Read(int count, ReadCompletionCallback callback) {
@@ -203,7 +203,7 @@ void TCPSocket::SendTo(scoped_refptr<net
                        int byte_count,
                        const net::IPEndPoint& address,
                        net::CompletionOnceCallback callback) {
-  std::move(callback).Run(net::ERR_FAILED);
+  std::move(callback).Run(false);
 }
 
 void TCPSocket::SetKeepAlive(bool enable,
--- chromium-77.0.3865.35/chrome/renderer/searchbox/searchbox.cc.gcc9	2019-08-15 00:02:02.000000000 +0200
+++ chromium-77.0.3865.35/chrome/renderer/searchbox/searchbox.cc	2019-08-19 22:33:58.223703225 +0200
@@ -282,11 +282,11 @@ void SearchBox::Paste(const base::string
 }
 
 void SearchBox::StartCapturingKeyStrokes() {
-  embedded_search_service_->FocusOmnibox(page_seq_no_, OMNIBOX_FOCUS_INVISIBLE);
+  embedded_search_service_->FocusOmnibox(page_seq_no_, true);
 }
 
 void SearchBox::StopCapturingKeyStrokes() {
-  embedded_search_service_->FocusOmnibox(page_seq_no_, OMNIBOX_FOCUS_NONE);
+  embedded_search_service_->FocusOmnibox(page_seq_no_, false);
 }
 
 void SearchBox::UndoAllMostVisitedDeletions() {
--- chromium-81.0.4044.43/third_party/blink/renderer/modules/accessibility/ax_object.cc.gcc9	2020-03-04 22:53:00.000000000 +0100
+++ chromium-81.0.4044.43/third_party/blink/renderer/modules/accessibility/ax_object.cc	2020-03-12 18:25:47.952680062 +0100
@@ -1709,7 +1709,7 @@ String AXObject::AriaTextAlternative(boo
         // calculations.
         AXObjectSet visited_copy = visited;
         text_alternative = TextFromElements(
-            true, visited, elements_from_attribute, related_objects);
+            true, visited_copy, elements_from_attribute, related_objects);
         if (!ids.IsEmpty())
           AXObjectCache().UpdateReverseRelations(this, ids);
         if (!text_alternative.IsNull()) {
--- chromium-84.0.4147.89/gpu/config/gpu_util.cc.gcc10	2020-07-13 20:41:26.000000000 +0200
+++ chromium-84.0.4147.89/gpu/config/gpu_util.cc	2020-07-18 20:33:03.088119410 +0200
@@ -713,7 +713,7 @@ void SetKeysForCrashLogging(const GPUInf
   crash_keys::gpu_pixel_shader_version.Set(gpu_info.pixel_shader_version);
   crash_keys::gpu_vertex_shader_version.Set(gpu_info.vertex_shader_version);
   crash_keys::gpu_generation_intel.Set(
-      base::StringPrintf("%d", GetIntelGpuGeneration(gpu_info)));
+      base::StringPrintf("%d", int(GetIntelGpuGeneration(gpu_info))));
 #if defined(OS_MAC)
   crash_keys::gpu_gl_version.Set(gpu_info.gl_version);
 #elif defined(OS_POSIX)
--- chromium-84.0.4147.89/ui/events/blink/web_input_event_traits.cc.gcc10	2020-07-18 05:58:51.819440377 +0200
+++ chromium-84.0.4147.89/ui/events/blink/web_input_event_traits.cc	2020-07-19 16:27:32.515843782 +0200
@@ -73,7 +73,7 @@ void ApppendTouchPointDetails(const WebT
                 "  (ID: %d, State: %d, ScreenPos: (%f, %f), Pos: (%f, %f),"
                 " Radius: (%f, %f), Rot: %f, Force: %f,"
                 " Tilt: (%d, %d), Twist: %d, TangentialPressure: %f),\n",
-                point.id, point.state, point.PositionInScreen().x(),
+                point.id, int(point.state), point.PositionInScreen().x(),
                 point.PositionInScreen().y(), point.PositionInWidget().x(),
                 point.PositionInWidget().y(), point.radius_x, point.radius_y,
                 point.rotation_angle, point.force, point.tilt_x, point.tilt_y,
@@ -84,7 +84,7 @@ void ApppendEventDetails(const WebTouchE
   StringAppendF(result,
                 "{\n Touches: %u, DispatchType: %d, CausesScrolling: %d,"
                 " Hovering: %d, uniqueTouchEventId: %u\n[\n",
-                event.touches_length, event.dispatch_type,
+                event.touches_length, int(event.dispatch_type),
                 event.moved_beyond_slop_region, event.hovering,
                 event.unique_touch_event_id);
   for (unsigned i = 0; i < event.touches_length; ++i)
--- chromium-91.0.4472.69/chrome/browser/notifications/notification_platform_bridge_linux.cc.gcc11	2021-05-20 04:16:59.000000000 +0200
+++ chromium-91.0.4472.69/chrome/browser/notifications/notification_platform_bridge_linux.cc	2021-05-24 06:01:32.427721710 +0200
@@ -773,7 +773,7 @@ class NotificationPlatformBridgeLinuxImp
     std::unique_ptr<ResourceFile> icon_file =
         WriteDataToTmpFile(notification->icon().As1xPNGBytes());
     if (icon_file) {
-      for (const std::string& hint_name : {"image_path", "image-path"}) {
+      for (char const * hint_name : {"image_path", "image-path"}) {
         dbus::MessageWriter image_path_writer(nullptr);
         hints_writer.OpenDictEntry(&image_path_writer);
         image_path_writer.AppendString(hint_name);
--- chromium-91.0.4472.69/chrome/browser/extensions/extension_service.cc.gcc11	2021-05-20 04:16:59.000000000 +0200
+++ chromium-91.0.4472.69/chrome/browser/extensions/extension_service.cc	2021-05-24 06:03:49.977252549 +0200
@@ -2364,7 +2364,7 @@ void ExtensionService::OnInstalledExtens
 void ExtensionService::UninstallMigratedExtensions() {
   std::unique_ptr<ExtensionSet> installed_extensions =
       registry_->GenerateInstalledExtensionsSet();
-  for (const std::string& extension_id : kObsoleteComponentExtensionIds) {
+  for (char const * extension_id : kObsoleteComponentExtensionIds) {
     auto* extension = installed_extensions->GetByID(extension_id);
     if (extension) {
       UninstallExtension(extension_id, UNINSTALL_REASON_COMPONENT_REMOVED,
--- chromium-91.0.4472.69/chrome/browser/ui/webui/settings/settings_clear_browsing_data_handler.cc.gcc11	2021-05-20 04:17:01.000000000 +0200
+++ chromium-91.0.4472.69/chrome/browser/ui/webui/settings/settings_clear_browsing_data_handler.cc	2021-05-24 06:05:30.203452578 +0200
@@ -114,11 +114,11 @@ void ClearBrowsingDataHandler::OnJavascr
   dse_service_observation_.Observe(
       TemplateURLServiceFactory::GetForProfile(profile_));
   DCHECK(counters_.empty());
-  for (const std::string& pref : kCounterPrefsBasic) {
+  for (char const * pref : kCounterPrefsBasic) {
     AddCounter(BrowsingDataCounterFactory::GetForProfileAndPref(profile_, pref),
                browsing_data::ClearBrowsingDataTab::BASIC);
   }
-  for (const std::string& pref : kCounterPrefsAdvanced) {
+  for (char const * pref : kCounterPrefsAdvanced) {
     AddCounter(BrowsingDataCounterFactory::GetForProfileAndPref(profile_, pref),
                browsing_data::ClearBrowsingDataTab::ADVANCED);
   }
--- chromium-91.0.4472.69/content/browser/renderer_host/back_forward_cache_can_store_document_result.cc.gcc11	2021-05-20 04:17:06.000000000 +0200
+++ chromium-91.0.4472.69/content/browser/renderer_host/back_forward_cache_can_store_document_result.cc	2021-05-24 09:06:16.659812665 +0200
@@ -37,7 +37,7 @@ std::string DisabledReasonsToString(
   std::vector<std::string> descriptions;
   for (const auto& reason : reasons) {
     descriptions.push_back(base::StringPrintf(
-        "%d:%d:%s", reason.source, reason.id, reason.description.c_str()));
+        "%d:%d:%s", int(reason.source), int(reason.id), reason.description.c_str()));
   }
   return base::JoinString(descriptions, ", ");
 }
--- chromium-91.0.4472.69/third_party/blink/renderer/platform/loader/subresource_integrity.cc.gcc11	2021-05-20 04:17:14.000000000 +0200
+++ chromium-91.0.4472.69/third_party/blink/renderer/platform/loader/subresource_integrity.cc	2021-05-24 16:19:47.039021427 +0200
@@ -117,7 +117,7 @@ bool SubresourceIntegrity::CheckSubresou
 
   // Check any of the "strongest" integrity constraints.
   IntegrityAlgorithm max_algorithm = FindBestAlgorithm(metadata_set);
-  for (const IntegrityMetadata& metadata : metadata_set) {
+  for (IntegrityMetadata metadata : metadata_set) {
     if (metadata.Algorithm() == max_algorithm &&
         CheckSubresourceIntegrityDigest(metadata, content, size)) {
       report_info.AddUseCount(ReportInfo::UseCounterFeature::
--- chromium-92.0.4515.51/third_party/webrtc/api/video_codecs/h264_profile_level_id.cc.gcc10	2021-06-11 00:14:14.000000000 +0200
+++ chromium-92.0.4515.51/third_party/webrtc/api/video_codecs/h264_profile_level_id.cc	2021-06-12 18:34:20.389965281 +0200
@@ -234,7 +234,7 @@ absl::optional<std::string> H264ProfileL
   }
 
   char str[7];
-  snprintf(str, 7u, "%s%02x", profile_idc_iop_string, profile_level_id.level);
+  snprintf(str, 7u, "%s%02hhx", profile_idc_iop_string, (unsigned char)(profile_level_id.level));
   return {str};
 }
 
--- chromium-92.0.4515.51/third_party/blink/renderer/modules/mediastream/local_media_stream_audio_source.cc.gcc11	2021-06-11 00:12:05.000000000 +0200
+++ chromium-92.0.4515.51/third_party/blink/renderer/modules/mediastream/local_media_stream_audio_source.cc	2021-06-15 00:01:37.997933994 +0200
@@ -124,7 +124,7 @@ void LocalMediaStreamAudioSource::OnCapt
     const std::string& why) {
   WebRtcLogMessage(
       base::StringPrintf("LocalMediaStreamAudioSource::OnCaptureError: %d, %s",
-                         code, why.c_str()));
+                         (int)code, why.c_str()));
 
   StopSourceOnError(code, why);
 }
--- chromium-92.0.4515.51/third_party/blink/renderer/modules/mediastream/processed_local_audio_source.cc.gcc11	2021-06-11 00:12:05.000000000 +0200
+++ chromium-92.0.4515.51/third_party/blink/renderer/modules/mediastream/processed_local_audio_source.cc	2021-06-15 02:30:02.690649311 +0200
@@ -490,7 +490,7 @@ void ProcessedLocalAudioSource::OnCaptur
     media::AudioCapturerSource::ErrorCode code,
     const std::string& message) {
   SendLogMessageWithSessionId(base::StringPrintf(
-      "OnCaptureError({code=%d, message=%s})", code, message.c_str()));
+      "OnCaptureError({code=%d, message=%s})", (int)code, message.c_str()));
   StopSourceOnError(code, message);
 }
 
--- chromium-94.0.4606.20/third_party/dawn/src/dawn_native/ProgrammablePassEncoder.cpp.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/dawn_native/ProgrammablePassEncoder.cpp	2021-09-02 20:55:01.390370631 +0200
@@ -130,7 +130,6 @@ namespace dawn_native {
                     break;
                 case wgpu::BufferBindingType::Storage:
                 case wgpu::BufferBindingType::ReadOnlyStorage:
-                case kInternalStorageBufferBinding:
                     requiredAlignment = kMinStorageBufferOffsetAlignment;
                     requiredAlignment = kMinStorageBufferOffsetAlignment;
                     break;
--- chromium-94.0.4606.20/third_party/dawn/src/common/Result.h.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/common/Result.h	2021-09-02 20:56:10.403023936 +0200
@@ -347,7 +347,7 @@ template <typename T, typename E>
 std::unique_ptr<E> Result<T*, E>::AcquireError() {
     std::unique_ptr<E> error(detail::GetErrorFromPayload<E>(mPayload));
     mPayload = detail::kEmptyPayload;
-    return std::move(error);
+    return error;
 }
 
 // Implementation of Result<const T*, E*>
@@ -400,7 +400,7 @@ template <typename T, typename E>
 std::unique_ptr<E> Result<const T*, E>::AcquireError() {
     std::unique_ptr<E> error(detail::GetErrorFromPayload<E>(mPayload));
     mPayload = detail::kEmptyPayload;
-    return std::move(error);
+    return error;
 }
 
 // Implementation of Result<Ref<T>, E>
@@ -461,7 +461,7 @@ std::unique_ptr<E> Result<Ref<T>, E>::Ac
     ASSERT(IsError());
     std::unique_ptr<E> error(detail::GetErrorFromPayload<E>(mPayload));
     mPayload = detail::kEmptyPayload;
-    return std::move(error);
+    return error;
 }
 
 // Implementation of Result<T, E>
--- chromium-94.0.4606.20/third_party/dawn/src/dawn_native/BindGroup.cpp.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/dawn_native/BindGroup.cpp	2021-09-02 21:29:47.182978115 +0200
@@ -57,11 +57,6 @@ namespace dawn_native {
                     maxBindingSize = kMaxStorageBufferBindingSize;
                     requiredBindingAlignment = kMinStorageBufferOffsetAlignment;
                     break;
-                case kInternalStorageBufferBinding:
-                    requiredUsage = kInternalStorageBuffer;
-                    maxBindingSize = kMaxStorageBufferBindingSize;
-                    requiredBindingAlignment = kMinStorageBufferOffsetAlignment;
-                    break;
                 case wgpu::BufferBindingType::Undefined:
                     UNREACHABLE();
             }
--- chromium-94.0.4606.20/media/cast/net/rtcp/rtcp_builder.cc.gcc11	2021-08-25 21:12:23.000000000 +0200
+++ chromium-94.0.4606.20/media/cast/net/rtcp/rtcp_builder.cc	2021-09-03 01:30:04.161898622 +0200
@@ -33,7 +33,7 @@ uint16_t MergeEventTypeAndTimestampForWi
 
   uint16_t event_type_4_bits = ConvertEventTypeToWireFormat(event);
   DCHECK(event_type_4_bits);
-  DCHECK(~(event_type_4_bits & 0xfff0));
+  DCHECK(uint16_t(~(event_type_4_bits & 0xfff0)));
   return (event_type_4_bits << 12) | time_delta_12_bits;
 }
 
--- chromium-94.0.4606.20/third_party/dawn/src/dawn_native/BindingInfo.cpp.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/dawn_native/BindingInfo.cpp	2021-09-03 19:06:51.982765302 +0200
@@ -40,7 +40,6 @@ namespace dawn_native {
                     break;
 
                 case wgpu::BufferBindingType::Storage:
-                case kInternalStorageBufferBinding:
                 case wgpu::BufferBindingType::ReadOnlyStorage:
                     if (buffer.hasDynamicOffset) {
                         ++bindingCounts->dynamicStorageBufferCount;
--- chromium-94.0.4606.20/third_party/dawn/src/dawn_native/vulkan/BindGroupLayoutVk.cpp.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/dawn_native/vulkan/BindGroupLayoutVk.cpp	2021-09-03 19:08:15.042161472 +0200
@@ -56,7 +56,6 @@ namespace dawn_native { namespace vulkan
                         }
                         return VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
                     case wgpu::BufferBindingType::Storage:
-                    case kInternalStorageBufferBinding:
                     case wgpu::BufferBindingType::ReadOnlyStorage:
                         if (bindingInfo.buffer.hasDynamicOffset) {
                             return VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC;
--- chromium-94.0.4606.20/third_party/dawn/src/dawn_native/PassResourceUsageTracker.cpp.gcc11	2021-08-25 21:15:36.000000000 +0200
+++ chromium-94.0.4606.20/third_party/dawn/src/dawn_native/PassResourceUsageTracker.cpp	2021-09-03 20:03:26.135221365 +0200
@@ -94,9 +94,6 @@ namespace dawn_native {
                         case wgpu::BufferBindingType::Storage:
                             BufferUsedAs(buffer, wgpu::BufferUsage::Storage);
                             break;
-                        case kInternalStorageBufferBinding:
-                            BufferUsedAs(buffer, kInternalStorageBuffer);
-                            break;
                         case wgpu::BufferBindingType::ReadOnlyStorage:
                             BufferUsedAs(buffer, kReadOnlyStorageBuffer);
                             break;
--- chromium-94.0.4606.54/v8/src/runtime/runtime-test-wasm.cc.i586	2021-09-20 21:15:00.000000000 +0200
+++ chromium-94.0.4606.54/v8/src/runtime/runtime-test-wasm.cc	2021-09-24 14:41:24.487978593 +0200
@@ -209,13 +209,13 @@ RUNTIME_FUNCTION(Runtime_WasmTraceExit)
       }
       case wasm::kF32: {
         float_t value = base::ReadUnalignedValue<float_t>(value_addr_smi.ptr());
-        PrintF(" -> %f\n", value);
+        PrintF(" -> %f\n", (double)value);
         break;
       }
       case wasm::kF64: {
         double_t value =
             base::ReadUnalignedValue<double_t>(value_addr_smi.ptr());
-        PrintF(" -> %f\n", value);
+        PrintF(" -> %f\n", (double)value);
         break;
       }
       default:
--- chromium-94.0.4606.81/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc.gcc11	2021-10-08 21:37:58.624376884 +0200
+++ chromium-94.0.4606.81/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2021-10-08 22:05:00.654000727 +0200
@@ -138,7 +138,7 @@ void InstallAlternateStackLocked() {
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const unsigned kSigStackSize = std::max(16384u, (unsigned)SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
--- chromium-96.0.4664.9/base/allocator/partition_allocator/partition_alloc_forward.h.gcc11	2021-10-15 06:38:53.000000000 +0200
+++ chromium-96.0.4664.9/base/allocator/partition_allocator/partition_alloc_forward.h	2021-10-17 22:22:48.543115855 +0200
@@ -28,7 +28,7 @@ namespace base {
 // platforms, as Chrome's requirement is C++14 as of 2020.
 #if defined(__STDCPP_DEFAULT_NEW_ALIGNMENT__)
 constexpr size_t kAlignment =
-    std::max(alignof(max_align_t), __STDCPP_DEFAULT_NEW_ALIGNMENT__);
+    std::max(alignof(max_align_t), std::size_t(__STDCPP_DEFAULT_NEW_ALIGNMENT__));
 #else
 constexpr size_t kAlignment = alignof(max_align_t);
 #endif
--- chromium-96.0.4664.9/net/url_request/redirect_util.cc.gcc11	2021-10-15 06:39:13.000000000 +0200
+++ chromium-96.0.4664.9/net/url_request/redirect_util.cc	2021-10-17 23:00:39.117464291 +0200
@@ -110,7 +110,7 @@ scoped_refptr<HttpResponseHeaders> Redir
       "HTTP/1.1 %i Internal Redirect\n"
       "Location: %s\n"
       "Non-Authoritative-Reason: %s",
-      response_code, redirect_destination.spec().c_str(),
+      int(response_code), redirect_destination.spec().c_str(),
       redirect_reason.c_str());
 
   std::string http_origin;
--- chromium-96.0.4664.9/third_party/perfetto/src/trace_processor/importers/proto/flamegraph_construction_algorithms.cc.gcc11	2021-10-15 06:42:47.000000000 +0200
+++ chromium-96.0.4664.9/third_party/perfetto/src/trace_processor/importers/proto/flamegraph_construction_algorithms.cc	2021-10-18 00:27:14.069291442 +0200
@@ -391,7 +391,7 @@ BuildNativeCallStackSamplingFlamegraph(
   for (const auto& tc : time_constraints) {
     if (!(tc.op == FilterOp::kGt || tc.op == FilterOp::kLt ||
           tc.op == FilterOp::kGe || tc.op == FilterOp::kLe)) {
-      PERFETTO_FATAL("Filter operation %d not permitted for perf.", tc.op);
+      PERFETTO_FATAL("Filter operation %d not permitted for perf.", int(tc.op));
     }
     Constraint cs = Constraint{
         static_cast<uint32_t>(tables::PerfSampleTable::ColumnIndex::ts), tc.op,
--- chromium-96.0.4664.9/services/network/public/cpp/corb/corb_impl.cc.gcc11	2021-10-15 06:39:13.000000000 +0200
+++ chromium-96.0.4664.9/services/network/public/cpp/corb/corb_impl.cc	2021-10-18 00:29:23.683760499 +0200
@@ -295,7 +295,7 @@ void LogAction(CrossOriginReadBlocking::
 bool CrossOriginReadBlocking::IsJavascriptMimeType(
     base::StringPiece mime_type) {
   constexpr auto kCaseInsensitive = base::CompareCase::INSENSITIVE_ASCII;
-  for (const std::string& suffix : kJavaScriptSuffixes) {
+  for (char const * suffix : kJavaScriptSuffixes) {
     if (base::EndsWith(mime_type, suffix, kCaseInsensitive))
       return true;
   }
--- chromium-96.0.4664.9/v8/src/base/platform/platform-posix.cc.gcc11	2021-10-17 19:05:03.753418600 +0200
+++ chromium-96.0.4664.9/v8/src/base/platform/platform-posix.cc	2021-10-18 01:12:29.020266024 +0200
@@ -840,7 +840,7 @@ Thread::Thread(const Options& options)
     : data_(new PlatformData),
       stack_size_(options.stack_size()),
       start_semaphore_(nullptr) {
-  if (stack_size_ > 0 && static_cast<size_t>(stack_size_) < PTHREAD_STACK_MIN) {
+  if (stack_size_ > 0 && static_cast<size_t>(stack_size_) < size_t(PTHREAD_STACK_MIN)) {
     stack_size_ = PTHREAD_STACK_MIN;
   }
   set_name(options.name());
--- chromium-96.0.4664.9/services/network/restricted_cookie_manager.cc.gcc11	2021-10-18 08:32:56.663412825 +0200
+++ chromium-96.0.4664.9/services/network/restricted_cookie_manager.cc	2021-10-18 08:33:14.006077842 +0200
@@ -161,7 +161,7 @@ CookieAccesses* RestrictedCookieManager:
     const GURL& url,
     const net::SiteForCookies& site_for_cookies) {
   std::unique_ptr<CookieAccesses>& entry =
-      recent_cookie_accesses_[std::tie(url, site_for_cookies)];
+      recent_cookie_accesses_[std::make_pair(url, site_for_cookies)];
   if (!entry) {
     entry = std::make_unique<CookieAccesses>();
   }
