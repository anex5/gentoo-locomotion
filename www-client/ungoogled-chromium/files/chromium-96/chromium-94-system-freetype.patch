--- chromium-94.0.4606.20/third_party/skia/src/ports/SkFontHost_FreeType.cpp.system-freetype	2021-08-25 21:15:45.000000000 +0200
+++ chromium-94.0.4606.20/third_party/skia/src/ports/SkFontHost_FreeType.cpp	2021-09-02 22:59:42.919970996 +0200
@@ -1107,34 +1107,6 @@ void SkScalerContext_FreeType::generateM
                                      FT_COLOR_INCLUDE_ROOT_TRANSFORM, &opaqueLayerPaint)) {
             haveLayers = true;
 
-            FT_ClipBox colrGlyphBbox;
-
-            // COLRv1 optionally provides a ClipBox that we can use for allocation.
-            if (FT_Get_Color_Glyph_ClipBox(fFace, glyph->getGlyphID(), &colrGlyphBbox)) {
-                // Find enclosing bounding box of clip box corner points, needed
-                // when clipbox is transformed.
-                bounds.xMin = colrGlyphBbox.bottom_left.x;
-                bounds.xMax = colrGlyphBbox.bottom_left.x;
-                bounds.yMin = colrGlyphBbox.bottom_left.y;
-                bounds.yMax = colrGlyphBbox.bottom_left.y;
-
-                for (auto& corner : {colrGlyphBbox.top_left,
-                                     colrGlyphBbox.top_right,
-                                     colrGlyphBbox.bottom_right}) {
-                    if (corner.x < bounds.xMin) {
-                        bounds.xMin = corner.x;
-                    }
-                    if (corner.y < bounds.yMin) {
-                        bounds.yMin = corner.y;
-                    }
-                    if (corner.x > bounds.xMax) {
-                        bounds.xMax = corner.x;
-                    }
-                    if (corner.y > bounds.yMax) {
-                        bounds.yMax = corner.y;
-                    }
-                }
-          } else {
               // Otherwise we need to traverse the glyph graph with a focus on measuring the
               // required bounding box.
               FT_BBox computed_bounds;
@@ -1160,7 +1132,6 @@ void SkScalerContext_FreeType::generateM
               }
 
               bounds = computed_bounds;
-          }
         }
 #endif // #TT_SUPPORT_COLRV1
 
--- chromium-94.0.4606.20/third_party/skia/src/ports/SkFontHost_FreeType_common.cpp.system-freetype	2021-08-25 21:15:45.000000000 +0200
+++ chromium-94.0.4606.20/third_party/skia/src/ports/SkFontHost_FreeType_common.cpp	2021-09-02 23:04:15.919808340 +0200
@@ -435,8 +435,6 @@ inline SkBlendMode ToSkBlendMode(FT_Comp
             return SkBlendMode::kDstATop;
         case FT_COLR_COMPOSITE_XOR:
             return SkBlendMode::kXor;
-        case FT_COLR_COMPOSITE_PLUS:
-            return SkBlendMode::kPlus;
         case FT_COLR_COMPOSITE_SCREEN:
             return SkBlendMode::kScreen;
         case FT_COLR_COMPOSITE_OVERLAY:
@@ -987,19 +985,6 @@ SkPath GetClipBoxPath(FT_Face ft_face, u
         FT_Set_Transform(ft_face, nullptr, nullptr);
     }
 
-    FT_ClipBox colrGlyphClipBox;
-    if (FT_Get_Color_Glyph_ClipBox(ft_face, glyph_id, &colrGlyphClipBox)) {
-        resultPath = SkPath::Polygon({{SkFDot6ToScalar(colrGlyphClipBox.bottom_left.x),
-                                       -SkFDot6ToScalar(colrGlyphClipBox.bottom_left.y)},
-                                      {SkFDot6ToScalar(colrGlyphClipBox.top_left.x),
-                                       -SkFDot6ToScalar(colrGlyphClipBox.top_left.y)},
-                                      {SkFDot6ToScalar(colrGlyphClipBox.top_right.x),
-                                       -SkFDot6ToScalar(colrGlyphClipBox.top_right.y)},
-                                      {SkFDot6ToScalar(colrGlyphClipBox.bottom_right.x),
-                                       -SkFDot6ToScalar(colrGlyphClipBox.bottom_right.y)}},
-                                     true);
-    }
-
     if (untransformed) {
         err = FT_Activate_Size(oldSize);
         if (err != 0) {
