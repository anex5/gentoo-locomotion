--- chromium-62.0.3192.0/third_party/webrtc/modules/video_processing/video_denoiser.cc.gcc7	2017-08-22 21:06:40.000000000 +0200
+++ chromium-62.0.3192.0/third_party/webrtc/modules/video_processing/video_denoiser.cc	2017-09-08 23:17:25.755051027 +0200
@@ -183,7 +183,7 @@
       // artifacts.
       if (mb_filter_decision_[mb_index] != FILTER_BLOCK ||
           IsTrailingBlock(moving_edge_, mb_row, mb_col) ||
-          (x_density_[mb_col] * y_density_[mb_row] &&
+          ((x_density_[mb_col] * y_density_[mb_row] != 0) &&
            moving_object_[mb_row * mb_cols_ + mb_col])) {
         // Copy y source.
         libyuv::CopyPlane(mb_src, stride_src, mb_dst, stride_dst, 16, 16);
--- chromium-75.0.3766.2/content/browser/renderer_host/media/media_devices_manager.cc.gcc8	2019-04-16 03:14:03.000000000 +0200
+++ chromium-75.0.3766.2/content/browser/renderer_host/media/media_devices_manager.cc	2019-04-21 23:05:22.338825561 +0200
@@ -429,13 +429,13 @@ void MediaDevicesManager::EnumerateDevic
     bool request_audio_input_capabilities,
     EnumerateDevicesCallback callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
-  DCHECK(request_video_input_capabilities &&
+  DCHECK((request_video_input_capabilities &&
              requested_types[static_cast<size_t>(
-                 MediaDeviceType::MEDIA_VIDEO_INPUT)] ||
+                 MediaDeviceType::MEDIA_VIDEO_INPUT)]) ||
          !request_video_input_capabilities);
-  DCHECK(request_audio_input_capabilities &&
+  DCHECK((request_audio_input_capabilities &&
              requested_types[static_cast<size_t>(
-                 MediaDeviceType::MEDIA_AUDIO_INPUT)] ||
+                 MediaDeviceType::MEDIA_AUDIO_INPUT)]) ||
          !request_audio_input_capabilities);
   SendLogMessage(base::StringPrintf(
       "EnumerateDevices({render_process_id=%d}, {render_frame_id=%d}, "
--- chromium-78.0.3904.9/chrome/browser/ui/views/location_bar/cookie_controls_icon_view.cc.gcc9	2019-09-12 05:02:53.000000000 +0200
+++ chromium-78.0.3904.9/chrome/browser/ui/views/location_bar/cookie_controls_icon_view.cc	2019-09-15 02:01:37.649680383 +0200
@@ -67,7 +67,7 @@ void CookieControlsIconView::OnCookiesCo
                                                    int blocked_cookies) {
   // The blocked cookie count changes quite frequently, so avoid unnecessary
   // UI updates.
-  if (has_blocked_cookies_ != blocked_cookies > 0) {
+  if (has_blocked_cookies_ != (blocked_cookies > 0)) {
     has_blocked_cookies_ = blocked_cookies > 0;
     SetVisible(ShouldBeVisible());
   }
--- chromium-79.0.3945.16/third_party/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc.gcc9	2019-10-29 23:03:49.000000000 +0100
+++ chromium-79.0.3945.16/third_party/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc	2019-11-03 19:37:15.119876142 +0100
@@ -134,9 +134,9 @@ void RtpPacketHistory::PutRtpPacket(std:
   // Store packet.
   const uint16_t rtp_seq_no = packet->SequenceNumber();
   int packet_index = GetPacketIndex(rtp_seq_no);
-  if (packet_index >= 0 &&
-      static_cast<size_t>(packet_index) < packet_history_.size() &&
-      packet_history_[packet_index].packet_ != nullptr) {
+  if ((packet_index >= 0) &&
+      (static_cast<size_t>(packet_index) < packet_history_.size()) &&
+      (packet_history_[packet_index].packet_ != nullptr)) {
     RTC_LOG(LS_WARNING) << "Duplicate packet inserted: " << rtp_seq_no;
     // Remove previous packet to avoid inconsistent state.
     RemovePacket(packet_index);
--- chromium-80.0.3987.78/chrome/browser/ash/input_method/input_method_engine_base.cc.gcc9	2020-01-29 22:39:35.000000000 +0100
+++ chromium-80.0.3987.78/chrome/browser/ash/input_method/input_method_engine_base.cc	2020-02-02 15:29:37.245356964 +0100
@@ -140,7 +140,7 @@ void GetExtensionKeyboardEventFromKeyEve
 const char kErrorInvalidValue[] = "Argument '%s' with value '%d' is not valid.";
 
 bool IsUint32Value(int i) {
-  return 0 <= i && i <= std::numeric_limits<uint32_t>::max();
+  return (0 <= i) && (((unsigned)i) <= std::numeric_limits<uint32_t>::max());
 }
 
 }  // namespace
--- chromium-81.0.4044.43/third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp.gcc9	2020-03-09 18:39:40.402300967 +0100
+++ chromium-81.0.4044.43/third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp	2020-03-09 19:15:03.377783238 +0100
@@ -2984,7 +2984,7 @@ vk::DynamicQueryPool *ContextVk::getQuer
     }
 
     // Assert that timestamp extension is available if needed.
-    ASSERT(queryType != gl::QueryType::Timestamp && queryType != gl::QueryType::TimeElapsed ||
+    ASSERT(((queryType != gl::QueryType::Timestamp) && (queryType != gl::QueryType::TimeElapsed)) ||
            mRenderer->getQueueFamilyProperties().timestampValidBits > 0);
     ASSERT(mQueryPools[queryType].isValid());
     return &mQueryPools[queryType];
--- chromium-85.0.4183.83/ui/display/screen.cc.gcc10	2020-08-24 23:41:27.000000000 +0200
+++ chromium-85.0.4183.83/ui/display/screen.cc	2020-08-31 04:02:31.456486112 +0200
@@ -101,8 +101,8 @@ void Screen::SetScopedDisplayForNewWindo
   if (display_id == scoped_display_id_for_new_windows_)
     return;
   // Only allow set and clear, not switch.
-  DCHECK(display_id == kInvalidDisplayId ^
-         scoped_display_id_for_new_windows_ == kInvalidDisplayId)
+  DCHECK((display_id == kInvalidDisplayId) ^
+         (scoped_display_id_for_new_windows_ == kInvalidDisplayId))
       << "display_id=" << display_id << ", scoped_display_id_for_new_windows_="
       << scoped_display_id_for_new_windows_;
   scoped_display_id_for_new_windows_ = display_id;
--- chromium-87.0.4280.40/cc/metrics/event_metrics.cc.gcc10	2020-10-29 23:25:25.000000000 +0100
+++ chromium-87.0.4280.40/cc/metrics/event_metrics.cc	2020-11-01 02:57:44.929671506 +0100
@@ -286,10 +286,10 @@ std::unique_ptr<EventMetrics> EventMetri
   if (IsGestureScroll(type)) {
     DCHECK(gesture_params);
     DCHECK(gesture_params->scroll_params);
-    DCHECK(IsGestureScrollUpdate(type) &&
-               gesture_params->scroll_params->update_type ||
-           !IsGestureScrollUpdate(type) &&
-               !gesture_params->scroll_params->update_type);
+    DCHECK((IsGestureScrollUpdate(type) &&
+               gesture_params->scroll_params->update_type) ||
+           (!IsGestureScrollUpdate(type) &&
+               !gesture_params->scroll_params->update_type));
     scroll_type = ToScrollType(gesture_params->input_type);
   } else if (IsGesturePinch(type)) {
     DCHECK(gesture_params);
--- chromium-87.0.4280.40/third_party/blink/renderer/platform/fonts/opentype/font_settings.h.gcc10	2020-10-29 23:25:44.000000000 +0100
+++ chromium-87.0.4280.40/third_party/blink/renderer/platform/fonts/opentype/font_settings.h	2020-11-02 00:54:32.044163806 +0100
@@ -27,11 +27,11 @@ class FontTagValuePair {
   FontTagValuePair(uint32_t tag, T value) : tag_(tag), value_(value) {
     // ensure tag is either valid or zero
     DCHECK(tag == 0 ||
-           (tag & 0xff000000) < 0x7f000000 &&
+           ((tag & 0xff000000) < 0x7f000000 &&
                (tag & 0xff000000) >= 0x20000000 &&
                (tag & 0xff0000) < 0x7f0000 && (tag & 0xff0000) >= 0x200000 &&
                (tag & 0xff00) < 0x7f00 && (tag & 0xff00) >= 0x2000 &&
-               (tag & 0xff) < 0x7f && (tag & 0xff) >= 0x20);
+               (tag & 0xff) < 0x7f && (tag & 0xff) >= 0x20));
   }
   FontTagValuePair(const AtomicString& tag, T value)
       : tag_(AtomicStringToFourByteTag(tag)), value_(value) {
--- chromium-88.0.4324.41/content/browser/renderer_host/navigation_request.cc.gcc10	2020-12-13 06:30:17.711400527 +0100
+++ chromium-88.0.4324.41/content/browser/renderer_host/navigation_request.cc	2020-12-13 14:59:37.140088323 +0100
@@ -4058,8 +4058,8 @@ bool NavigationRequest::IsDeferredForTes
 }
 
 bool NavigationRequest::IsMhtmlOrSubframe() {
-  DCHECK(state_ >= WILL_PROCESS_RESPONSE ||
-         state_ == WILL_START_REQUEST && !NeedsUrlLoader());
+  DCHECK((state_ >= WILL_PROCESS_RESPONSE) ||
+         (state_ == WILL_START_REQUEST && !NeedsUrlLoader()));
 
   return is_mhtml_or_subframe_;
 }
--- chromium-89.0.4389.47/third_party/blink/renderer/core/script/classic_pending_script.cc.gcc10	2021-02-11 00:04:08.000000000 +0100
+++ chromium-89.0.4389.47/third_party/blink/renderer/core/script/classic_pending_script.cc	2021-02-17 23:23:41.717809980 +0100
@@ -332,8 +332,9 @@ ClassicScript* ClassicPendingScript::Get
     not_streamed_reason = ScriptStreamer::NotStreamingReason::kErrorOccurred;
     streamer = nullptr;
   }
-  if (streamer)
+  if (streamer) {
     CHECK_EQ(ready_state_, kReady);
+  }
   ScriptStreamer::RecordStreamingHistogram(GetSchedulingType(), streamer,
                                            not_streamed_reason);
 
--- chromium-90.0.4430.19/content/browser/devtools/devtools_instrumentation.cc.gcc10	2021-03-09 19:39:35.000000000 +0100
+++ chromium-90.0.4430.19/content/browser/devtools/devtools_instrumentation.cc	2021-03-16 04:17:15.752347725 +0100
@@ -1079,11 +1079,11 @@ void BuildAndReportBrowserInitiatedIssue
     blink::mojom::InspectorIssueInfoPtr info) {
   // This method does not support other types for now.
   CHECK(info && info->details &&
-        (info->code == blink::mojom::InspectorIssueCode::kHeavyAdIssue &&
-             info->details->heavy_ad_issue_details ||
-         info->code ==
+        ((info->code == blink::mojom::InspectorIssueCode::kHeavyAdIssue &&
+             info->details->heavy_ad_issue_details) ||
+         (info->code ==
                  blink::mojom::InspectorIssueCode::kTrustedWebActivityIssue &&
-             info->details->twa_issue_details));
+             info->details->twa_issue_details)));
 
   std::unique_ptr<protocol::Audits::InspectorIssue> issue;
   if (info->code ==
--- chromium-91.0.4472.69/third_party/angle/src/libANGLE/renderer/vulkan/RendererVk.cpp.gcc-parentheses	2021-05-23 02:29:24.792289993 +0200
+++ chromium-91.0.4472.69/third_party/angle/src/libANGLE/renderer/vulkan/RendererVk.cpp	2021-05-23 03:08:46.787047536 +0200
@@ -2487,7 +2487,7 @@ void RendererVk::initFeatures(DisplayVk
     ANGLE_FEATURE_CONDITION(
         &mFeatures, enableMultisampledRenderToTexture,
         mFeatures.supportsMultisampledRenderToSingleSampled.enabled ||
-            !(IsApple() && isSwiftShader) && !(IsWindows() && (isIntel || isAMD)));
+           ( !(IsApple() && isSwiftShader) && !(IsWindows() && (isIntel || isAMD))));
 
     // Currently we enable cube map arrays based on the imageCubeArray Vk feature.
     // TODO: Check device caps for full cube map array support. http://anglebug.com/5143
--- chromium-91.0.4472.69/third_party/blink/renderer/core/frame/fullscreen_controller.cc.gcc11	2021-05-20 04:17:13.000000000 +0200
+++ chromium-91.0.4472.69/third_party/blink/renderer/core/frame/fullscreen_controller.cc	2021-05-24 12:06:38.941360347 +0200
@@ -180,7 +180,7 @@ void FullscreenController::EnterFullscre
   }
 
   DCHECK(state_ == State::kInitial ||
-         state_ == State::kFullscreen && requesting_other_screen);
+         ((state_ == State::kFullscreen) && requesting_other_screen));
   auto fullscreen_options = ToMojoOptions(&frame, options, request_type);
 
 #if DCHECK_IS_ON()
--- chromium-94.0.4606.20/gpu/command_buffer/client/dawn_client_serializer.cc.gcc11	2021-08-25 21:12:22.000000000 +0200
+++ chromium-94.0.4606.20/gpu/command_buffer/client/dawn_client_serializer.cc	2021-09-02 22:27:15.472984303 +0200
@@ -89,7 +89,7 @@ void DawnClientSerializer::Commit() {
     TRACE_EVENT_WITH_FLOW0(
         TRACE_DISABLED_BY_DEFAULT("gpu.dawn"), "DawnCommands",
         TRACE_EVENT_FLAG_FLOW_OUT,
-        (static_cast<uint64_t>(buffer_.shm_id()) << 32) + buffer_.offset());
+        ((static_cast<uint64_t>(buffer_.shm_id()) << 32) + buffer_.offset()));
 
     buffer_.Shrink(put_offset_);
     helper_->DawnCommands(buffer_.shm_id(), buffer_.offset(), put_offset_);
--- chromium-94.0.4606.20/gpu/command_buffer/service/webgpu_decoder_impl.cc.gcc11	2021-08-25 21:12:22.000000000 +0200
+++ chromium-94.0.4606.20/gpu/command_buffer/service/webgpu_decoder_impl.cc	2021-09-03 01:37:17.714456624 +0200
@@ -1019,7 +1019,7 @@ error::Error WebGPUDecoderImpl::HandleDa
   TRACE_EVENT_WITH_FLOW0(
       TRACE_DISABLED_BY_DEFAULT("gpu.dawn"), "DawnCommands",
       TRACE_EVENT_FLAG_FLOW_IN,
-      (static_cast<uint64_t>(commands_shm_id) << 32) + commands_shm_offset);
+      ((static_cast<uint64_t>(commands_shm_id) << 32) + commands_shm_offset));
 
   TRACE_EVENT1(TRACE_DISABLED_BY_DEFAULT("gpu.dawn"),
                "WebGPUDecoderImpl::HandleDawnCommands", "bytes", size);
--- chromium-94.0.4606.20/third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp.gcc11	2021-08-25 21:15:34.000000000 +0200
+++ chromium-94.0.4606.20/third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp	2021-09-03 10:15:55.084416442 +0200
@@ -7304,7 +7304,7 @@ LayerMode GetLayerMode(const vk::ImageHe
     const uint32_t imageLayerCount = GetImageLayerCountForView(image);
     const bool allLayers           = layerCount == imageLayerCount;
 
-    ASSERT(allLayers || layerCount > 0 && layerCount <= gl::IMPLEMENTATION_MAX_TEXTURE_LEVELS);
+    ASSERT(allLayers || ((layerCount > 0) && (layerCount <= gl::IMPLEMENTATION_MAX_TEXTURE_LEVELS)));
     return allLayers ? LayerMode::All : static_cast<LayerMode>(layerCount);
 }
 
--- chromium-94.0.4606.20/third_party/blink/renderer/core/editing/visible_units_paragraph.cc.gcc-parentheses	2021-09-04 12:56:47.928494902 +0200
+++ chromium-94.0.4606.20/third_party/blink/renderer/core/editing/visible_units_paragraph.cc	2021-09-04 16:09:47.939882737 +0200
@@ -355,8 +355,8 @@ VisiblePosition StartOfNextParagraph(con
   }
   DCHECK(!paragraph_end.IsBeforeAnchor());
   DCHECK(visible_position.DeepEquivalent() < paragraph_end ||
-         visible_position.DeepEquivalent() == paragraph_end &&
-             paragraph_end.IsAfterAnchor());
+         (visible_position.DeepEquivalent() == paragraph_end &&
+             paragraph_end.IsAfterAnchor()));
   VisiblePosition after_paragraph_end(
       NextPositionOf(paragraph_end, kCannotCrossEditingBoundary));
   // It may happen that an element's next visually equivalent candidate is set
--- chromium-96.0.4664.9/third_party/blink/renderer/platform/transforms/scale_transform_operation.cc.gcc11	2021-10-15 06:39:17.000000000 +0200
+++ chromium-96.0.4664.9/third_party/blink/renderer/platform/transforms/scale_transform_operation.cc	2021-10-19 10:41:03.232522143 +0200
@@ -32,7 +32,7 @@ TransformOperation::OperationType GetTyp
   // Note: purely due to ordering, we will convert scale(1, 1, 1) to kScaleX.
   // This is fine; they are equivalent.
 
-  if (z != 1 & y == 1 & x == 1)
+  if ((z != 1) && (y == 1) && (x == 1))
     return TransformOperation::kScaleZ;
 
   if (z != 1)
