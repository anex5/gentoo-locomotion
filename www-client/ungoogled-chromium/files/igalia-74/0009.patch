--- a/headless/app/headless_shell_switches.cc	2019-05-17 17:45:41.024000000 +0300
+++ b/headless/app/headless_shell_switches.cc	2019-05-17 18:53:33.100000000 +0300
@@ -82,7 +82,7 @@
 
 // Causes SSL key material to be logged to the specified file for debugging
 // purposes. See
-// https://developer.m0z111a.qjz9zk/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format
+// https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format
 // for the format.
 const char kSSLKeyLogFile[] = "ssl-key-log-file";
 
--- a/headless/BUILD.gn	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/BUILD.gn	2019-05-17 18:53:33.100000000 +0300
@@ -10,6 +10,7 @@
 import("//headless/headless.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 import("//printing/buildflags/buildflags.gni")
+import("//services/service_manager/public/service_manifest.gni")
 import("//testing/test.gni")
 import("//third_party/closure_compiler/compile_js.gni")
 import("//third_party/inspector_protocol/inspector_protocol.gni")
@@ -17,9 +18,12 @@
 import("//tools/grit/repack.gni")
 import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
 
-# For code inside the build component "headless".
-config("inside_headless_component") {
+config("headless_implementation") {
   defines = [ "HEADLESS_IMPLEMENTATION" ]
+
+  if (headless_use_embedded_resources) {
+    defines += [ "HEADLESS_USE_EMBEDDED_RESOURCES" ]
+  }
 }
 
 group("headless_lib") {
@@ -222,7 +226,7 @@
       "//third_party/fontconfig",
     ]
 
-    configs += [ ":inside_headless_component" ]
+    configs += [ ":headless_implementation" ]
   }
 }
 
@@ -247,8 +251,6 @@
 
   # These are relative to $target_gen_dir.
   outputs = [
-    "lib/browser/protocol/base_string_adapter.cc",
-    "lib/browser/protocol/base_string_adapter.h",
     "lib/browser/protocol/dp_browser.cc",
     "lib/browser/protocol/dp_browser.h",
     "lib/browser/protocol/dp_headless_experimental.cc",
@@ -306,6 +308,8 @@
     "lib/browser/protocol/headless_handler.h",
     "lib/browser/protocol/page_handler.cc",
     "lib/browser/protocol/page_handler.h",
+    "lib/browser/protocol/protocol_string.cc",
+    "lib/browser/protocol/protocol_string.h",
     "lib/browser/protocol/target_handler.cc",
     "lib/browser/protocol/target_handler.h",
     "lib/headless_content_client.cc",
@@ -424,7 +428,7 @@
     deps += [
       "//components/crash/core/common:crash_key",
       "//components/security_state/content",
-      "//components/services/pdf_compositor/public/cpp:manifest",
+      "//components/services/pdf_compositor:pdf_compositor_manifest",
       "//components/services/pdf_compositor/public/interfaces",
       "//gin",
       "//third_party/blink/public:blink",
@@ -472,7 +476,6 @@
   }
 
   if (headless_use_embedded_resources) {
-    defines = [ "HEADLESS_USE_EMBEDDED_RESOURCES" ]
     deps += [ ":embed_resources" ]
     sources += [
       "$root_gen_dir/headless/embedded_resource_pak.cc",
@@ -490,7 +493,7 @@
     deps += [ ":headless_fontconfig_utils" ]
   }
 
-  configs += [ ":inside_headless_component" ]
+  configs += [ ":headless_implementation" ]
 }
 
 # Headless renderer is a convenience library for non component builds that
@@ -507,10 +510,6 @@
       "lib/renderer/headless_content_renderer_client.h",
     ]
 
-    if (headless_use_embedded_resources) {
-      defines = [ "HEADLESS_USE_EMBEDDED_RESOURCES" ]
-    }
-
     if (enable_basic_printing) {
       sources += [
         "lib/renderer/headless_print_render_frame_helper_delegate.cc",
@@ -528,6 +527,8 @@
     if (enable_basic_printing) {
       deps += [ "//components/printing/renderer" ]
     }
+
+    configs += [ ":headless_implementation" ]
   }
 } else {
   # For component builds all dependencies are already included in the headless
@@ -551,6 +552,7 @@
 
 test("headless_unittests") {
   sources = [
+    "lib/browser/protocol/protocol_unittest.cc",
     "public/domains/types_unittest.cc",
     "public/util/error_reporter_unittest.cc",
   ]
@@ -571,7 +573,7 @@
     "//base/test:run_all_unittests",
     "//base/test:test_support",
     "//components/security_state/content",
-    "//components/services/pdf_compositor/public/cpp:manifest",
+    "//components/services/pdf_compositor:pdf_compositor_manifest",
     "//components/services/pdf_compositor/public/interfaces",
     "//content/public/app:both",
     "//content/public/child:child",
@@ -601,13 +603,22 @@
 if (is_mac) {
   copy("mac_helpers") {
     sources = [
-      "$root_out_dir/chrome_crashpad_handler",
+      "$root_out_dir/crashpad_handler",
     ]
 
     deps = [
-      "//components/crash/content/app:chrome_crashpad_handler",
+      "//base",
+      "//third_party/crashpad/crashpad/handler:crashpad_handler",
     ]
 
+    if (is_component_build) {
+      sources += [ "$root_out_dir/libbase.dylib" ]
+      if (use_custom_libcxx) {
+        sources += [ "$root_out_dir/libc++.dylib" ]
+        deps += [ "//buildtools/third_party/libc++:libc++" ]
+      }
+    }
+
     outputs = [
       "$root_out_dir/Helpers/{{source_file_part}}",
     ]
@@ -722,7 +733,7 @@
     ":headless_renderer",
     "//base",
     "//components/security_state/content",
-    "//components/services/pdf_compositor/public/cpp:manifest",
+    "//components/services/pdf_compositor:pdf_compositor_manifest",
     "//components/services/pdf_compositor/public/interfaces",
     "//content/test:test_support",
     "//services/network/public/mojom",
@@ -766,6 +777,8 @@
     sources = [
       "app/headless_shell.cc",
       "app/headless_shell.h",
+      "app/headless_shell_switches.cc",
+      "app/headless_shell_switches.h",
       "app/headless_shell_win.cc",
       "lib/browser/headless_content_browser_client.cc",
       "lib/browser/headless_content_browser_client.h",
@@ -775,7 +788,7 @@
     ]
     deps = [
       ":headless",
-      "//components/services/pdf_compositor/public/cpp:manifest",
+      "//components/services/pdf_compositor:pdf_compositor_manifest",
       "//components/services/pdf_compositor/public/interfaces",
       "//content:sandbox_helper_win",
       "//content/public/browser",
@@ -798,6 +811,8 @@
         "//third_party/blink/public:blink_headers",
       ]
     }
+
+    configs += [ ":headless_implementation" ]
   }
 
   # Headless library with child specific dependencies (e.g., renderer). This
@@ -832,6 +847,8 @@
         "//third_party/blink/public:blink_headers",
       ]
     }
+
+    configs += [ ":headless_implementation" ]
   }
 }
 
@@ -859,7 +876,7 @@
     ":headless_renderer",
     "//components/os_crypt",
     "//components/security_state/content",
-    "//components/services/pdf_compositor/public/cpp:manifest",
+    "//components/services/pdf_compositor:pdf_compositor_manifest",
     "//components/services/pdf_compositor/public/interfaces",
     "//content/public/app:both",
     "//content/public/browser",
--- a/headless/lib/browser/DEPS	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/DEPS	2019-05-17 18:53:33.104000000 +0300
@@ -3,7 +3,7 @@
   "+components/printing/browser",
   "+components/printing/common",
   "+components/security_state",
-  "+components/services/pdf_compositor/public/cpp",
+  "+components/services/pdf_compositor/pdf_compositor_manifest.h",
   "+components/viz",
   "+printing",
   "+services/network",
@@ -11,7 +11,6 @@
   "+storage/common/quota",
   "+third_party/skia/include",
   "+third_party/blink/public/mojom/quota",
-  "+third_party/blink/public/mojom/renderer_preferences.mojom.h",
   "+ui/aura",
   "+ui/compositor",
   "+ui/events/keycodes/dom",
--- a/headless/lib/browser/devtools_api/domain_h.template	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/devtools_api/domain_h.template	2019-05-17 18:53:33.104000000 +0300
@@ -10,7 +10,7 @@
 #include "base/callback.h"
 #include "base/observer_list.h"
 #include "base/values.h"
-#include "headless/lib/browser/protocol/base_string_adapter.h"
+#include "headless/lib/browser/protocol/protocol_string.h"
 {% for domain_name in domain.dependencies %}
 #include "headless/public/devtools/domains/types_{{domain_name | camelcase_to_hacker_style}}.h"
 {% endfor %}
--- a/headless/lib/browser/devtools_api/domain_types_h.template	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/devtools_api/domain_types_h.template	2019-05-17 18:53:33.104000000 +0300
@@ -9,7 +9,7 @@
 
 #include "base/optional.h"
 #include "base/values.h"
-#include "headless/lib/browser/protocol/base_string_adapter.h"
+#include "headless/lib/browser/protocol/protocol_string.h"
 {% for domain_name in domain.dependencies %}
 #include "headless/public/devtools/internal/types_forward_declarations_{{domain_name | camelcase_to_hacker_style}}.h"
 {% endfor %}
--- a/headless/lib/browser/headless_content_browser_client.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_content_browser_client.cc	2019-05-17 18:53:33.104000000 +0300
@@ -8,7 +8,6 @@
 #include <unordered_set>
 
 #include "base/base_switches.h"
-#include "base/bind.h"
 #include "base/callback.h"
 #include "base/command_line.h"
 #include "base/path_service.h"
@@ -176,8 +175,7 @@
     content::StoragePartition* partition,
     ::storage::OptionalQuotaSettingsCallback callback) {
   ::storage::GetNominalDynamicSettings(
-      partition->GetPath(), context->IsOffTheRecord(),
-      ::storage::GetDefaultDiskInfoHelper(), std::move(callback));
+      partition->GetPath(), context->IsOffTheRecord(), std::move(callback));
 }
 
 content::GeneratedCodeCacheSettings
--- a/headless/lib/browser/headless_devtools_client_impl.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_devtools_client_impl.cc	2019-05-17 18:53:33.104000000 +0300
@@ -77,7 +77,7 @@
 HeadlessDevToolsClientImpl::~HeadlessDevToolsClientImpl() {
   if (parent_client_)
     parent_client_->sessions_.erase(session_id_);
-}
+};
 
 void HeadlessDevToolsClientImpl::AttachToExternalHost(
     ExternalHost* external_host) {
@@ -131,8 +131,7 @@
 
 void HeadlessDevToolsClientImpl::SendRawDevToolsMessage(
     const std::string& json_message) {
-  std::unique_ptr<base::Value> message =
-      base::JSONReader::ReadDeprecated(json_message);
+  std::unique_ptr<base::Value> message = base::JSONReader::Read(json_message);
   if (!message->is_dict()) {
     LOG(ERROR) << "Malformed raw message";
     return;
@@ -154,7 +153,7 @@
     const std::string& json_message) {
   // LOG(ERROR) << "[RECV] " << json_message;
   std::unique_ptr<base::Value> message =
-      base::JSONReader::ReadDeprecated(json_message, base::JSON_PARSE_RFC);
+      base::JSONReader::Read(json_message, base::JSON_PARSE_RFC);
   if (!message || !message->is_dict()) {
     NOTREACHED() << "Badly formed reply " << json_message;
     return;
--- a/headless/lib/browser/headless_devtools_manager_delegate.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_devtools_manager_delegate.cc	2019-05-17 18:53:33.104000000 +0300
@@ -25,11 +25,12 @@
 void HeadlessDevToolsManagerDelegate::HandleCommand(
     content::DevToolsAgentHost* agent_host,
     content::DevToolsAgentHostClient* client,
-    const std::string& method,
+    std::unique_ptr<base::DictionaryValue> command,
     const std::string& message,
     NotHandledCallback callback) {
   DCHECK(sessions_.find(client) != sessions_.end());
-  sessions_[client]->HandleCommand(method, message, std::move(callback));
+  sessions_[client]->HandleCommand(std::move(command), message,
+                                   std::move(callback));
 }
 
 scoped_refptr<content::DevToolsAgentHost>
--- a/headless/lib/browser/headless_devtools_manager_delegate.h	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_devtools_manager_delegate.h	2019-05-17 18:53:33.104000000 +0300
@@ -31,7 +31,7 @@
   // DevToolsManagerDelegate implementation:
   void HandleCommand(content::DevToolsAgentHost* agent_host,
                      content::DevToolsAgentHostClient* client,
-                     const std::string& method,
+                     std::unique_ptr<base::DictionaryValue> command,
                      const std::string& message,
                      NotHandledCallback callback) override;
   scoped_refptr<content::DevToolsAgentHost> CreateNewTarget(
--- a/headless/lib/browser/headless_overlay_manifests.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_overlay_manifests.cc	2019-05-17 18:53:33.104000000 +0300
@@ -5,7 +5,7 @@
 #include "headless/lib/browser/headless_overlay_manifests.h"
 
 #include "base/no_destructor.h"
-#include "components/services/pdf_compositor/public/cpp/manifest.h"
+#include "components/services/pdf_compositor/pdf_compositor_manifest.h"
 #include "components/services/pdf_compositor/public/interfaces/pdf_compositor.mojom.h"
 #include "services/service_manager/public/cpp/manifest_builder.h"
 
@@ -24,7 +24,7 @@
 GetHeadlessContentPackagedServicesOverlayManifest() {
   static base::NoDestructor<service_manager::Manifest> manifest{
       service_manager::ManifestBuilder()
-          .PackageService(printing::GetPdfCompositorManifest())
+          .PackageService(pdf_compositor::GetManifest())
           .Build()};
 
   return *manifest;
--- a/headless/lib/browser/headless_request_context_manager.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_request_context_manager.cc	2019-05-17 18:53:33.108000000 +0300
@@ -4,7 +4,6 @@
 
 #include "headless/lib/browser/headless_request_context_manager.h"
 
-#include "base/bind.h"
 #include "base/task/post_task.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "build/build_config.h"
@@ -23,6 +22,8 @@
 #include "net/http/http_auth_handler_factory.h"
 #include "net/http/http_auth_scheme.h"
 #include "net/http/http_transaction_factory.h"
+#include "net/ssl/channel_id_service.h"
+#include "net/ssl/default_channel_id_store.h"
 #include "net/url_request/url_request_context.h"
 #include "net/url_request/url_request_context_builder.h"
 #include "net/url_request/url_request_context_getter.h"
@@ -402,6 +403,8 @@
     context_params->enable_encrypted_cookies = cookie_encryption_enabled_;
     context_params->cookie_path =
         user_data_path_.Append(FILE_PATH_LITERAL("Cookies"));
+    context_params->channel_id_path =
+        user_data_path_.Append(FILE_PATH_LITERAL("Origin Bound Certs"));
   }
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   if (command_line->HasSwitch(switches::kDiskCacheDir)) {
--- a/headless/lib/browser/headless_web_contents_impl.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/headless_web_contents_impl.cc	2019-05-17 18:53:33.108000000 +0300
@@ -30,6 +30,7 @@
 #include "content/public/browser/web_contents_delegate.h"
 #include "content/public/common/bindings_policy.h"
 #include "content/public/common/origin_util.h"
+#include "content/public/common/renderer_preferences.h"
 #include "headless/lib/browser/headless_browser_context_impl.h"
 #include "headless/lib/browser/headless_browser_impl.h"
 #include "headless/lib/browser/headless_browser_main_parts.h"
@@ -37,7 +38,6 @@
 #include "headless/lib/browser/protocol/headless_handler.h"
 #include "headless/public/internal/headless_devtools_client_impl.h"
 #include "printing/buildflags/buildflags.h"
-#include "third_party/blink/public/mojom/renderer_preferences.mojom.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/compositor/compositor.h"
 #include "ui/gfx/switches.h"
--- a/headless/lib/browser/protocol/browser_handler.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/protocol/browser_handler.cc	2019-05-17 18:53:33.108000000 +0300
@@ -4,7 +4,6 @@
 
 #include "headless/lib/browser/protocol/browser_handler.h"
 
-#include "base/bind.h"
 #include "base/task/post_task.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
--- a/headless/lib/browser/protocol/headless_devtools_session.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/protocol/headless_devtools_session.cc	2019-05-17 18:53:33.108000000 +0300
@@ -42,24 +42,28 @@
 }
 
 void HeadlessDevToolsSession::HandleCommand(
-    const std::string& method,
+    std::unique_ptr<base::DictionaryValue> command,
     const std::string& message,
     content::DevToolsManagerDelegate::NotHandledCallback callback) {
-  if (!browser_ || !dispatcher_->canDispatch(method)) {
-    std::move(callback).Run(message);
+  if (!browser_) {
+    std::move(callback).Run(std::move(command), message);
     return;
   }
   int call_id;
-  std::string unused;
-  std::unique_ptr<protocol::DictionaryValue> value =
-      protocol::DictionaryValue::cast(protocol::StringUtil::parseMessage(
-          message, client_->UsesBinaryProtocol()));
-  if (!dispatcher_->parseCommand(value.get(), &call_id, &unused))
+  std::string method;
+  std::unique_ptr<protocol::Value> protocolCommand =
+      protocol::toProtocolValue(command.get(), 1000);
+  if (!dispatcher_->parseCommand(protocolCommand.get(), &call_id, &method)) {
+    return;
+  }
+  if (dispatcher_->canDispatch(method)) {
+    pending_commands_[call_id] =
+        std::make_pair(std::move(callback), std::move(command));
+    dispatcher_->dispatch(call_id, method, std::move(protocolCommand), message);
     return;
-  pending_commands_[call_id] = std::move(callback);
-  dispatcher_->dispatch(call_id, method, std::move(value), message);
+  }
+  std::move(callback).Run(std::move(command), message);
 }
-
 void HeadlessDevToolsSession::AddHandler(
     std::unique_ptr<protocol::DomainHandler> handler) {
   handler->Wire(dispatcher_.get());
@@ -70,22 +74,20 @@
     int call_id,
     std::unique_ptr<Serializable> message) {
   pending_commands_.erase(call_id);
-  bool binary = client_->UsesBinaryProtocol();
-  client_->DispatchProtocolMessage(agent_host_, message->serialize(binary));
+  client_->DispatchProtocolMessage(agent_host_, message->serialize());
 }
 
 void HeadlessDevToolsSession::fallThrough(int call_id,
                                           const std::string& method,
                                           const std::string& message) {
-  auto callback = std::move(pending_commands_[call_id]);
+  PendingCommand command = std::move(pending_commands_[call_id]);
   pending_commands_.erase(call_id);
-  std::move(callback).Run(message);
+  std::move(command.first).Run(std::move(command.second), message);
 }
 
 void HeadlessDevToolsSession::sendProtocolNotification(
     std::unique_ptr<Serializable> message) {
-  bool binary = client_->UsesBinaryProtocol();
-  client_->DispatchProtocolMessage(agent_host_, message->serialize(binary));
+  client_->DispatchProtocolMessage(agent_host_, message->serialize());
 }
 
 void HeadlessDevToolsSession::flushProtocolNotifications() {}
--- a/headless/lib/browser/protocol/headless_devtools_session.h	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/protocol/headless_devtools_session.h	2019-05-17 18:53:33.108000000 +0300
@@ -35,7 +35,7 @@
   ~HeadlessDevToolsSession() override;
 
   void HandleCommand(
-      const std::string& method,
+      std::unique_ptr<base::DictionaryValue> command,
       const std::string& message,
       content::DevToolsManagerDelegate::NotHandledCallback callback);
 
@@ -58,8 +58,10 @@
   content::DevToolsAgentHostClient* const client_;
   std::unique_ptr<UberDispatcher> dispatcher_;
   base::flat_map<std::string, std::unique_ptr<DomainHandler>> handlers_;
-  base::flat_map<int, content::DevToolsManagerDelegate::NotHandledCallback>
-      pending_commands_;
+  using PendingCommand =
+      std::pair<content::DevToolsManagerDelegate::NotHandledCallback,
+                std::unique_ptr<base::DictionaryValue>>;
+  base::flat_map<int, PendingCommand> pending_commands_;
 
   DISALLOW_COPY_AND_ASSIGN(HeadlessDevToolsSession);
 };
--- a/headless/lib/browser/protocol/headless_handler.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/protocol/headless_handler.cc	2019-05-17 18:53:33.108000000 +0300
@@ -5,7 +5,6 @@
 #include "headless/lib/browser/protocol/headless_handler.h"
 
 #include "base/base_switches.h"
-#include "base/bind.h"
 #include "base/command_line.h"
 #include "base/lazy_instance.h"
 #include "cc/base/switches.h"
--- a/headless/lib/browser/protocol/page_handler.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/browser/protocol/page_handler.cc	2019-05-17 18:53:33.108000000 +0300
@@ -4,7 +4,6 @@
 
 #include "headless/lib/browser/protocol/page_handler.h"
 
-#include "base/bind.h"
 #include "content/public/browser/web_contents.h"
 #include "printing/units.h"
 
--- a/headless/lib/dom_tree_extraction_expected_nodes.txt	2019-05-17 17:45:41.028000000 +0300
+++ b/headless/lib/dom_tree_extraction_expected_nodes.txt	2019-05-17 18:53:33.112000000 +0300
@@ -425,7 +425,7 @@
 {
    "attributes": [ {
       "name": "href",
-      "value": "https://www.9oo91e.qjz9zk"
+      "value": "https://www.google.com"
    } ],
    "backendNodeId": "?",
    "boundingBox": {
--- a/headless/lib/headless_browser_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/headless_browser_browsertest.cc	2019-05-17 18:53:33.112000000 +0300
@@ -4,7 +4,6 @@
 
 #include <memory>
 
-#include "base/bind.h"
 #include "base/command_line.h"
 #include "base/files/file_enumerator.h"
 #include "base/files/file_util.h"
--- a/headless/lib/headless_browser_context_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/headless_browser_context_browsertest.cc	2019-05-17 18:53:33.112000000 +0300
@@ -4,7 +4,6 @@
 
 #include <memory>
 
-#include "base/bind.h"
 #include "base/files/scoped_temp_dir.h"
 #include "base/strings/stringprintf.h"
 #include "base/threading/thread_restrictions.h"
@@ -147,8 +146,7 @@
   std::unique_ptr<LoadObserver> load_observer_;
 };
 
-// TODO(https://crbug.com/930356): Re-enable test.
-DISABLED_HEADLESS_ASYNC_DEVTOOLED_TEST_F(HeadlessBrowserContextIsolationTest);
+HEADLESS_ASYNC_DEVTOOLED_TEST_F(HeadlessBrowserContextIsolationTest);
 
 IN_PROC_BROWSER_TEST_F(HeadlessBrowserTest, UserDataDir) {
   // We do not want to bother with posting tasks to create a temp dir.
--- a/headless/lib/headless_content_main_delegate.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/headless_content_main_delegate.cc	2019-05-17 18:53:33.112000000 +0300
@@ -21,6 +21,7 @@
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 #include "cc/base/switches.h"
+#include "components/crash/content/app/breakpad_linux.h"
 #include "components/crash/core/common/crash_key.h"
 #include "components/viz/common/switches.h"
 #include "content/public/browser/browser_main_runner.h"
@@ -47,10 +48,6 @@
 #include "components/crash/content/app/crashpad.h"
 #endif
 
-#if defined(OS_LINUX)
-#include "components/crash/content/app/breakpad_linux.h"
-#endif
-
 #if !defined(CHROME_MULTIPLE_DLL_BROWSER)
 #include "headless/lib/renderer/headless_content_renderer_client.h"
 #endif
@@ -124,16 +121,7 @@
   command_line->AppendSwitchASCII(::switches::kOzonePlatform, "headless");
 #endif
 
-  if (command_line->HasSwitch(::switches::kUseGL)) {
-    std::string use_gl = command_line->GetSwitchValueASCII(switches::kUseGL);
-    if (use_gl != gl::kGLImplementationEGLName) {
-      // Headless uses a software output device which will cause us to fall back
-      // to software compositing anyway, but only after attempting and failing
-      // to initialize GPU compositing. We disable GPU compositing here
-      // explicitly to preempt this attempt.
-      command_line->AppendSwitch(::switches::kDisableGpuCompositing);
-    }
-  } else {
+  if (!command_line->HasSwitch(::switches::kUseGL)) {
     if (!browser_->options()->gl_implementation.empty()) {
       command_line->AppendSwitchASCII(::switches::kUseGL,
                                       browser_->options()->gl_implementation);
@@ -142,6 +130,12 @@
     }
   }
 
+  // Headless uses a software output device which will cause us to fall back to
+  // software compositing anyway, but only after attempting and failing to
+  // initialize GPU compositing. We disable GPU compositing here explicitly to
+  // preempt this attempt.
+  command_line->AppendSwitch(::switches::kDisableGpuCompositing);
+
   content::Profiling::ProcessStarted();
 
   SetContentClient(&content_client_);
--- a/headless/lib/headless_devtools_client_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/headless_devtools_client_browsertest.cc	2019-05-17 18:53:33.112000000 +0300
@@ -5,7 +5,6 @@
 #include <memory>
 
 #include "base/base_paths.h"
-#include "base/bind.h"
 #include "base/files/file_util.h"
 #include "base/json/json_reader.h"
 #include "base/json/json_writer.h"
@@ -179,7 +178,7 @@
  public:
   explicit HeadlessDevToolsClientChangeWindowStateTest(
       browser::WindowState state)
-      : state_(state) {}
+      : state_(state){};
 
   void RunDevTooledTest() override {
     SetWindowState(
@@ -214,7 +213,7 @@
  public:
   HeadlessDevToolsClientMinimizeWindowTest()
       : HeadlessDevToolsClientChangeWindowStateTest(
-            browser::WindowState::MINIMIZED) {}
+            browser::WindowState::MINIMIZED){};
 };
 
 HEADLESS_ASYNC_DEVTOOLED_TEST_F(HeadlessDevToolsClientMinimizeWindowTest);
@@ -224,7 +223,7 @@
  public:
   HeadlessDevToolsClientMaximizeWindowTest()
       : HeadlessDevToolsClientChangeWindowStateTest(
-            browser::WindowState::MAXIMIZED) {}
+            browser::WindowState::MAXIMIZED){};
 };
 
 HEADLESS_ASYNC_DEVTOOLED_TEST_F(HeadlessDevToolsClientMaximizeWindowTest);
@@ -234,7 +233,7 @@
  public:
   HeadlessDevToolsClientFullscreenWindowTest()
       : HeadlessDevToolsClientChangeWindowStateTest(
-            browser::WindowState::FULLSCREEN) {}
+            browser::WindowState::FULLSCREEN){};
 };
 
 HEADLESS_ASYNC_DEVTOOLED_TEST_F(HeadlessDevToolsClientFullscreenWindowTest);
--- a/headless/lib/headless_web_contents_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/headless_web_contents_browsertest.cc	2019-05-17 18:53:33.112000000 +0300
@@ -6,7 +6,6 @@
 #include <string>
 #include <vector>
 
-#include "base/bind.h"
 #include "base/command_line.h"
 #include "base/json/json_writer.h"
 #include "base/logging.h"
@@ -223,7 +222,7 @@
 HEADLESS_ASYNC_DEVTOOLED_TEST_P(HeadlessWebContentsScreenshotTest);
 
 // Instantiate test case for both software and gpu compositing modes.
-INSTANTIATE_TEST_SUITE_P(HeadlessWebContentsScreenshotTests,
+INSTANTIATE_TEST_CASE_P(HeadlessWebContentsScreenshotTests,
                          HeadlessWebContentsScreenshotTest,
                          ::testing::Bool());
 
@@ -259,7 +258,7 @@
     HeadlessWebContentsScreenshotWindowPositionTest);
 
 // Instantiate test case for both software and gpu compositing modes.
-INSTANTIATE_TEST_SUITE_P(HeadlessWebContentsScreenshotWindowPositionTests,
+INSTANTIATE_TEST_CASE_P(HeadlessWebContentsScreenshotWindowPositionTests,
                          HeadlessWebContentsScreenshotWindowPositionTest,
                          ::testing::Bool());
 
--- a/headless/lib/resources/devtools_discovery_page.html	2019-05-17 17:45:41.028000000 +0300
+++ b/headless/lib/resources/devtools_discovery_page.html	2019-05-17 18:53:33.112000000 +0300
@@ -24,7 +24,7 @@
   if (item.devtoolsFrontendUrl) {
     link = document.createElement("a");
     var devtoolsFrontendUrl = item.devtoolsFrontendUrl.replace(/^\/devtools\//,'');
-    link.href = `https://chrome-devtools-frontend.8pp2p8t.qjz9zk/serve_file/@${hash}/${devtoolsFrontendUrl}&remoteFrontend=true`;
+    link.href = `https://chrome-devtools-frontend.appspot.com/serve_file/@${hash}/${devtoolsFrontendUrl}&remoteFrontend=true`;
     link.title = item.title;
   } else {
     link = document.createElement("div");
--- a/headless/lib/utility/headless_content_utility_client.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/lib/utility/headless_content_utility_client.cc	2019-05-17 18:53:33.112000000 +0300
@@ -4,7 +4,6 @@
 
 #include "headless/lib/utility/headless_content_utility_client.h"
 
-#include "base/bind.h"
 #include "base/lazy_instance.h"
 #include "content/public/utility/utility_thread.h"
 #include "printing/buildflags/buildflags.h"
--- a/headless/protocol_config.json	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/protocol_config.json	2019-05-17 18:53:33.112000000 +0300
@@ -36,7 +36,7 @@
     "lib": {
         "package": "headless/lib/browser/protocol",
         "output": "lib/browser/protocol",
-        "string_header": "headless/lib/browser/protocol/base_string_adapter.h",
+        "string_header": "headless/lib/browser/protocol/protocol_string.h",
         "export_macro": "HEADLESS_EXPORT",
         "export_header": "headless/public/headless_export.h"
     }
--- a/headless/public/domains/types_unittest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/public/domains/types_unittest.cc	2019-05-17 18:53:33.112000000 +0300
@@ -26,7 +26,7 @@
 
 TEST(TypesTest, IntegerPropertyParseError) {
   const char json[] = "{\"entryId\": \"foo\"}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -52,7 +52,7 @@
 
 TEST(TypesTest, BooleanPropertyParseError) {
   const char json[] = "{\"suppressed\": \"foo\"}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -76,7 +76,7 @@
 
 TEST(TypesTest, DoublePropertyParseError) {
   const char json[] = "{\"latitude\": \"foo\"}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -99,7 +99,7 @@
 
 TEST(TypesTest, StringPropertyParseError) {
   const char json[] = "{\"url\": false}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -124,7 +124,7 @@
 
 TEST(TypesTest, EnumPropertyParseError) {
   const char json[] = "{\"type\": false}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -162,7 +162,7 @@
 
 TEST(TypesTest, ArrayPropertyParseError) {
   const char json[] = "{\"nodeIds\": true}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
@@ -191,7 +191,7 @@
 
 TEST(TypesTest, ObjectPropertyParseError) {
   const char json[] = "{\"result\": 42}";
-  std::unique_ptr<base::Value> object = base::JSONReader::ReadDeprecated(json);
+  std::unique_ptr<base::Value> object = base::JSONReader::Read(json);
   ASSERT_TRUE(object);
 
 #if DCHECK_IS_ON()
--- a/headless/public/headless_browser.h	2019-05-17 17:45:41.028000000 +0300
+++ b/headless/public/headless_browser.h	2019-05-17 18:53:33.112000000 +0300
@@ -292,7 +292,7 @@
 // }
 //
 // [1]
-// https://chromium.9oo91esource.qjz9zk/chromium/b+/master/docs/linux_zygote.md
+// https://chromium.googlesource.com/chromium/b+/master/docs/linux_zygote.md
 HEADLESS_EXPORT void RunChildProcessIfNeeded(int argc, const char** argv);
 #else
 // In Windows, the headless browser may need to create child processes. This is
--- a/headless/public/internal/value_conversions.h	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/public/internal/value_conversions.h	2019-05-17 18:53:33.116000000 +0300
@@ -7,7 +7,7 @@
 
 #include <memory>
 
-#include "headless/lib/browser/protocol/base_string_adapter.h"
+#include "headless/lib/browser/protocol/protocol_string.h"
 #include "headless/public/util/error_reporter.h"
 
 namespace headless {
--- a/headless/test/headless_browser_test.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/test/headless_browser_test.cc	2019-05-17 18:53:33.144000000 +0300
@@ -6,7 +6,6 @@
 
 #include <memory>
 
-#include "base/bind.h"
 #include "base/command_line.h"
 #include "base/files/file_path.h"
 #include "base/macros.h"
--- a/headless/test/headless_client_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/test/headless_client_browsertest.cc	2019-05-17 18:53:33.144000000 +0300
@@ -4,7 +4,6 @@
 
 #include <memory>
 
-#include "base/bind.h"
 #include "build/build_config.h"
 #include "content/public/test/browser_test.h"
 #include "headless/public/devtools/domains/runtime.h"
--- a/headless/test/headless_js_bindings_browsertest.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/test/headless_js_bindings_browsertest.cc	2019-05-17 18:53:33.144000000 +0300
@@ -7,7 +7,6 @@
 #include <vector>
 
 #include "base/base64.h"
-#include "base/bind.h"
 #include "base/json/json_reader.h"
 #include "base/memory/weak_ptr.h"
 #include "base/path_service.h"
@@ -145,7 +144,7 @@
 
   void OnMessageFromJS(const std::string& json_message) {
     std::unique_ptr<base::Value> message =
-        base::JSONReader::ReadDeprecated(json_message, base::JSON_PARSE_RFC);
+        base::JSONReader::Read(json_message, base::JSON_PARSE_RFC);
     const base::Value* method_value = message->FindKey("method");
     if (!method_value) {
       FinishAsynchronousTest();
--- a/headless/test/headless_protocol_browsertest.cc	2019-05-17 17:45:41.028000000 +0300
+++ b/headless/test/headless_protocol_browsertest.cc	2019-05-17 18:53:33.144000000 +0300
@@ -66,19 +66,18 @@
 
  private:
   // HeadlessWebContentsObserver implementation.
-  void RunDevTooledTest() override {
-    browser_devtools_client_->SetRawProtocolListener(this);
+  void DevToolsTargetReady() override {
+    HeadlessAsyncDevTooledBrowserTest::DevToolsTargetReady();
     devtools_client_->GetRuntime()->GetExperimental()->AddObserver(this);
     devtools_client_->GetRuntime()->Enable();
     devtools_client_->GetRuntime()->GetExperimental()->AddBinding(
         headless::runtime::AddBindingParams::Builder()
             .SetName("sendProtocolMessage")
-            .Build(),
-        base::BindOnce(&HeadlessProtocolBrowserTest::BindingCreated,
-                       base::Unretained(this)));
+            .Build());
+    browser_devtools_client_->SetRawProtocolListener(this);
   }
 
-  void BindingCreated(std::unique_ptr<headless::runtime::AddBindingResult>) {
+  void RunDevTooledTest() override {
     base::ScopedAllowBlockingForTesting allow_blocking;
     base::FilePath src_dir;
     CHECK(base::PathService::Get(base::DIR_SOURCE_ROOT, &src_dir));
@@ -105,8 +104,7 @@
   // runtime::Observer implementation.
   void OnBindingCalled(const runtime::BindingCalledParams& params) override {
     std::string json_message = params.GetPayload();
-    std::unique_ptr<base::Value> message =
-        base::JSONReader::ReadDeprecated(json_message);
+    std::unique_ptr<base::Value> message = base::JSONReader::Read(json_message);
     const base::DictionaryValue* message_dict;
     const base::DictionaryValue* params_dict;
     std::string method;
@@ -207,46 +205,36 @@
   }
 
 // Headless-specific tests
-HEADLESS_PROTOCOL_TEST(VirtualTimeBasics, "emulation/virtual-time-basics.js")
+HEADLESS_PROTOCOL_TEST(VirtualTimeAdvance, "emulation/virtual-time-advance.js");
+HEADLESS_PROTOCOL_TEST(VirtualTimeBasics, "emulation/virtual-time-basics.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeInterrupt,
-                       "emulation/virtual-time-interrupt.js")
-
-// Flaky on Linux. TODO(crbug.com/930717): Re-enable.
-#if defined(OS_LINUX)
-#define MAYBE_VirtualTimeCrossProcessNavigation \
-  DISABLED_VirtualTimeCrossProcessNavigation
-#else
-#define MAYBE_VirtualTimeCrossProcessNavigation \
-  VirtualTimeCrossProcessNavigation
-#endif
-HEADLESS_PROTOCOL_TEST(MAYBE_VirtualTimeCrossProcessNavigation,
-                       "emulation/virtual-time-cross-process-navigation.js")
+                       "emulation/virtual-time-interrupt.js");
+HEADLESS_PROTOCOL_TEST(VirtualTimeCrossProcessNavigation,
+                       "emulation/virtual-time-cross-process-navigation.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeDetachFrame,
-                       "emulation/virtual-time-detach-frame.js")
-HEADLESS_PROTOCOL_TEST(VirtualTimeNoBlock404, "emulation/virtual-time-404.js")
+                       "emulation/virtual-time-detach-frame.js");
+HEADLESS_PROTOCOL_TEST(VirtualTimeNoBlock404, "emulation/virtual-time-404.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeLocalStorage,
-                       "emulation/virtual-time-local-storage.js")
+                       "emulation/virtual-time-local-storage.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimePendingScript,
-                       "emulation/virtual-time-pending-script.js")
+                       "emulation/virtual-time-pending-script.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeHtmlImport,
-                       "emulation/virtual-time-html-import.js")
+                       "emulation/virtual-time-html-import.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeRedirect,
-                       "emulation/virtual-time-redirect.js")
+                       "emulation/virtual-time-redirect.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeSessionStorage,
-                       "emulation/virtual-time-session-storage.js")
+                       "emulation/virtual-time-session-storage.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeStarvation,
-                       "emulation/virtual-time-starvation.js")
-HEADLESS_PROTOCOL_TEST(VirtualTimeVideo, "emulation/virtual-time-video.js")
+                       "emulation/virtual-time-starvation.js");
+HEADLESS_PROTOCOL_TEST(VirtualTimeVideo, "emulation/virtual-time-video.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeErrorLoop,
-                       "emulation/virtual-time-error-loop.js")
+                       "emulation/virtual-time-error-loop.js");
 HEADLESS_PROTOCOL_TEST(VirtualTimeFetchStream,
-                       "emulation/virtual-time-fetch-stream.js")
-HEADLESS_PROTOCOL_TEST(VirtualTimeDialogWhileLoading,
-                       "emulation/virtual-time-dialog-while-loading.js")
+                       "emulation/virtual-time-fetch-stream.js");
 
 // Flaky Test crbug.com/859382
 HEADLESS_PROTOCOL_TEST(DISABLED_VirtualTimeHistoryNavigation,
-                       "emulation/virtual-time-history-navigation.js")
+                       "emulation/virtual-time-history-navigation.js");
 
 // http://crbug.com/633321
 #if defined(OS_ANDROID)
@@ -257,9 +245,9 @@
 #define MAYBE_VirtualTimeTimerSuspend VirtualTimeTimerSuspend
 #endif
 HEADLESS_PROTOCOL_TEST(MAYBE_VirtualTimeTimerOrder,
-                       "emulation/virtual-time-timer-order.js")
+                       "emulation/virtual-time-timer-order.js");
 HEADLESS_PROTOCOL_TEST(MAYBE_VirtualTimeTimerSuspend,
-                       "emulation/virtual-time-timer-suspended.js")
+                       "emulation/virtual-time-timer-suspended.js");
 #undef MAYBE_VirtualTimeTimerOrder
 #undef MAYBE_VirtualTimeTimerSuspend
 
@@ -307,7 +295,7 @@
   base::test::ScopedFeatureList scoped_feature_list_;
 };
 
-// BeginFrameControl is not supported on MacOS yet, see: https://cs.ch40m1um.qjz9zk
+// BeginFrameControl is not supported on MacOS yet, see: https://cs.chromium.org
 // chromium/bheadless/lib/browser/protocol/target_handler.cc?
 // rcl=5811aa08e60ba5ac7622f029163213cfbdb682f7&l=32
 #if defined(OS_MACOSX)
@@ -328,92 +316,93 @@
 #endif
 
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(CompositorBasicRaf,
-                                  "emulation/compositor-basic-raf.js")
+                                  "emulation/compositor-basic-raf.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     CompositorImageAnimation,
-    "emulation/compositor-image-animation-test.js")
+    "emulation/compositor-image-animation-test.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(CompositorCssAnimation,
-                                  "emulation/compositor-css-animation-test.js")
+                                  "emulation/compositor-css-animation-test.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(VirtualTimeControllerTest,
-                                  "helpers/virtual-time-controller-test.js")
+                                  "helpers/virtual-time-controller-test.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererHelloWorld,
-                                  "sanity/renderer-hello-world.js")
+                                  "sanity/renderer-hello-world.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererOverrideTitleJsEnabled,
-    "sanity/renderer-override-title-js-enabled.js")
+    "sanity/renderer-override-title-js-enabled.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererOverrideTitleJsDisabled,
-    "sanity/renderer-override-title-js-disabled.js")
+    "sanity/renderer-override-title-js-disabled.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererJavaScriptConsoleErrors,
-    "sanity/renderer-javascript-console-errors.js")
+    "sanity/renderer-javascript-console-errors.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererDelayedCompletion,
-                                  "sanity/renderer-delayed-completion.js")
+                                  "sanity/renderer-delayed-completion.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererClientRedirectChain,
-                                  "sanity/renderer-client-redirect-chain.js")
+                                  "sanity/renderer-client-redirect-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererClientRedirectChainNoJs,
-    "sanity/renderer-client-redirect-chain-no-js.js")
+    "sanity/renderer-client-redirect-chain-no-js.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererServerRedirectChain,
-                                  "sanity/renderer-server-redirect-chain.js")
+                                  "sanity/renderer-server-redirect-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererServerRedirectToFailure,
-    "sanity/renderer-server-redirect-to-failure.js")
+    "sanity/renderer-server-redirect-to-failure.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererServerRedirectRelativeChain,
-    "sanity/renderer-server-redirect-relative-chain.js")
+    "sanity/renderer-server-redirect-relative-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererMixedRedirectChain,
-                                  "sanity/renderer-mixed-redirect-chain.js")
+                                  "sanity/renderer-mixed-redirect-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererFramesRedirectChain,
-                                  "sanity/renderer-frames-redirect-chain.js")
+                                  "sanity/renderer-frames-redirect-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererDoubleRedirect,
-                                  "sanity/renderer-double-redirect.js")
+                                  "sanity/renderer-double-redirect.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererRedirectAfterCompletion,
-    "sanity/renderer-redirect-after-completion.js")
-HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirect307PostMethod,
-                                  "sanity/renderer-redirect-307-post-method.js")
+    "sanity/renderer-redirect-after-completion.js");
+HEADLESS_PROTOCOL_COMPOSITOR_TEST(
+    RendererRedirect307PostMethod,
+    "sanity/renderer-redirect-307-post-method.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectPostChain,
-                                  "sanity/renderer-redirect-post-chain.js")
+                                  "sanity/renderer-redirect-post-chain.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirect307PutMethod,
-                                  "sanity/renderer-redirect-307-put-method.js")
+                                  "sanity/renderer-redirect-307-put-method.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirect303PutGet,
-                                  "sanity/renderer-redirect-303-put-get.js")
+                                  "sanity/renderer-redirect-303-put-get.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectBaseUrl,
-                                  "sanity/renderer-redirect-base-url.js")
+                                  "sanity/renderer-redirect-base-url.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectNonAsciiUrl,
-                                  "sanity/renderer-redirect-non-ascii-url.js")
+                                  "sanity/renderer-redirect-non-ascii-url.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectEmptyUrl,
-                                  "sanity/renderer-redirect-empty-url.js")
+                                  "sanity/renderer-redirect-empty-url.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectInvalidUrl,
-                                  "sanity/renderer-redirect-invalid-url.js")
+                                  "sanity/renderer-redirect-invalid-url.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectKeepsFragment,
-                                  "sanity/renderer-redirect-keeps-fragment.js")
+                                  "sanity/renderer-redirect-keeps-fragment.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererRedirectReplacesFragment,
-    "sanity/renderer-redirect-replaces-fragment.js")
+    "sanity/renderer-redirect-replaces-fragment.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererRedirectNewFragment,
-                                  "sanity/renderer-redirect-new-fragment.js")
+                                  "sanity/renderer-redirect-new-fragment.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererWindowLocationFragments,
-    "sanity/renderer-window-location-fragments.js")
+    "sanity/renderer-window-location-fragments.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererCookieSetFromJs,
-                                  "sanity/renderer-cookie-set-from-js.js")
+                                  "sanity/renderer-cookie-set-from-js.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(
     RendererCookieSetFromJsNoCookies,
-    "sanity/renderer-cookie-set-from-js-no-cookies.js")
+    "sanity/renderer-cookie-set-from-js-no-cookies.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererCookieUpdatedFromJs,
-                                  "sanity/renderer-cookie-updated-from-js.js")
+                                  "sanity/renderer-cookie-updated-from-js.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererInCrossOriginObject,
-                                  "sanity/renderer-in-cross-origin-object.js")
+                                  "sanity/renderer-in-cross-origin-object.js");
 
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererContentSecurityPolicy,
-                                  "sanity/renderer-content-security-policy.js")
+                                  "sanity/renderer-content-security-policy.js");
 
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererFrameLoadEvents,
-                                  "sanity/renderer-frame-load-events.js")
+                                  "sanity/renderer-frame-load-events.js");
 HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererCssUrlFilter,
-                                  "sanity/renderer-css-url-filter.js")
-HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererCanvas, "sanity/renderer-canvas.js")
+                                  "sanity/renderer-css-url-filter.js");
+HEADLESS_PROTOCOL_COMPOSITOR_TEST(RendererCanvas, "sanity/renderer-canvas.js");
 
 }  // namespace headless
--- a/headless/test/test_network_interceptor.cc	2019-05-01 01:22:49.000000000 +0300
+++ b/headless/test/test_network_interceptor.cc	2019-05-17 18:53:33.144000000 +0300
@@ -34,7 +34,7 @@
     binding_.set_connection_error_handler(
         base::BindOnce([](RedirectLoader* self) { delete self; }, this));
     NotifyRedirect(std::move(url));
-  }
+  };
 
   void FollowRedirect(const std::vector<std::string>& removed_headers,
                       const net::HttpRequestHeaders& modified_headers,
--- a/headless/lib/browser/protocol/protocol_string.cc	1970-01-01 03:00:00.000000000 +0300
+++ b/headless/lib/browser/protocol/protocol_string.cc	2019-05-17 18:53:33.108000000 +0300
@@ -0,0 +1,202 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "headless/lib/browser/protocol/protocol_string.h"
+
+#include <utility>
+#include "base/base64.h"
+#include "base/json/json_reader.h"
+#include "base/memory/ptr_util.h"
+#include "base/strings/string16.h"
+#include "base/strings/utf_string_conversions.h"
+#include "base/values.h"
+#include "headless/lib/browser/protocol/protocol.h"
+
+namespace headless {
+namespace protocol {
+
+std::unique_ptr<Value> toProtocolValue(const base::Value* value, int depth) {
+  if (!value || !depth)
+    return nullptr;
+  if (value->is_none())
+    return Value::null();
+  if (value->is_bool()) {
+    bool inner;
+    value->GetAsBoolean(&inner);
+    return FundamentalValue::create(inner);
+  }
+  if (value->is_int()) {
+    int inner;
+    value->GetAsInteger(&inner);
+    return FundamentalValue::create(inner);
+  }
+  if (value->is_double()) {
+    double inner;
+    value->GetAsDouble(&inner);
+    return FundamentalValue::create(inner);
+  }
+  if (value->is_string()) {
+    std::string inner;
+    value->GetAsString(&inner);
+    return StringValue::create(inner);
+  }
+  if (value->is_list()) {
+    const base::ListValue* list = nullptr;
+    value->GetAsList(&list);
+    std::unique_ptr<ListValue> result = ListValue::create();
+    for (size_t i = 0; i < list->GetSize(); i++) {
+      const base::Value* item = nullptr;
+      list->Get(i, &item);
+      std::unique_ptr<Value> converted = toProtocolValue(item, depth - 1);
+      if (converted)
+        result->pushValue(std::move(converted));
+    }
+    return std::move(result);
+  }
+  if (value->is_dict()) {
+    const base::DictionaryValue* dictionary = nullptr;
+    value->GetAsDictionary(&dictionary);
+    std::unique_ptr<DictionaryValue> result = DictionaryValue::create();
+    for (base::DictionaryValue::Iterator it(*dictionary); !it.IsAtEnd();
+         it.Advance()) {
+      std::unique_ptr<Value> converted =
+          toProtocolValue(&it.value(), depth - 1);
+      if (converted)
+        result->setValue(it.key(), std::move(converted));
+    }
+    return std::move(result);
+  }
+  return nullptr;
+}
+
+std::unique_ptr<base::Value> toBaseValue(Value* value, int depth) {
+  if (!value || !depth)
+    return nullptr;
+  if (value->type() == Value::TypeNull)
+    return std::make_unique<base::Value>();
+  if (value->type() == Value::TypeBoolean) {
+    bool inner;
+    value->asBoolean(&inner);
+    return base::WrapUnique(new base::Value(inner));
+  }
+  if (value->type() == Value::TypeInteger) {
+    int inner;
+    value->asInteger(&inner);
+    return base::WrapUnique(new base::Value(inner));
+  }
+  if (value->type() == Value::TypeDouble) {
+    double inner;
+    value->asDouble(&inner);
+    return base::WrapUnique(new base::Value(inner));
+  }
+  if (value->type() == Value::TypeString) {
+    std::string inner;
+    value->asString(&inner);
+    return base::WrapUnique(new base::Value(inner));
+  }
+  if (value->type() == Value::TypeArray) {
+    ListValue* list = ListValue::cast(value);
+    std::unique_ptr<base::ListValue> result(new base::ListValue());
+    for (size_t i = 0; i < list->size(); i++) {
+      std::unique_ptr<base::Value> converted =
+          toBaseValue(list->at(i), depth - 1);
+      if (converted)
+        result->Append(std::move(converted));
+    }
+    return std::move(result);
+  }
+  if (value->type() == Value::TypeObject) {
+    DictionaryValue* dict = DictionaryValue::cast(value);
+    std::unique_ptr<base::DictionaryValue> result(new base::DictionaryValue());
+    for (size_t i = 0; i < dict->size(); i++) {
+      DictionaryValue::Entry entry = dict->at(i);
+      std::unique_ptr<base::Value> converted =
+          toBaseValue(entry.second, depth - 1);
+      if (converted)
+        result->SetWithoutPathExpansion(entry.first, std::move(converted));
+    }
+    return std::move(result);
+  }
+  return nullptr;
+}
+
+// static
+std::unique_ptr<Value> StringUtil::parseJSON(const std::string& json) {
+  std::unique_ptr<base::Value> value = base::JSONReader::Read(json);
+  return toProtocolValue(value.get(), 1000);
+}
+
+StringBuilder::StringBuilder() {}
+
+StringBuilder::~StringBuilder() {}
+
+void StringBuilder::append(const std::string& s) {
+  string_ += s;
+}
+
+void StringBuilder::append(char c) {
+  string_ += c;
+}
+
+void StringBuilder::append(const char* characters, size_t length) {
+  string_.append(characters, length);
+}
+
+// static
+void StringUtil::builderAppendQuotedString(StringBuilder& builder,
+                                           const String& str) {
+  builder.append('"');
+  base::string16 str16 = base::UTF8ToUTF16(str);
+  escapeWideStringForJSON(reinterpret_cast<const uint16_t*>(&str16[0]),
+                          str16.length(), &builder);
+  builder.append('"');
+}
+
+std::string StringBuilder::toString() {
+  return string_;
+}
+
+void StringBuilder::reserveCapacity(size_t capacity) {
+  string_.reserve(capacity);
+}
+
+Binary::Binary() : bytes_(new base::RefCountedBytes) {}
+Binary::Binary(const Binary& binary) : bytes_(binary.bytes_) {}
+Binary::Binary(scoped_refptr<base::RefCountedMemory> bytes) : bytes_(bytes) {}
+Binary::~Binary() {}
+
+String Binary::toBase64() const {
+  std::string encoded;
+  base::Base64Encode(
+      base::StringPiece(reinterpret_cast<const char*>(data()), size()),
+      &encoded);
+  return encoded;
+}
+
+// static
+Binary Binary::fromBase64(const String& base64, bool* success) {
+  std::string decoded;
+  *success = base::Base64Decode(base::StringPiece(base64), &decoded);
+  if (*success) {
+    return Binary::fromString(std::move(decoded));
+  }
+  return Binary();
+}
+
+// static
+Binary Binary::fromRefCounted(scoped_refptr<base::RefCountedMemory> memory) {
+  return Binary(memory);
+}
+
+// static
+Binary Binary::fromVector(std::vector<uint8_t> data) {
+  return Binary(base::RefCountedBytes::TakeVector(&data));
+}
+
+// static
+Binary Binary::fromString(std::string data) {
+  return Binary(base::RefCountedString::TakeString(&data));
+}
+}  // namespace protocol
+}  // namespace headless
--- a/headless/lib/browser/protocol/protocol_string.h	1970-01-01 03:00:00.000000000 +0300
+++ b/headless/lib/browser/protocol/protocol_string.h	2019-05-17 18:53:33.108000000 +0300
@@ -0,0 +1,115 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef HEADLESS_LIB_BROWSER_PROTOCOL_PROTOCOL_STRING_H_
+#define HEADLESS_LIB_BROWSER_PROTOCOL_PROTOCOL_STRING_H_
+
+#include <memory>
+#include <string>
+#include <vector>
+
+#include "base/logging.h"
+#include "base/macros.h"
+#include "base/memory/ref_counted_memory.h"
+#include "base/strings/string_number_conversions.h"
+#include "headless/public/headless_export.h"
+
+namespace base {
+class Value;
+}
+
+namespace headless {
+namespace protocol {
+
+class Value;
+
+using String = std::string;
+
+class HEADLESS_EXPORT StringBuilder {
+ public:
+  StringBuilder();
+  ~StringBuilder();
+  void append(const String&);
+  void append(char);
+  void append(const char*, size_t);
+  String toString();
+  void reserveCapacity(size_t);
+
+ private:
+  std::string string_;
+};
+
+class HEADLESS_EXPORT StringUtil {
+ public:
+  static String substring(const String& s, unsigned pos, unsigned len) {
+    return s.substr(pos, len);
+  }
+  static String fromInteger(int number) { return base::IntToString(number); }
+  static String fromDouble(double number) {
+    String s = base::NumberToString(number);
+    if (!s.empty() && s[0] == '.')
+      s = "0" + s;
+    return s;
+  }
+  static double toDouble(const char* s, size_t len, bool* ok) {
+    double v = 0.0;
+    *ok = base::StringToDouble(std::string(s, len), &v);
+    return *ok ? v : 0.0;
+  }
+  static size_t find(const String& s, const char* needle) {
+    return s.find(needle);
+  }
+  static size_t find(const String& s, const String& needle) {
+    return s.find(needle);
+  }
+  static const size_t kNotFound = static_cast<size_t>(-1);
+  static void builderAppend(StringBuilder& builder, const String& s) {
+    builder.append(s);
+  }
+  static void builderAppend(StringBuilder& builder, char c) {
+    builder.append(c);
+  }
+  static void builderAppend(StringBuilder& builder, const char* s, size_t len) {
+    builder.append(s, len);
+  }
+  static void builderAppendQuotedString(StringBuilder& builder,
+                                        const String& str);
+  static void builderReserve(StringBuilder& builder, unsigned capacity) {
+    builder.reserveCapacity(capacity);
+  }
+  static String builderToString(StringBuilder& builder) {
+    return builder.toString();
+  }
+
+  static std::unique_ptr<Value> parseJSON(const String&);
+};
+
+// A read-only sequence of uninterpreted bytes with reference-counted storage.
+class HEADLESS_EXPORT Binary {
+ public:
+  Binary(const Binary&);
+  Binary();
+  ~Binary();
+
+  const uint8_t* data() const { return bytes_->front(); }
+  size_t size() const { return bytes_->size(); }
+
+  String toBase64() const;
+  static Binary fromBase64(const String& base64, bool* success);
+  static Binary fromRefCounted(scoped_refptr<base::RefCountedMemory> memory);
+  static Binary fromVector(std::vector<uint8_t> data);
+  static Binary fromString(std::string data);
+
+ private:
+  explicit Binary(scoped_refptr<base::RefCountedMemory> bytes);
+  scoped_refptr<base::RefCountedMemory> bytes_;
+};
+
+std::unique_ptr<Value> toProtocolValue(const base::Value* value, int depth);
+std::unique_ptr<base::Value> toBaseValue(Value* value, int depth);
+
+}  // namespace protocol
+}  // namespace headless
+
+#endif  // HEADLESS_LIB_BROWSER_PROTOCOL_PROTOCOL_STRING_H_
--- a/headless/lib/browser/protocol/protocol_unittest.cc	1970-01-01 03:00:00.000000000 +0300
+++ b/headless/lib/browser/protocol/protocol_unittest.cc	2019-05-17 18:53:33.108000000 +0300
@@ -0,0 +1,59 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "headless/lib/browser/protocol/protocol_string.h"
+
+#include <vector>
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace headless {
+namespace protocol {
+namespace {
+TEST(ProtocolBinaryTest, base64EmptyArgs) {
+  EXPECT_EQ(protocol::String(), Binary().toBase64());
+
+  bool success = false;
+  Binary decoded = Binary::fromBase64("", &success);
+  EXPECT_TRUE(success);
+  EXPECT_EQ(
+      std::vector<uint8_t>(),
+      std::vector<uint8_t>(decoded.data(), decoded.data() + decoded.size()));
+}
+
+TEST(ProtocolStringTest, AllBytesBase64Roundtrip) {
+  std::vector<uint8_t> all_bytes;
+  for (int ii = 0; ii < 255; ++ii)
+    all_bytes.push_back(ii);
+  Binary binary = Binary::fromVector(all_bytes);
+  bool success = false;
+  Binary decoded = Binary::fromBase64(binary.toBase64(), &success);
+  EXPECT_TRUE(success);
+  std::vector<uint8_t> decoded_bytes(decoded.data(),
+                                     decoded.data() + decoded.size());
+  EXPECT_EQ(all_bytes, decoded_bytes);
+}
+
+TEST(ProtocolStringTest, HelloWorldBase64Roundtrip) {
+  const char* kMsg = "Hello, world.";
+  std::vector<uint8_t> msg(kMsg, kMsg + strlen(kMsg));
+  EXPECT_EQ(strlen(kMsg), msg.size());
+
+  protocol::String encoded = Binary::fromVector(msg).toBase64();
+  EXPECT_EQ("SGVsbG8sIHdvcmxkLg==", encoded);
+  bool success = false;
+  Binary decoded_binary = Binary::fromBase64(encoded, &success);
+  EXPECT_TRUE(success);
+  std::vector<uint8_t> decoded(decoded_binary.data(),
+                               decoded_binary.data() + decoded_binary.size());
+  EXPECT_EQ(msg, decoded);
+}
+
+TEST(ProtocolBinaryTest, InvalidBase64Decode) {
+  bool success = true;
+  Binary binary = Binary::fromBase64("This is not base64.", &success);
+  EXPECT_FALSE(success);
+}
+}  // namespace
+}  // namespace protocol
+}  // namespace headless
