description: disable tracing, it depends on too many sourceless javascript files
author: Michael Gilbert <mgilbert@debian.org>

--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1735,18 +1735,6 @@ jumbo_static_library("browser") {
     "task_manager/web_contents_tags.h",
     "themes/theme_service_win.cc",
     "themes/theme_service_win.h",
-    "tracing/background_tracing_field_trial.cc",
-    "tracing/background_tracing_field_trial.h",
-    "tracing/background_tracing_metrics_provider.cc",
-    "tracing/background_tracing_metrics_provider.h",
-    "tracing/chrome_tracing_delegate.cc",
-    "tracing/chrome_tracing_delegate.h",
-    "tracing/crash_service_uploader.cc",
-    "tracing/crash_service_uploader.h",
-    "tracing/navigation_tracing.cc",
-    "tracing/navigation_tracing.h",
-    "tracing/trace_event_system_stats_monitor.cc",
-    "tracing/trace_event_system_stats_monitor.h",
     "transition_manager/full_browser_transition_manager.cc",
     "transition_manager/full_browser_transition_manager.h",
     "translate/android/translate_utils.cc",
@@ -2043,7 +2031,6 @@ jumbo_static_library("browser") {
     "//components/sync_preferences",
     "//components/sync_sessions",
     "//components/tab_count_metrics",
-    "//components/tracing:startup_tracing",
     "//components/translate/content/browser",
     "//components/translate/core/browser",
     "//components/translate/core/common",
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -71,9 +71,6 @@ jumbo_source_set("browser") {
     "//components/services/leveldb:lib",
     "//components/services/quarantine:quarantine",
     "//components/services/storage",
-    "//components/tracing",
-    "//components/tracing:startup_tracing",
-    "//components/tracing/common:interfaces",
     "//components/ui_devtools",
     "//components/url_formatter",
     "//components/viz/client",
@@ -176,9 +173,6 @@ jumbo_source_set("browser") {
     "//services/service_manager/zygote:zygote_buildflags",
     "//services/shape_detection:lib",
     "//services/shape_detection/public/mojom",
-    "//services/tracing:lib",
-    "//services/tracing:manifest",
-    "//services/tracing/public/cpp",
     "//services/video_capture:lib",
     "//services/video_capture/public/cpp",
     "//services/video_capture/public/mojom:constants",
@@ -762,8 +756,6 @@ jumbo_source_set("browser") {
     "devtools/protocol/target_handler.h",
     "devtools/protocol/tethering_handler.cc",
     "devtools/protocol/tethering_handler.h",
-    "devtools/protocol/tracing_handler.cc",
-    "devtools/protocol/tracing_handler.h",
     "devtools/render_frame_devtools_agent_host.cc",
     "devtools/render_frame_devtools_agent_host.h",
     "devtools/service_worker_devtools_agent_host.cc",
@@ -1796,31 +1788,6 @@ jumbo_source_set("browser") {
     "theme_helper.h",
     "theme_helper_mac.h",
     "theme_helper_mac.mm",
-    "tracing/background_memory_tracing_observer.cc",
-    "tracing/background_memory_tracing_observer.h",
-    "tracing/background_startup_tracing_observer.cc",
-    "tracing/background_startup_tracing_observer.h",
-    "tracing/background_tracing_active_scenario.cc",
-    "tracing/background_tracing_active_scenario.h",
-    "tracing/background_tracing_agent_client_impl.cc",
-    "tracing/background_tracing_agent_client_impl.h",
-    "tracing/background_tracing_config_impl.cc",
-    "tracing/background_tracing_config_impl.h",
-    "tracing/background_tracing_manager_impl.cc",
-    "tracing/background_tracing_manager_impl.h",
-    "tracing/background_tracing_rule.cc",
-    "tracing/background_tracing_rule.h",
-    "tracing/file_tracing_provider_impl.cc",
-    "tracing/file_tracing_provider_impl.h",
-    "tracing/memory_instrumentation_util.cc",
-    "tracing/memory_instrumentation_util.h",
-    "tracing/perfetto_file_tracer.cc",
-    "tracing/perfetto_file_tracer.h",
-    "tracing/tracing_controller_impl.cc",
-    "tracing/tracing_controller_impl.h",
-    "tracing/tracing_controller_impl_data_endpoint.cc",
-    "tracing/tracing_ui.cc",
-    "tracing/tracing_ui.h",
     "url_loader_factory_getter.cc",
     "url_loader_factory_getter.h",
     "utility_process_host.cc",
@@ -2066,7 +2033,6 @@ jumbo_source_set("browser") {
   if (!is_android) {
     deps += [
       "//components/vector_icons",
-      "//content/browser/tracing:resources",
     ]
   }
 
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -512,7 +512,6 @@ repack("pak") {
 
   sources = [
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/content/shell/shell_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
@@ -530,7 +529,6 @@ repack("pak") {
     ":resources",
     "//content:resources",
     "//content/app/resources",
-    "//content/browser/tracing:resources",
     "//mojo/public/js:resources",
     "//net:net_resources",
     "//third_party/blink/public:resources",
--- a/headless/BUILD.gn
+++ b/headless/BUILD.gn
@@ -34,7 +34,6 @@ repack("pak") {
     "$root_gen_dir/components/strings/components_strings_en-US.pak",
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
     "$root_gen_dir/content/browser/devtools/devtools_resources.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/headless/headless_lib_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
@@ -61,7 +60,6 @@ repack("pak") {
     "//content:resources",
     "//content/app/resources",
     "//content/browser/devtools:resources",
-    "//content/browser/tracing:resources",
     "//mojo/public/js:resources",
     "//net:net_resources",
     "//third_party/blink/public:resources",
--- a/chrome/chrome_paks.gni
+++ b/chrome/chrome_paks.gni
@@ -97,7 +97,6 @@ template("chrome_extra_paks") {
       "$root_gen_dir/chrome/quota_internals_resources.pak",
       "$root_gen_dir/components/autofill/core/browser/autofill_address_rewriter_resources.pak",
       "$root_gen_dir/components/components_resources.pak",
-      "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
       "$root_gen_dir/content/content_resources.pak",
       "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
       "$root_gen_dir/net/net_resources.pak",
@@ -114,7 +113,6 @@ template("chrome_extra_paks") {
       "//components/autofill/core/browser:autofill_address_rewriter_resources",
       "//components/resources",
       "//content:resources",
-      "//content/browser/tracing:resources",
       "//mojo/public/js:resources",
       "//net:net_resources",
       "//third_party/blink/public:resources",
--- a/content/browser/browser_child_process_host_impl.cc
+++ b/content/browser/browser_child_process_host_impl.cc
@@ -28,13 +28,10 @@
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/token.h"
 #include "build/build_config.h"
-#include "components/tracing/common/trace_startup_config.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "content/browser/bad_message.h"
 #include "content/browser/browser_main_loop.h"
 #include "content/browser/histogram_controller.h"
 #include "content/browser/service_manager/service_manager_context.h"
-#include "content/browser/tracing/background_tracing_manager_impl.h"
 #include "content/common/child_process_host_impl.h"
 #include "content/common/service_manager/child_connection.h"
 #include "content/public/browser/browser_child_process_host_delegate.h"
@@ -59,7 +56,6 @@
 #include "net/websockets/websocket_channel.h"
 #include "services/service_manager/embedder/switches.h"
 #include "services/service_manager/public/cpp/constants.h"
-#include "services/tracing/public/cpp/trace_startup.h"
 
 #if defined(OS_MACOSX)
 #include "content/browser/child_process_task_port_provider_mac.h"
@@ -248,7 +244,6 @@ void BrowserChildProcessHostImpl::CopyFe
 // static
 void BrowserChildProcessHostImpl::CopyTraceStartupFlags(
     base::CommandLine* cmd_line) {
-  tracing::PropagateTracingFlagsToChildProcessCmdLine(cmd_line);
 }
 
 void BrowserChildProcessHostImpl::Launch(
@@ -336,7 +331,6 @@ void BrowserChildProcessHostImpl::Launch
       switches::kLogBestEffortTasks,
       switches::kLogFile,
       switches::kLoggingLevel,
-      switches::kTraceToConsole,
       switches::kV,
       switches::kVModule,
   };
@@ -347,15 +341,6 @@ void BrowserChildProcessHostImpl::Launch
     cmd_line->AppendSwitchASCII(
         service_manager::switches::kServiceRequestChannelToken,
         child_connection_->service_token());
-
-    // Tracing adds too much overhead to the profiling service.
-    if (service_manager::SandboxTypeFromCommandLine(*cmd_line) !=
-        service_manager::SANDBOX_TYPE_PROFILING) {
-      BackgroundTracingManagerImpl::ActivateForProcess(
-          data_.id,
-          static_cast<ChildProcessHostImpl*>(child_process_host_.get())
-              ->child_process());
-    }
   }
 
   // All processes should have a non-empty metrics name.
--- a/content/public/browser/background_tracing_config.cc
+++ b/content/public/browser/background_tracing_config.cc
@@ -4,8 +4,6 @@
 
 #include "content/public/browser/background_tracing_config.h"
 
-#include "content/browser/tracing/background_tracing_config_impl.h"
-
 namespace content {
 
 BackgroundTracingConfig::BackgroundTracingConfig(TracingMode tracing_mode)
@@ -15,7 +13,7 @@ BackgroundTracingConfig::~BackgroundTrac
 
 std::unique_ptr<BackgroundTracingConfig> BackgroundTracingConfig::FromDict(
     const base::DictionaryValue* dict) {
-  return BackgroundTracingConfigImpl::FromDict(dict);
+  return nullptr;
 }
 
 }  // namespace content
--- a/content/public/browser/background_tracing_config.h
+++ b/content/public/browser/background_tracing_config.h
@@ -37,7 +37,6 @@ class CONTENT_EXPORT BackgroundTracingCo
   virtual void IntoDict(base::DictionaryValue* dict) = 0;
 
  private:
-  friend class BackgroundTracingConfigImpl;
   explicit BackgroundTracingConfig(TracingMode tracing_mode);
 
   const TracingMode tracing_mode_;
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -53,9 +53,6 @@
 #include "build/build_config.h"
 #include "cc/base/histograms.h"
 #include "components/discardable_memory/service/discardable_shared_memory_manager.h"
-#include "components/tracing/common/trace_startup_config.h"
-#include "components/tracing/common/trace_to_console.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "components/viz/common/features.h"
 #include "components/viz/common/switches.h"
 #include "components/viz/host/gpu_host_impl.h"
@@ -91,8 +88,6 @@
 #include "content/browser/speech/speech_recognition_manager_impl.h"
 #include "content/browser/startup_data_impl.h"
 #include "content/browser/startup_task_runner.h"
-#include "content/browser/tracing/background_tracing_manager_impl.h"
-#include "content/browser/tracing/tracing_controller_impl.h"
 #include "content/browser/utility_process_host.h"
 #include "content/browser/webrtc/webrtc_internals.h"
 #include "content/browser/webui/content_web_ui_controller_factory.h"
@@ -980,10 +975,6 @@ int BrowserMainLoop::CreateThreads() {
 }
 
 int BrowserMainLoop::PostCreateThreads() {
-  tracing_controller_ = std::make_unique<content::TracingControllerImpl>();
-  content::BackgroundTracingManagerImpl::GetInstance()
-      ->AddMetadataGeneratorFunction();
-
   if (parts_) {
     TRACE_EVENT0("startup", "BrowserMainLoop::PostCreateThreads");
     parts_->PostCreateThreads();
@@ -1532,13 +1523,6 @@ void BrowserMainLoop::InitializeMojo() {
   // know they're running in the same process as the service.
   content::NavigableContentsView::SetClientRunningInServiceProcess();
 
-  // Start startup tracing through TracingController's interface. TraceLog has
-  // been enabled in content_main_runner where threads are not available. Now We
-  // need to start tracing for all other tracing agents, which require threads.
-  // We can only do this after starting the main message loop to avoid calling
-  // MessagePumpForUI::ScheduleWork() before MessagePumpForUI::Start().
-  TracingControllerImpl::GetInstance()->StartStartupTracingIfNeeded();
-
 #if BUILDFLAG(MOJO_RANDOM_DELAYS_ENABLED)
   mojo::BeginRandomMojoDelays();
 #endif
--- a/content/browser/browser_main_loop.h
+++ b/content/browser/browser_main_loop.h
@@ -390,7 +390,6 @@ class CONTENT_EXPORT BrowserMainLoop {
 
   std::unique_ptr<MediaStreamManager> media_stream_manager_;
   scoped_refptr<SaveFileManager> save_file_manager_;
-  std::unique_ptr<content::TracingControllerImpl> tracing_controller_;
   scoped_refptr<responsiveness::Watcher> responsiveness_watcher_;
 #if !defined(OS_ANDROID)
   // A SharedBitmapManager used to sharing and mapping IDs to shared memory
--- a/content/browser/devtools/browser_devtools_agent_host.cc
+++ b/content/browser/devtools/browser_devtools_agent_host.cc
@@ -20,7 +20,6 @@
 #include "content/browser/devtools/protocol/system_info_handler.h"
 #include "content/browser/devtools/protocol/target_handler.h"
 #include "content/browser/devtools/protocol/tethering_handler.h"
-#include "content/browser/devtools/protocol/tracing_handler.h"
 #include "content/browser/frame_host/frame_tree_node.h"
 
 namespace content {
@@ -89,8 +88,6 @@ bool BrowserDevToolsAgentHost::AttachSes
     session->AddHandler(std::make_unique<protocol::TetheringHandler>(
         socket_callback_, tethering_task_runner_));
   }
-  session->AddHandler(
-      std::make_unique<protocol::TracingHandler>(nullptr, GetIOContext()));
   return true;
 }
 
--- a/content/browser/devtools/render_frame_devtools_agent_host.cc
+++ b/content/browser/devtools/render_frame_devtools_agent_host.cc
@@ -39,7 +39,6 @@
 #include "content/browser/devtools/protocol/service_worker_handler.h"
 #include "content/browser/devtools/protocol/storage_handler.h"
 #include "content/browser/devtools/protocol/target_handler.h"
-#include "content/browser/devtools/protocol/tracing_handler.h"
 #include "content/browser/frame_host/navigation_request.h"
 #include "content/browser/frame_host/render_frame_host_impl.h"
 #include "content/browser/renderer_host/render_process_host_impl.h"
@@ -325,8 +324,6 @@ bool RenderFrameDevToolsAgentHost::Attac
       session->client()->MayReadLocalFiles()));
   session->AddHandler(std::make_unique<protocol::SecurityHandler>());
   if (!frame_tree_node_ || !frame_tree_node_->parent()) {
-    session->AddHandler(std::make_unique<protocol::TracingHandler>(
-        frame_tree_node_, GetIOContext()));
   }
 #if !defined(OS_ANDROID)
   session->AddHandler(std::make_unique<protocol::WebAuthnHandler>());
@@ -389,8 +386,6 @@ RenderFrameDevToolsAgentHost::~RenderFra
 void RenderFrameDevToolsAgentHost::ReadyToCommitNavigation(
     NavigationHandle* navigation_handle) {
   NavigationRequest* request = NavigationRequest::From(navigation_handle);
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    tracing->ReadyToCommitNavigation(request);
 
   if (request->frame_tree_node() != frame_tree_node_) {
     if (ShouldForceCreation() && request->GetRenderFrameHost() &&
@@ -503,8 +498,6 @@ void RenderFrameDevToolsAgentHost::Rende
 
 void RenderFrameDevToolsAgentHost::FrameDeleted(RenderFrameHost* rfh) {
   RenderFrameHostImpl* host = static_cast<RenderFrameHostImpl*>(rfh);
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    tracing->FrameDeleted(host);
   if (host->frame_tree_node() == frame_tree_node_) {
     DestroyOnRenderFrameGone();
     // |this| may be deleted at this point.
@@ -760,8 +753,6 @@ void RenderFrameDevToolsAgentHost::Synch
   if (!frame_trace_recorder_)
     return;
   bool did_initiate_recording = false;
-  for (auto* tracing : protocol::TracingHandler::ForAgentHost(this))
-    did_initiate_recording |= tracing->did_initiate_recording();
   if (did_initiate_recording) {
     frame_trace_recorder_->OnSynchronousSwapCompositorFrame(frame_host_,
                                                             frame_metadata);
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -135,7 +135,6 @@
 #include "content/browser/site_instance_impl.h"
 #include "content/browser/storage_partition_impl.h"
 #include "content/browser/theme_helper.h"
-#include "content/browser/tracing/background_tracing_manager_impl.h"
 #include "content/browser/webui/web_ui_controller_factory_registry.h"
 #include "content/common/child_process.mojom.h"
 #include "content/common/child_process_host_impl.h"
@@ -1700,11 +1699,6 @@ bool RenderProcessHostImpl::Init() {
         base::BindRepeating(&RenderProcessHostImpl::OnMojoError, id_));
     channel_->Pause();
 
-    // In single process mode, browser-side tracing and memory will cover the
-    // whole process including renderers.
-    BackgroundTracingManagerImpl::ActivateForProcess(GetID(),
-                                                     child_process_.get());
-
     fast_shutdown_started_ = false;
   }
 
--- a/content/browser/webui/content_web_ui_controller_factory.cc
+++ b/content/browser/webui/content_web_ui_controller_factory.cc
@@ -13,7 +13,6 @@
 #include "content/browser/net/network_errors_listing_ui.h"
 #include "content/browser/process_internals/process_internals_ui.h"
 #include "content/browser/service_worker/service_worker_internals_ui.h"
-#include "content/browser/tracing/tracing_ui.h"
 #include "content/browser/webrtc/webrtc_internals_ui.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
@@ -78,7 +77,7 @@ ContentWebUIControllerFactory::CreateWeb
     return std::make_unique<ServiceWorkerInternalsUI>(web_ui);
   if (url.host_piece() == kChromeUINetworkErrorsListingHost)
     return std::make_unique<NetworkErrorsListingUI>(web_ui);
-#if !defined(OS_ANDROID)
+#if 0
   if (url.host_piece() == kChromeUITracingHost)
     return std::make_unique<TracingUI>(web_ui);
 #endif
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -97,9 +97,6 @@
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/site_isolation/site_isolation_policy.h"
 #include "chrome/browser/startup_data.h"
-#include "chrome/browser/tracing/background_tracing_field_trial.h"
-#include "chrome/browser/tracing/navigation_tracing.h"
-#include "chrome/browser/tracing/trace_event_system_stats_monitor.h"
 #include "chrome/browser/translate/translate_service.h"
 #include "chrome/browser/ui/javascript_dialogs/chrome_javascript_native_app_modal_dialog_factory.h"
 #include "chrome/browser/ui/profile_error_dialog.h"
@@ -187,7 +184,6 @@
 #include "printing/buildflags/buildflags.h"
 #include "rlz/buildflags/buildflags.h"
 #include "services/service_manager/public/cpp/connector.h"
-#include "services/tracing/public/cpp/stack_sampling/tracing_sampler_profiler.h"
 #include "third_party/blink/public/common/experiments/memory_ablation_experiment.h"
 #include "third_party/widevine/cdm/buildflags.h"
 #include "ui/base/layout.h"
@@ -870,11 +866,6 @@ void ChromeBrowserMainParts::PostMainMes
 
   system_monitor_ = performance_monitor::SystemMonitor::Create();
 
-  // TODO(sebmarchand): Allow this to be created earlier if startup tracing is
-  // enabled.
-  trace_event_system_stats_monitor_ =
-      std::make_unique<tracing::TraceEventSystemStatsMonitor>();
-
   // device_event_log must be initialized after the message loop. Calls to
   // {DEVICE}_LOG prior to here will only be logged with VLOG. Some
   // platforms (e.g. chromeos) may have already initialized this.
@@ -1112,12 +1103,6 @@ int ChromeBrowserMainParts::PreCreateThr
 #endif  // defined(OS_WIN)
 #endif  // BUILDFLAG(ENABLE_VR)
 
-  // Enable Navigation Tracing only if a trace upload url is specified.
-  if (parsed_command_line_.HasSwitch(switches::kEnableNavigationTracing) &&
-      parsed_command_line_.HasSwitch(switches::kTraceUploadURL)) {
-    tracing::SetupNavigationTracing();
-  }
-
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
   metrics::DesktopSessionDurationTracker::Initialize();
@@ -1175,15 +1160,6 @@ void ChromeBrowserMainParts::PostCreateT
   base::PostTask(FROM_HERE, {BrowserThread::IO},
                  base::BindOnce(&ThreadProfiler::StartOnChildThread,
                                 metrics::CallStackProfileParams::IO_THREAD));
-// Sampling multiple threads might cause overhead on Android and we don't want
-// to enable it unless the data is needed.
-#if !defined(OS_ANDROID)
-  base::PostTask(
-      FROM_HERE, {BrowserThread::IO},
-      base::BindOnce(&tracing::TracingSamplerProfiler::CreateOnChildThread));
-#endif
-
-  tracing::SetupBackgroundTracingFieldTrial();
 
   for (size_t i = 0; i < chrome_extra_parts_.size(); ++i)
     chrome_extra_parts_[i]->PostCreateThreads();
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -134,7 +134,6 @@
 #include "chrome/browser/subresource_filter/chrome_subresource_filter_client.h"
 #include "chrome/browser/sync_file_system/local/sync_file_system_backend.h"
 #include "chrome/browser/tab_contents/tab_util.h"
-#include "chrome/browser/tracing/chrome_tracing_delegate.h"
 #include "chrome/browser/translate/translate_service.h"
 #include "chrome/browser/ui/blocked_content/blocked_window_params.h"
 #include "chrome/browser/ui/blocked_content/popup_blocker.h"
@@ -4068,7 +4067,7 @@ ChromeContentBrowserClient::GetDevToolsB
 }
 
 content::TracingDelegate* ChromeContentBrowserClient::GetTracingDelegate() {
-  return new ChromeTracingDelegate();
+  return nullptr;
 }
 
 bool ChromeContentBrowserClient::IsPluginAllowedToCallRequestOSFileHandle(
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -67,7 +67,6 @@
 #include "chrome/browser/ssl/chrome_ssl_host_state_delegate.h"
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/browser/task_manager/task_manager_interface.h"
-#include "chrome/browser/tracing/chrome_tracing_delegate.h"
 #include "chrome/browser/ui/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "chrome/browser/ui/browser_ui_prefs.h"
 #include "chrome/browser/ui/hats/hats_service.h"
@@ -604,7 +603,6 @@ void RegisterLocalState(PrefRegistrySimp
   BrowserProcessImpl::RegisterPrefs(registry);
   ChromeContentBrowserClient::RegisterLocalStatePrefs(registry);
   ChromeMetricsServiceClient::RegisterPrefs(registry);
-  ChromeTracingDelegate::RegisterPrefs(registry);
   component_updater::RegisterPrefs(registry);
   ExternalProtocolHandler::RegisterPrefs(registry);
   flags_ui::PrefServiceFlagsStorage::RegisterPrefs(registry);
--- a/chrome/browser/lifetime/browser_shutdown.cc
+++ b/chrome/browser/lifetime/browser_shutdown.cc
@@ -35,9 +35,7 @@
 #include "components/metrics/metrics_service.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "content/public/browser/render_process_host.h"
-#include "content/public/browser/tracing_controller.h"
 #include "printing/buildflags/buildflags.h"
 #include "rlz/buildflags/buildflags.h"
 
--- a/chrome/browser/sessions/tab_loader.cc
+++ b/chrome/browser/sessions/tab_loader.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "components/favicon/content/content_favicon_driver.h"
-#include "content/public/browser/background_tracing_manager.h"
 #include "content/public/browser/navigation_controller.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/content_features.h"
@@ -29,15 +28,6 @@ using resource_coordinator::TabLoadTrack
 namespace {
 
 void BackgroundTracingTrigger() {
-  static content::BackgroundTracingManager::TriggerHandle trigger_handle_ = -1;
-  if (trigger_handle_ == -1) {
-    trigger_handle_ =
-        content::BackgroundTracingManager::GetInstance()->RegisterTriggerType(
-            "session-restore-config");
-  }
-  content::BackgroundTracingManager::GetInstance()->TriggerNamedEvent(
-      trigger_handle_,
-      content::BackgroundTracingManager::StartedFinalizingCallback());
 }
 
 const base::TickClock* GetDefaultTickClock() {
--- a/components/feedback/tracing_manager.cc
+++ b/components/feedback/tracing_manager.cc
@@ -10,7 +10,6 @@
 #include "base/single_thread_task_runner.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "components/feedback/feedback_util.h"
-#include "content/public/browser/tracing_controller.h"
 
 namespace {
 
@@ -41,10 +40,6 @@ int TracingManager::RequestTrace() {
 
   current_trace_id_ = g_next_trace_id;
   ++g_next_trace_id;
-  content::TracingController::GetInstance()->StopTracing(
-      content::TracingController::CreateStringEndpoint(
-          base::BindOnce(&TracingManager::OnTraceDataCollected,
-                         weak_ptr_factory_.GetWeakPtr())));
   return current_trace_id_;
 }
 
@@ -87,9 +82,6 @@ void TracingManager::DiscardTraceData(in
 }
 
 void TracingManager::StartTracing() {
-  content::TracingController::GetInstance()->StartTracing(
-      base::trace_event::TraceConfig(),
-      content::TracingController::StartTracingDoneCallback());
 }
 
 void TracingManager::OnTraceDataCollected(
--- a/chrome/browser/profiling_host/profiling_process_host.cc
+++ b/chrome/browser/profiling_host/profiling_process_host.cc
@@ -22,7 +22,6 @@
 #include "base/values.h"
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/tracing/crash_service_uploader.h"
 #include "components/heap_profiling/supervisor.h"
 #include "components/services/heap_profiling/public/cpp/controller.h"
 #include "components/services/heap_profiling/public/cpp/settings.h"
@@ -48,20 +47,6 @@ const char kConfigCategoryKey[] = "categ
 const char kConfigCategoryMemlog[] = "MEMLOG";
 const char kOOPHeapProfilingUploadUrl[] = "upload_url";
 
-void OnTraceUploadComplete(TraceCrashServiceUploader* uploader,
-                           bool success,
-                           const std::string& feedback) {
-  UMA_HISTOGRAM_BOOLEAN("HeapProfiling.UploadTrace.Success", success);
-
-  if (!success) {
-    LOG(ERROR) << "Cannot upload trace file: " << feedback;
-    return;
-  }
-
-  // The reports is successfully sent. Reports the crash-id to ease debugging.
-  LOG(WARNING) << "slow-reports sent: '" << feedback << '"';
-}
-
 void UploadTraceToCrashServer(std::string upload_url,
                               std::string file_contents,
                               std::string trigger_name,
@@ -90,16 +75,6 @@ void UploadTraceToCrashServer(std::strin
       std::make_unique<base::DictionaryValue>();
   metadata->SetKey("config", std::move(configs));
   metadata->SetKey(kConfigScenarioName, base::Value("MEMLOG"));
-
-  TraceCrashServiceUploader* uploader = new TraceCrashServiceUploader(
-      g_browser_process->shared_url_loader_factory());
-  if (!upload_url.empty())
-    uploader->SetUploadURL(upload_url);
-
-  uploader->DoUpload(file_contents, content::TraceUploader::COMPRESSED_UPLOAD,
-                     std::move(metadata),
-                     content::TraceUploader::UploadProgressCallback(),
-                     base::Bind(&OnTraceUploadComplete, base::Owned(uploader)));
 }
 
 }  // namespace
--- a/components/heap_profiling/test_driver.cc
+++ b/components/heap_profiling/test_driver.cc
@@ -26,7 +26,6 @@
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_process_host.h"
-#include "content/public/browser/tracing_controller.h"
 
 namespace heap_profiling {
 
--- a/components/heap_profiling/supervisor.cc
+++ b/components/heap_profiling/supervisor.cc
@@ -15,7 +15,6 @@
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/resource_coordinator_service.h"
-#include "content/public/browser/tracing_controller.h"
 #include "services/resource_coordinator/public/cpp/memory_instrumentation/memory_instrumentation.h"
 #include "services/resource_coordinator/public/mojom/memory_instrumentation/memory_instrumentation.mojom.h"
 
@@ -116,59 +115,6 @@ void Supervisor::RequestTraceWithHeapDum
                                           bool anonymize) {
   DCHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
   DCHECK(HasStarted());
-
-  if (content::TracingController::GetInstance()->IsTracing()) {
-    DLOG(ERROR) << "Requesting heap dump when tracing has already started.";
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
-        FROM_HERE, base::BindOnce(std::move(callback), false, std::string()));
-    return;
-  }
-
-  auto finished_dump_callback = base::BindOnce(
-      [](TraceFinishedCallback callback, bool anonymize, bool success,
-         uint64_t dump_guid) {
-        // Once the trace has stopped, run |callback| on the UI thread.
-        auto finish_sink_callback = base::BindOnce(
-            [](TraceFinishedCallback callback,
-               std::unique_ptr<std::string> in) {
-              std::string result;
-              result.swap(*in);
-              base::CreateSingleThreadTaskRunner({content::BrowserThread::UI})
-                  ->PostTask(FROM_HERE,
-                             base::BindOnce(std::move(callback), true,
-                                            std::move(result)));
-            },
-            std::move(callback));
-        scoped_refptr<content::TracingController::TraceDataEndpoint> sink =
-            content::TracingController::CreateStringEndpoint(
-                std::move(finish_sink_callback));
-        content::TracingController::GetInstance()->StopTracing(
-            sink,
-            /*agent_label=*/"", anonymize);
-      },
-      std::move(callback), anonymize);
-
-  auto trigger_memory_dump_callback = base::BindOnce(
-      [](base::OnceCallback<void(bool success, uint64_t dump_guid)>
-             finished_dump_callback) {
-        memory_instrumentation::MemoryInstrumentation::GetInstance()
-            ->RequestGlobalDumpAndAppendToTrace(
-                base::trace_event::MemoryDumpType::EXPLICITLY_TRIGGERED,
-                base::trace_event::MemoryDumpLevelOfDetail::BACKGROUND,
-                base::trace_event::MemoryDumpDeterminism::NONE,
-                base::AdaptCallbackForRepeating(
-                    std::move(finished_dump_callback)));
-      },
-      std::move(finished_dump_callback));
-
-  // The only reason this should return false is if tracing is already enabled,
-  // which we've already checked.
-  // Use AdaptCallbackForRepeating since the argument passed to StartTracing()
-  // is intended to be a OnceCallback, but the code has not yet been migrated.
-  bool result = content::TracingController::GetInstance()->StartTracing(
-      GetBackgroundTracingConfig(anonymize),
-      base::AdaptCallbackForRepeating(std::move(trigger_memory_dump_callback)));
-  DCHECK(result);
 }
 
 void Supervisor::StartServiceOnIOThread(
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -58,7 +58,6 @@
 #include "chrome/browser/sync/sessions/sync_sessions_router_tab_helper.h"
 #include "chrome/browser/sync/sessions/sync_sessions_web_contents_router_factory.h"
 #include "chrome/browser/tab_contents/navigation_metrics_recorder.h"
-#include "chrome/browser/tracing/navigation_tracing.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
 #include "chrome/browser/ui/autofill/chrome_autofill_client.h"
 #include "chrome/browser/ui/blocked_content/popup_blocker_tab_helper.h"
@@ -93,7 +92,6 @@
 #include "components/performance_manager/performance_manager_tab_helper.h"
 #include "components/performance_manager/public/performance_manager.h"
 #include "components/subresource_filter/core/browser/subresource_filter_features.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/buildflags/buildflags.h"
@@ -363,9 +361,6 @@ void TabHelpers::AttachTabHelpers(WebCon
   if (predictors::LoadingPredictorFactory::GetForProfile(profile))
     predictors::LoadingPredictorTabHelper::CreateForWebContents(web_contents);
 
-  if (tracing::NavigationTracingObserver::IsEnabled())
-    tracing::NavigationTracingObserver::CreateForWebContents(web_contents);
-
   if (MediaEngagementService::IsEnabled())
     MediaEngagementService::CreateWebContentsObserver(web_contents);
 
--- a/content/browser/builtin_service_manifests.cc
+++ b/content/browser/builtin_service_manifests.cc
@@ -25,7 +25,6 @@
 #include "services/media_session/public/cpp/manifest.h"
 #include "services/metrics/public/cpp/manifest.h"
 #include "services/service_manager/public/cpp/manifest_builder.h"
-#include "services/tracing/manifest.h"
 
 namespace content {
 
@@ -67,7 +66,6 @@ const std::vector<service_manager::Manif
           device::GetManifest(),
           media_session::GetManifest(),
           metrics::GetManifest(),
-          tracing::GetManifest(),
       }};
   return *manifests;
 }
--- a/services/service_manager/public/cpp/service_binding.cc
+++ b/services/service_manager/public/cpp/service_binding.cc
@@ -11,8 +11,6 @@
 #include "base/synchronization/lock.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "services/service_manager/public/cpp/service.h"
-#include "services/tracing/public/cpp/traced_process.h"
-#include "services/tracing/public/mojom/traced_process.mojom.h"
 
 namespace service_manager {
 
@@ -169,12 +167,6 @@ void ServiceBinding::OnBindInterface(
     return;
   }
 
-  if (interface_name == tracing::mojom::TracedProcess::Name_) {
-    tracing::TracedProcess::OnTracedProcessRequest(
-        tracing::mojom::TracedProcessRequest(std::move(interface_pipe)));
-    return;
-  }
-
   service_->OnConnect(source_info, interface_name, std::move(interface_pipe));
 }
 
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -46,7 +46,6 @@ test("services_unittests") {
       "//services/proxy_resolver:tests",
       "//services/resource_coordinator:tests",
       "//services/shape_detection:tests",
-      "//services/tracing:tests",
       "//services/viz/privileged/mojom:unit_tests",
       "//services/viz/public/cpp/compositing:tests",
       "//services/viz/public/cpp/gpu:tests",
--- a/content/public/browser/BUILD.gn
+++ b/content/public/browser/BUILD.gn
@@ -420,7 +420,6 @@ jumbo_source_set("browser_sources") {
     "//services/network/public/mojom",
     "//services/resource_coordinator/public/cpp:resource_coordinator_cpp",
     "//services/service_manager/public/cpp",
-    "//services/tracing/public/cpp",
     "//services/video_capture/public/mojom",
     "//services/viz/public/mojom",
     "//third_party/webrtc/modules/desktop_capture",
--- a/services/service_manager/public/cpp/BUILD.gn
+++ b/services/service_manager/public/cpp/BUILD.gn
@@ -48,10 +48,6 @@ component("cpp") {
     "//url",
   ]
 
-  deps = [
-    "//services/tracing/public/cpp:traced_process",
-  ]
-
   defines = [
     "IS_SERVICE_MANAGER_CPP_IMPL",
 
--- a/content/child/BUILD.gn
+++ b/content/child/BUILD.gn
@@ -113,7 +113,6 @@ target(link_target_type, "child") {
     "//services/resource_coordinator/public/cpp/memory_instrumentation",
     "//services/service_manager/public/cpp",
     "//services/service_manager/public/mojom",
-    "//services/tracing/public/cpp",
     "//skia",
     "//storage/common",
     "//third_party/blink/public:blink_headers",
--- a/mojo/public/tools/bindings/chromium_bindings_configuration.gni
+++ b/mojo/public/tools/bindings/chromium_bindings_configuration.gni
@@ -41,7 +41,6 @@ _typemap_imports = [
   "//services/proxy_resolver/public/cpp/typemaps.gni",
   "//services/resource_coordinator/public/cpp/typemaps.gni",
   "//services/service_manager/public/cpp/typemaps.gni",
-  "//services/tracing/public/mojom/typemaps.gni",
   "//services/viz/privileged/cpp/typemaps.gni",
   "//services/viz/privileged/mojom/compositing/typemaps.gni",
   "//services/viz/public/cpp/compositing/typemaps.gni",
--- a/content/app/BUILD.gn
+++ b/content/app/BUILD.gn
@@ -30,7 +30,6 @@ template("implement_content_app") {
     "//crypto",
     "//services/service_manager/embedder",
     "//services/service_manager/public/mojom",
-    "//services/tracing/public/cpp",
     "//mojo/core/embedder",
     "//ppapi/buildflags",
     "//ui/base",
--- a/content/utility/BUILD.gn
+++ b/content/utility/BUILD.gn
@@ -50,8 +50,6 @@ jumbo_source_set("utility") {
     "//services/service_manager/public/mojom",
     "//services/shape_detection:lib",
     "//services/shape_detection/public/mojom",
-    "//services/tracing:lib",
-    "//services/tracing/public/mojom",
     "//services/video_capture:lib",
     "//services/video_capture/public/mojom:constants",
     "//third_party/blink/public:blink_headers",
--- a/chrome/browser/chrome_browser_main.h
+++ b/chrome/browser/chrome_browser_main.h
@@ -36,10 +36,6 @@ namespace base {
 class RunLoop;
 }
 
-namespace tracing {
-class TraceEventSystemStatsMonitor;
-}
-
 namespace performance_monitor {
 class SystemMonitor;
 }
@@ -162,11 +158,6 @@ class ChromeBrowserMainParts : public co
   // metrics they need.
   std::unique_ptr<performance_monitor::SystemMonitor> system_monitor_;
 
-  // The system stats monitor used by chrome://tracing. This doesn't do anything
-  // until tracing of the |system_stats| category is enabled.
-  std::unique_ptr<tracing::TraceEventSystemStatsMonitor>
-      trace_event_system_stats_monitor_;
-
   // Whether PerformPreMainMessageLoopStartup() is called on VariationsService.
   // Initialized to true if |MainFunctionParams::ui_task| is null (meaning not
   // running browser_tests), but may be forced to true for tests.
--- a/content/app/content_main_runner_impl.cc
+++ b/content/app/content_main_runner_impl.cc
@@ -75,7 +75,6 @@
 #include "services/service_manager/sandbox/sandbox_type.h"
 #include "services/service_manager/sandbox/switches.h"
 #include "services/service_manager/zygote/common/zygote_buildflags.h"
-#include "services/tracing/public/cpp/trace_startup.h"
 #include "third_party/blink/public/common/origin_trials/trial_token_validator.h"
 #include "ui/base/ui_base_paths.h"
 #include "ui/base/ui_base_switches.h"
@@ -491,7 +490,7 @@ int RunZygote(ContentMainDelegate* deleg
       command_line.GetSwitchValueASCII(switches::kProcessType);
   ContentClientInitializer::Set(process_type, delegate);
 
-#if !defined(OS_ANDROID)
+#if 0
   tracing::EnableStartupTracingIfNeeded();
 #endif  // !OS_ANDROID
 
@@ -685,7 +684,7 @@ int ContentMainRunnerImpl::Initialize(co
     SetContentClient(&empty_content_client_);
   ContentClientInitializer::Set(process_type, delegate_);
 
-#if !defined(OS_ANDROID)
+#if 0
     // Enable startup tracing asap to avoid early TRACE_EVENT calls being
     // ignored. For Android, startup tracing is enabled in an even earlier place
     // content/app/android/library_loader_hooks.cc.
@@ -939,8 +938,6 @@ int ContentMainRunnerImpl::RunServiceMan
 
     BrowserTaskExecutor::PostFeatureListSetup();
 
-    tracing::InitTracingPostThreadPoolStartAndFeatureList();
-
     if (should_start_service_manager_only)
       ForceInProcessNetworkService(true);
 
@@ -957,8 +954,6 @@ int ContentMainRunnerImpl::RunServiceMan
     download::SetIOTaskRunner(
         service_manager_environment_->ipc_thread()->task_runner());
 
-    InitializeBrowserMemoryInstrumentationClient();
-
 #if defined(OS_ANDROID)
     if (start_service_manager_only) {
       base::ThreadTaskRunnerHandle::Get()->PostTask(
--- a/content/utility/utility_service_factory.cc
+++ b/content/utility/utility_service_factory.cc
@@ -28,9 +28,6 @@
 #include "services/data_decoder/public/mojom/constants.mojom.h"
 #include "services/network/network_service.h"
 #include "services/service_manager/public/mojom/service.mojom.h"
-#include "services/tracing/public/cpp/tracing_features.h"
-#include "services/tracing/public/mojom/constants.mojom.h"
-#include "services/tracing/tracing_service.h"
 
 #if BUILDFLAG(ENABLE_LIBRARY_CDMS)
 #include "media/cdm/cdm_adapter_factory.h"           // nogncheck
@@ -126,10 +123,6 @@ void UtilityServiceFactory::RunService(
     content::UtilityThread::Get()->EnsureBlinkInitialized();
     service =
         std::make_unique<data_decoder::DataDecoderService>(std::move(request));
-  } else if (service_name == tracing::mojom::kServiceName &&
-             !base::FeatureList::IsEnabled(
-                 features::kTracingServiceInProcess)) {
-    service = std::make_unique<tracing::TracingService>(std::move(request));
   }
 #if BUILDFLAG(ENABLE_LIBRARY_CDMS)
   else if (service_name == media::mojom::kCdmServiceName) {
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -51,7 +51,6 @@
 #include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
-#include "chrome/browser/tracing/background_tracing_metrics_provider.h"
 #include "chrome/browser/translate/translate_ranker_metrics_provider.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/channel_info.h"
@@ -669,9 +668,6 @@ void ChromeMetricsServiceClient::Registe
       std::make_unique<metrics::ComponentMetricsProvider>(
           g_browser_process->component_updater()));
 
-  metrics_service_->RegisterMetricsProvider(
-      std::make_unique<tracing::BackgroundTracingMetricsProvider>());
-
   metrics_service_->RegisterMetricsProvider(MakeDemographicMetricsProvider(
       metrics::MetricsLogUploader::MetricServiceType::UMA));
 
--- a/content/browser/browser_main_runner_impl.cc
+++ b/content/browser/browser_main_runner_impl.cc
@@ -18,11 +18,8 @@
 #include "base/trace_event/heap_profiler_allocation_context_tracker.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
-#include "components/tracing/common/trace_startup_config.h"
-#include "components/tracing/common/tracing_switches.h"
 #include "content/browser/browser_main_loop.h"
 #include "content/browser/notification_service_impl.h"
-#include "content/browser/tracing/tracing_controller_impl.h"
 #include "content/common/content_switches_internal.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/common/main_function_params.h"
@@ -166,10 +163,6 @@ void BrowserMainRunnerImpl::Shutdown() {
 
   main_loop_->PreShutdown();
 
-  // Finalize the startup tracing session if it is still active.
-  if (TracingControllerImpl::GetInstance())
-    TracingControllerImpl::GetInstance()->FinalizeStartupTracingIfNeeded();
-
   {
     // The trace event has to stay between profiler creation and destruction.
     TRACE_EVENT0("shutdown", "BrowserMainRunner");
--- a/content/browser/service_manager/service_manager_context.cc
+++ b/content/browser/service_manager/service_manager_context.cc
@@ -77,9 +77,6 @@
 #include "services/service_manager/service_manager.h"
 #include "services/service_manager/service_process_host.h"
 #include "services/service_manager/service_process_launcher.h"
-#include "services/tracing/public/cpp/tracing_features.h"
-#include "services/tracing/public/mojom/constants.mojom.h"
-#include "services/tracing/tracing_service.h"
 #include "third_party/blink/public/strings/grit/blink_strings.h"
 #include "ui/base/buildflags.h"
 #include "ui/base/ui_base_features.h"
@@ -291,11 +288,6 @@ void CreateInProcessAudioService(
                      BrowserMainLoop::GetAudioManager(), std::move(request)));
 }
 
-std::unique_ptr<service_manager::Service> CreateTracingService(
-    service_manager::mojom::ServiceRequest request) {
-  return std::make_unique<tracing::TracingService>(std::move(request));
-}
-
 std::unique_ptr<service_manager::Service> CreateMediaSessionService(
     service_manager::mojom::ServiceRequest request) {
   return std::make_unique<media_session::MediaSessionService>(
@@ -577,16 +569,6 @@ ServiceManagerContext::ServiceManagerCon
 
   GetContentClient()->browser()->WillStartServiceManager();
 
-  if (base::FeatureList::IsEnabled(features::kTracingServiceInProcess)) {
-    RegisterInProcessService(tracing::mojom::kServiceName,
-                             base::CreateSequencedTaskRunner(
-                                 {base::ThreadPool(), base::MayBlock(),
-                                  base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN,
-                                  base::WithBaseSyncPrimitives(),
-                                  base::TaskPriority::USER_BLOCKING}),
-                             base::BindRepeating(&CreateTracingService));
-  }
-
   in_process_context_->Start(
       manifests, std::move(system_remote),
       base::BindRepeating(&ServiceManagerContext::RunServiceInstance,
--- a/tools/binary_size/BUILD.gn
+++ b/tools/binary_size/BUILD.gn
@@ -19,7 +19,6 @@ python_library("sizes_py") {
   testonly = true
   pydeps_file = "sizes.pydeps"
   data_deps = [
-    "//third_party/catapult/tracing:convert_chart_json",
   ]
 }
 
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -1179,7 +1179,6 @@ test("content_browsertests") {
     "//services/network:test_support",
     "//services/service_manager/public/cpp",
     "//services/test/echo/public/mojom",
-    "//services/tracing:privacy_check",
     "//services/video_capture/public/cpp",
     "//services/video_capture/public/cpp:mocks",
     "//services/video_capture/public/mojom:constants",
--- a/third_party/catapult/BUILD.gn
+++ b/third_party/catapult/BUILD.gn
@@ -102,9 +102,7 @@ group("telemetry_chrome_test_support") {
   ]
 
   data_deps += [
-    "third_party/gsutil",
     "third_party/typ",
-    "third_party/vinn",
   ]
 
   data += [
@@ -128,4 +126,4 @@ group("telemetry_chrome_test_support") {
     "tracing/tracing_examples/",
   ]
 
-}
\ No newline at end of file
+}
--- a/third_party/catapult/devil/BUILD.gn
+++ b/third_party/catapult/devil/BUILD.gn
@@ -6,7 +6,6 @@ group("devil") {
   testonly = true
   deps = []
   data_deps = [
-    "../third_party/gsutil",
   ]
   data = [
     "devil/",
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -1384,7 +1384,6 @@ group("browser_dependencies") {
     "//chrome/common",
     "//components/gwp_asan/buildflags",
     "//components/sync",
-    "//services/tracing/public/cpp",
   ]
   if (enable_plugins) {
     public_deps += [ "//ppapi/host" ]
@@ -1434,7 +1433,6 @@ group("child_dependencies") {
     "//components/services/heap_profiling",
     "//content/public/child",
     "//pdf",
-    "//services/tracing/public/cpp",
     "//third_party/blink/public:blink_devtools_frontend_resources",
   ]
 
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -348,7 +348,6 @@ static_library("test_support") {
     "//ppapi/buildflags",
     "//printing/buildflags",
     "//services/service_manager/embedder",
-    "//services/tracing/public/cpp",
     "//ui/base",
     "//v8:v8_headers",
   ]
--- a/content/gpu/BUILD.gn
+++ b/content/gpu/BUILD.gn
@@ -83,7 +83,6 @@ target(link_target_type, "gpu_sources")
     "//services/service_manager/sandbox:chromecast_sandbox_whitelist_buildflags",
     "//services/shape_detection:lib",
     "//services/shape_detection/public/mojom",
-    "//services/tracing/public/cpp",
     "//services/viz/privileged/mojom",
     "//skia",
     "//third_party/angle:angle_gpu_info_util",
--- a/content/renderer/BUILD.gn
+++ b/content/renderer/BUILD.gn
@@ -396,7 +396,6 @@ target(link_target_type, "renderer") {
     "//services/network:network_service",
     "//services/service_manager/public/cpp",
     "//services/service_manager/public/mojom",
-    "//services/tracing/public/cpp",
     "//services/viz/public/cpp/gpu",
     "//skia",
     "//storage/common",
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -63,7 +63,6 @@
 #include "ppapi/buildflags/buildflags.h"
 #include "printing/buildflags/buildflags.h"
 #include "services/service_manager/embedder/switches.h"
-#include "services/tracing/public/cpp/stack_sampling/tracing_sampler_profiler.h"
 #include "ui/base/material_design/material_design_controller.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/base/ui_base_switches.h"
@@ -646,10 +645,6 @@ bool ChromeMainDelegate::BasicStartupCom
 
   content::Profiling::ProcessStarted();
 
-  // Setup tracing sampler profiler as early as possible at startup if needed.
-  tracing_sampler_profiler_ =
-      tracing::TracingSamplerProfiler::CreateOnMainThread();
-
 #if defined(OS_WIN) && !defined(CHROME_MULTIPLE_DLL_BROWSER)
   v8_crashpad_support::SetUp();
 #endif
--- a/content/gpu/gpu_main.cc
+++ b/content/gpu/gpu_main.cc
@@ -46,7 +46,6 @@
 #include "gpu/ipc/service/gpu_init.h"
 #include "gpu/ipc/service/gpu_watchdog_thread.h"
 #include "media/gpu/buildflags.h"
-#include "services/tracing/public/cpp/stack_sampling/tracing_sampler_profiler.h"
 #include "third_party/angle/src/gpu_info_util/SystemInfo.h"
 #include "ui/events/platform/platform_event_source.h"
 #include "ui/gfx/switches.h"
@@ -350,10 +349,6 @@ int GpuMain(const MainFunctionParams& pa
 
   gpu_process.set_main_thread(child_thread);
 
-  // Setup tracing sampler profiler as early as possible.
-  std::unique_ptr<tracing::TracingSamplerProfiler> tracing_sampler_profiler =
-      tracing::TracingSamplerProfiler::CreateOnMainThread();
-
 #if defined(OS_ANDROID)
   base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
       tracing::GraphicsMemoryDumpProvider::GetInstance(), "AndroidGraphics",
--- a/content/renderer/renderer_main.cc
+++ b/content/renderer/renderer_main.cc
@@ -37,7 +37,6 @@
 #include "mojo/public/cpp/bindings/mojo_buildflags.h"
 #include "ppapi/buildflags/buildflags.h"
 #include "services/service_manager/sandbox/switches.h"
-#include "services/tracing/public/cpp/stack_sampling/tracing_sampler_profiler.h"
 #include "third_party/blink/public/platform/scheduler/web_thread_scheduler.h"
 #include "third_party/webrtc_overrides/init_webrtc.h"  // nogncheck
 #include "ui/base/ui_base_switches.h"
@@ -191,10 +190,6 @@ int RendererMain(const MainFunctionParam
     new RenderThreadImpl(run_loop.QuitClosure(),
                          std::move(main_thread_scheduler));
 
-    // Setup tracing sampler profiler as early as possible.
-    auto tracing_sampler_profiler =
-        tracing::TracingSamplerProfiler::CreateOnMainThread();
-
     if (need_sandbox)
       should_run_loop = platform.EnableSandbox();
 
--- a/components/ui_devtools/BUILD.gn
+++ b/components/ui_devtools/BUILD.gn
@@ -121,8 +121,6 @@ component("ui_devtools") {
     "//services/network/public/cpp",
     "//services/network/public/mojom",
     "//services/service_manager/public/cpp",
-    "//services/tracing/public/cpp",
-    "//services/tracing/public/mojom",
     "//third_party/perfetto/gn:default_deps",
   ]
 }
--- a/tools/gritsettings/resource_ids
+++ b/tools/gritsettings/resource_ids
@@ -301,11 +301,6 @@
   "content/shell/shell_resources.grd": {
     "includes": [20500],
   },
-
-  # This file is generated during the build.
-  "<(SHARED_INTERMEDIATE_DIR)/content/browser/tracing/tracing_resources.grd": {
-    "includes": [20550],
-  },
   # END content/ section.
 
   # START ios/web/ section.
--- a/fuchsia/engine/BUILD.gn
+++ b/fuchsia/engine/BUILD.gn
@@ -31,7 +31,6 @@ repack("web_engine_pak") {
     "$root_gen_dir/components/components_resources.pak",
     "$root_gen_dir/components/strings/components_strings_en-US.pak",
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
     "$root_gen_dir/net/net_resources.pak",
@@ -48,7 +47,6 @@ repack("web_engine_pak") {
     "//components/strings",
     "//content:resources",
     "//content/app/resources",
-    "//content/browser/tracing:resources",
     "//gpu/command_buffer/service",
     "//mojo/public/js:resources",
     "//net:net_resources",
--- a/weblayer/shell/BUILD.gn
+++ b/weblayer/shell/BUILD.gn
@@ -166,7 +166,6 @@ repack("support_pak") {
     "$root_gen_dir/components/components_resources_100_percent.pak",
     "$root_gen_dir/components/strings/components_strings_en-US.pak",
     "$root_gen_dir/content/app/resources/content_resources_100_percent.pak",
-    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
     "$root_gen_dir/content/content_resources.pak",
     "$root_gen_dir/mojo/public/js/mojo_bindings_resources.pak",
     "$root_gen_dir/net/net_resources.pak",
@@ -185,7 +184,6 @@ repack("support_pak") {
     "//components/strings",
     "//content:resources",
     "//content/app/resources",
-    "//content/browser/tracing:resources",
     "//mojo/public/js:resources",
     "//net:net_resources",
     "//third_party/blink/public:resources",
--- a/chrome/app/chrome_main_delegate.h
+++ b/chrome/app/chrome_main_delegate.h
@@ -88,8 +88,6 @@ class ChromeMainDelegate : public conten
   std::unique_ptr<StartupData> startup_data_;
 #endif
 
-  std::unique_ptr<tracing::TracingSamplerProfiler> tracing_sampler_profiler_;
-
   // The controller schedules UMA heap profiles collections and forwarding down
   // the reporting pipeline.
   std::unique_ptr<HeapProfilerController> heap_profiler_controller_;
--- a/content/child/child_process.cc
+++ b/content/child/child_process.cc
@@ -16,7 +16,6 @@
 #include "base/threading/thread_local.h"
 #include "build/build_config.h"
 #include "content/child/child_thread_impl.h"
-#include "services/tracing/public/cpp/trace_startup.h"
 #include "third_party/blink/public/common/features.h"
 
 namespace content {
@@ -52,7 +51,6 @@ ChildProcess::ChildProcess(base::ThreadP
     DCHECK(base::ThreadPoolInstance::Get());
     initialized_thread_pool_ = true;
   }
-  tracing::InitTracingPostThreadPoolStartAndFeatureList();
 
   // We can't recover from failing to start the IO thread.
   base::Thread::Options thread_options(base::MessagePumpType::IO, 0);
--- a/content/public/test/browser_test_base.cc
+++ b/content/public/test/browser_test_base.cc
@@ -39,8 +39,6 @@
 #include "content/browser/scheduler/browser_task_executor.h"
 #include "content/browser/startup_data_impl.h"
 #include "content/browser/startup_helper.h"
-#include "content/browser/tracing/memory_instrumentation_util.h"
-#include "content/browser/tracing/tracing_controller_impl.h"
 #include "content/public/app/content_main.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -64,7 +62,6 @@
 #include "services/network/public/cpp/features.h"
 #include "services/network/public/mojom/network_service_test.mojom.h"
 #include "services/service_manager/embedder/switches.h"
-#include "services/tracing/public/cpp/trace_startup.h"
 #include "ui/compositor/compositor_switches.h"
 #include "ui/display/display_switches.h"
 #include "ui/gl/gl_implementation.h"
@@ -424,8 +421,6 @@ void BrowserTestBase::SetUp() {
 
     StartBrowserThreadPool();
     BrowserTaskExecutor::PostFeatureListSetup();
-    tracing::InitTracingPostThreadPoolStartAndFeatureList();
-    InitializeBrowserMemoryInstrumentationClient();
   }
 
   // All FeatureList overrides should have been registered prior to browser test
@@ -618,17 +613,6 @@ void BrowserTestBase::ProxyRunTestOnMain
     signal(SIGTERM, DumpStackTraceSignalHandler);
 #endif  // defined(OS_POSIX)
 
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kEnableTracing)) {
-    base::trace_event::TraceConfig trace_config(
-        base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
-            switches::kEnableTracing),
-        base::trace_event::RECORD_CONTINUOUSLY);
-    TracingController::GetInstance()->StartTracing(
-        trace_config,
-        TracingController::StartTracingDoneCallback());
-  }
-
   {
     // This can be called from a posted task. Allow nested tasks here, because
     // otherwise the test body will have to do it in order to use RunLoop for
@@ -672,26 +656,6 @@ void BrowserTestBase::ProxyRunTestOnMain
     TearDownOnMainThread();
   }
 
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kEnableTracing)) {
-    base::FilePath trace_file =
-        base::CommandLine::ForCurrentProcess()->GetSwitchValuePath(
-            switches::kEnableTracingOutput);
-    // If there was no file specified, put a hardcoded one in the current
-    // working directory.
-    if (trace_file.empty())
-      trace_file = base::FilePath().AppendASCII(GetDefaultTraceFilaneme());
-
-    // Wait for tracing to collect results from the renderers.
-    base::RunLoop run_loop;
-    TracingController::GetInstance()->StopTracing(
-        TracingControllerImpl::CreateFileEndpoint(
-            trace_file, base::Bind(&TraceStopTracingComplete,
-                                   run_loop.QuitClosure(), trace_file)));
-    run_loop.Run();
-  }
-
-  PostRunTestOnMainThread();
 }
 
 void BrowserTestBase::CreateTestServer(const base::FilePath& test_server_base) {
