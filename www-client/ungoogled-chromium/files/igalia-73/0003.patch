--- a/components/metrics/stability_metrics_helper.cc	2019-04-05 03:49:12.000000000 +0300
+++ b/components/metrics/stability_metrics_helper.cc	2019-05-17 18:53:21.156000000 +0300
@@ -324,8 +324,7 @@
   local_state_->SetInt64(path, value + 1);
 }
 
-void StabilityMetricsHelper::LogRendererHang(RendererHangCause hang_cause) {
-  UMA_HISTOGRAM_ENUMERATION("ChildProcess.HungRendererCause", hang_cause);
+void StabilityMetricsHelper::LogRendererHang() {
   IncrementPrefValue(prefs::kStabilityRendererHangCount);
 }
 
--- a/components/metrics/stability_metrics_helper.h	2019-04-05 03:49:12.000000000 +0300
+++ b/components/metrics/stability_metrics_helper.h	2019-05-17 18:53:21.156000000 +0300
@@ -15,16 +15,6 @@
 
 namespace metrics {
 
-// The cause of the renderer hang.
-// This is for a temporary UMA value to aid in determining the cause of
-// renderer hangs described in crbug.com/938647.
-enum class RendererHangCause {
-  kCommitTimeout = 0,
-  kInputAckTimeout = 1,
-  // Special enumerator value used by histogram macros.
-  kMaxValue = kInputAckTimeout
-};
-
 class SystemProfileProto;
 
 // StabilityMetricsHelper is a class that providers functionality common to
@@ -63,7 +53,7 @@
   void LogRendererLaunched(bool was_extension_process);
 
   // Records a renderer process hang.
-  void LogRendererHang(RendererHangCause hang_cause);
+  void LogRendererHang();
 
   // Registers local state prefs used by this class.
   static void RegisterPrefs(PrefRegistrySimple* registry);
--- a/components/viz/host/hit_test/hit_test_query.cc	2019-04-05 03:49:15.000000000 +0300
+++ b/components/viz/host/hit_test/hit_test_query.cc	2019-05-17 18:53:26.668000000 +0300
@@ -235,10 +235,7 @@
   DCHECK_EQ(!!(flags & HitTestRegionFlags::kHitTestAsk),
             !!hit_test_data_[region_index].async_hit_test_reasons);
 
-  // TODO(sunxd): v2 doesn't work with drag-n-drop when it still relies on
-  // synchronous targeting result for nested OOPIF cases. crbug.com/896786
-  if (features::IsVizHitTestingSurfaceLayerEnabled() &&
-      (flags & HitTestRegionFlags::kHitTestAsk)) {
+  if (flags & HitTestRegionFlags::kHitTestAsk) {
     target->frame_sink_id = hit_test_data_[region_index].frame_sink_id;
     target->location_in_target = location_in_target;
     target->flags = flags;
@@ -265,8 +262,7 @@
   if (!RegionMatchEventSource(event_source, flags))
     return false;
 
-  if (flags &
-      (HitTestRegionFlags::kHitTestMine | HitTestRegionFlags::kHitTestAsk)) {
+  if (flags & HitTestRegionFlags::kHitTestMine) {
     target->frame_sink_id = hit_test_data_[region_index].frame_sink_id;
     target->location_in_target = location_in_target;
     target->flags = flags;
--- a/components/viz/host/hit_test/hit_test_query_unittest.cc	2019-04-05 03:49:15.000000000 +0300
+++ b/components/viz/host/hit_test/hit_test_query_unittest.cc	2019-05-17 18:53:26.668000000 +0300
@@ -1090,73 +1090,6 @@
                                HitTestRegionFlags::kHitTestMouse);
 }
 
-// One embedder with nested OOPIFs.
-//
-//  +e-------------+
-//  |   +c---------|     Point   maps to
-//  | 1 |    2     |     -----   -------
-//  |   |          |       1        e
-//  |   |+b--------|       2        c
-//  |   ||         |       3        b
-//  |   ||   3     |
-//  +--------------+
-//
-TEST_F(HitTestQueryTest, NestedOOPIFs) {
-  FrameSinkId e_id = FrameSinkId(1, 1);
-  FrameSinkId c_id = FrameSinkId(2, 2);
-  FrameSinkId b_id = FrameSinkId(3, 3);
-  gfx::Rect e_bounds_in_e = gfx::Rect(0, 0, 600, 600);
-  gfx::Rect c_bounds_in_e = gfx::Rect(0, 0, 800, 800);
-  gfx::Rect b_bounds_in_c = gfx::Rect(0, 0, 800, 600);
-  gfx::Transform transform_e_to_e, transform_e_to_c, transform_c_to_b;
-  transform_e_to_c.Translate(-200, -100);
-  transform_c_to_b.Translate(0, -100);
-  active_data_.push_back(AggregatedHitTestRegion(
-      e_id,
-      HitTestRegionFlags::kHitTestMine | HitTestRegionFlags::kHitTestMouse,
-      e_bounds_in_e, transform_e_to_e, 2));  // e
-  active_data_.push_back(AggregatedHitTestRegion(
-      c_id,
-      HitTestRegionFlags::kHitTestChildSurface |
-          HitTestRegionFlags::kHitTestAsk | HitTestRegionFlags::kHitTestMouse,
-      c_bounds_in_e, transform_e_to_c, 1,
-      AsyncHitTestReasons::kOverlappedRegion));  // c
-  active_data_.push_back(AggregatedHitTestRegion(
-      b_id, HitTestRegionFlags::kHitTestAsk | HitTestRegionFlags::kHitTestMouse,
-      b_bounds_in_c, transform_c_to_b, 0,
-      AsyncHitTestReasons::kOverlappedRegion));  // b
-  SendHitTestData();
-
-  // All points are in e's coordinate system when we reach this case.
-  gfx::PointF point1(1, 1);
-  gfx::PointF point2(202, 102);
-  gfx::PointF point3(202, 202);
-
-  Target target1 =
-      hit_test_query().FindTargetForLocation(EventSource::MOUSE, point1);
-  EXPECT_EQ(target1.frame_sink_id, e_id);
-  EXPECT_EQ(target1.location_in_target, point1);
-  EXPECT_EQ(target1.flags, HitTestRegionFlags::kHitTestMine |
-                               HitTestRegionFlags::kHitTestMouse);
-
-  // c is the deepest OOPIF for point2, return c with ask flag.
-  Target target2 =
-      hit_test_query().FindTargetForLocation(EventSource::MOUSE, point2);
-  EXPECT_EQ(target2.frame_sink_id, c_id);
-  EXPECT_EQ(target2.location_in_target, gfx::PointF(2, 2));
-  EXPECT_EQ(target2.flags, HitTestRegionFlags::kHitTestChildSurface |
-                               HitTestRegionFlags::kHitTestAsk |
-                               HitTestRegionFlags::kHitTestMouse);
-
-  // b is the deepest OOPIF for point3, return b with ask flag.
-  Target target3 =
-      hit_test_query().FindTargetForLocation(EventSource::MOUSE, point3);
-  EXPECT_EQ(target3.frame_sink_id, b_id);
-  EXPECT_EQ(target3.location_in_target, gfx::PointF(2, 2));
-  EXPECT_EQ(target3.flags, HitTestRegionFlags::kHitTestAsk |
-                               HitTestRegionFlags::kHitTestMouse);
-}
-
 // Tests getting the transform from root to a given target.
 TEST_F(HitTestQueryTest, GetTransformToTarget) {
   FrameSinkId e_id = FrameSinkId(1, 1);
--- a/components/viz/service/frame_sinks/compositor_frame_sink_support.cc	2019-04-05 03:49:15.000000000 +0300
+++ b/components/viz/service/frame_sinks/compositor_frame_sink_support.cc	2019-05-17 18:53:26.700000000 +0300
@@ -75,6 +75,13 @@
   DCHECK(!added_frame_observer_);
 }
 
+CompositorFrameSinkSupport::PresentationFeedbackMap
+CompositorFrameSinkSupport::TakePresentationFeedbacks() {
+  PresentationFeedbackMap map;
+  map.swap(presentation_feedbacks_);
+  return map;
+}
+
 void CompositorFrameSinkSupport::SetUpHitTest(
     LatestLocalSurfaceIdLookupDelegate* local_surface_id_lookup_delegate) {
   DCHECK(is_root_);
--- a/components/viz/service/frame_sinks/compositor_frame_sink_support.h	2019-04-05 03:49:15.000000000 +0300
+++ b/components/viz/service/frame_sinks/compositor_frame_sink_support.h	2019-05-17 18:53:26.700000000 +0300
@@ -56,6 +56,8 @@
                                    const gfx::Size& frame_size_in_pixels,
                                    const gfx::Rect& damage_rect,
                                    base::TimeTicks expected_display_time)>;
+  using PresentationFeedbackMap =
+      base::flat_map<uint32_t, gfx::PresentationFeedback>;
 
   static const uint64_t kFrameIndexStart = 2;
 
@@ -80,11 +82,12 @@
 
   FrameSinkManagerImpl* frame_sink_manager() { return frame_sink_manager_; }
 
-  const base::flat_map<uint32_t, gfx::PresentationFeedback>&
-  presentation_feedbacks() {
+  const PresentationFeedbackMap& presentation_feedbacks() {
     return presentation_feedbacks_;
   }
 
+  PresentationFeedbackMap TakePresentationFeedbacks() WARN_UNUSED_RESULT;
+
   // Viz hit-test setup is only called when |is_root_| is true (except on
   // android webview).
   void SetUpHitTest(
@@ -304,7 +307,7 @@
   bool callback_received_receive_ack_ = true;
   uint32_t trace_sequence_ = 0;
 
-  base::flat_map<uint32_t, gfx::PresentationFeedback> presentation_feedbacks_;
+  PresentationFeedbackMap presentation_feedbacks_;
   uint32_t last_evicted_parent_sequence_number_ = 0;
 
   base::TimeTicks last_frame_time_;
