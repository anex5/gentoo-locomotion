--- a/content/browser/BUILD.gn	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/BUILD.gn	2019-02-20 20:44:04.520000000 +0300
@@ -198,6 +198,7 @@
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base",
     "//ui/base:ui_features",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/display/types",
--- a/content/browser/download/download_manager_impl.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/download/download_manager_impl.cc	2019-02-20 20:44:04.668000000 +0300
@@ -1296,15 +1296,6 @@
   }
 
   if (base::FeatureList::IsEnabled(network::features::kNetworkService)) {
-    // Ideally everywhere a blob: URL is downloaded a URLLoaderFactory for that
-    // blob URL is also passed, but since that isn't always the case, create
-    // a new factory if we don't have one already.
-    if (!blob_url_loader_factory && params->url().SchemeIsBlob()) {
-      blob_url_loader_factory =
-          ChromeBlobStorageContext::URLLoaderFactoryForUrl(browser_context_,
-                                                           params->url());
-    }
-
     auto* rfh = RenderFrameHost::FromID(params->render_process_host_id(),
                                         params->render_frame_host_routing_id());
     bool content_initiated = params->content_initiated();
--- a/content/browser/frame_host/cross_process_frame_connector.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/frame_host/cross_process_frame_connector.cc	2019-02-20 20:44:04.688000000 +0300
@@ -223,15 +223,15 @@
   // Transformations use physical pixels rather than DIP, so conversion
   // is necessary.
   *transformed_point =
-      gfx::ConvertPointToPixel(view_->GetDeviceScaleFactor(), point);
+      gfx::ConvertPointToPixel(view_->current_surface_scale_factor(), point);
   viz::SurfaceHittest hittest(nullptr,
                               GetFrameSinkManager()->surface_manager());
   if (!hittest.TransformPointToTargetSurface(original_surface, local_surface_id,
                                              transformed_point))
     return false;
 
-  *transformed_point =
-      gfx::ConvertPointToDIP(view_->GetDeviceScaleFactor(), *transformed_point);
+  *transformed_point = gfx::ConvertPointToDIP(
+      view_->current_surface_scale_factor(), *transformed_point);
   return true;
 }
 
--- a/content/browser/frame_host/render_widget_host_view_guest.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/frame_host/render_widget_host_view_guest.cc	2019-02-20 20:44:04.724000000 +0300
@@ -274,7 +274,8 @@
   if (original_surface == surface_id)
     return true;
 
-  *transformed_point = gfx::ConvertPointToPixel(GetDeviceScaleFactor(), point);
+  *transformed_point =
+      gfx::ConvertPointToPixel(current_surface_scale_factor(), point);
   viz::SurfaceHittest hittest(nullptr,
                               GetFrameSinkManager()->surface_manager());
   if (!hittest.TransformPointToTargetSurface(original_surface, surface_id,
@@ -282,8 +283,8 @@
     return false;
   }
 
-  *transformed_point =
-      gfx::ConvertPointToDIP(GetDeviceScaleFactor(), *transformed_point);
+  *transformed_point = gfx::ConvertPointToDIP(current_surface_scale_factor(),
+                                              *transformed_point);
   return true;
 }
 
--- a/content/browser/renderer_host/clipboard_host_impl.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/renderer_host/clipboard_host_impl.cc	2019-02-20 20:44:04.864000000 +0300
@@ -16,6 +16,7 @@
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
 #include "url/gurl.h"
@@ -65,23 +66,24 @@
   bool result = false;
   switch (format) {
     case blink::mojom::ClipboardFormat::kPlaintext:
-      result = clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextWFormatType(), clipboard_type) ||
+      result =
+          clipboard_->IsFormatAvailable(
+              ui::ClipboardFormatType::GetPlainTextWType(), clipboard_type) ||
                clipboard_->IsFormatAvailable(
-                   ui::Clipboard::GetPlainTextFormatType(), clipboard_type);
+              ui::ClipboardFormatType::GetPlainTextType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kHtml:
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetHtmlFormatType(),
-                                             clipboard_type);
+      result = clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetHtmlType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kSmartPaste:
       result = clipboard_->IsFormatAvailable(
-          ui::Clipboard::GetWebKitSmartPasteFormatType(), clipboard_type);
+          ui::ClipboardFormatType::GetWebKitSmartPasteType(), clipboard_type);
       break;
     case blink::mojom::ClipboardFormat::kBookmark:
 #if defined(OS_WIN) || defined(OS_MACOSX)
-      result = clipboard_->IsFormatAvailable(ui::Clipboard::GetUrlWFormatType(),
-                                             clipboard_type);
+      result = clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetUrlWType(), clipboard_type);
 #else
       result = false;
 #endif
@@ -93,11 +95,11 @@
 void ClipboardHostImpl::ReadText(ui::ClipboardType clipboard_type,
                                  ReadTextCallback callback) {
   base::string16 result;
-  if (clipboard_->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
-                                    clipboard_type)) {
+  if (clipboard_->IsFormatAvailable(
+          ui::ClipboardFormatType::GetPlainTextWType(), clipboard_type)) {
     clipboard_->ReadText(clipboard_type, &result);
   } else if (clipboard_->IsFormatAvailable(
-                 ui::Clipboard::GetPlainTextFormatType(), clipboard_type)) {
+                 ui::ClipboardFormatType::GetPlainTextType(), clipboard_type)) {
     std::string ascii;
     clipboard_->ReadAsciiText(clipboard_type, &ascii);
     result = base::ASCIIToUTF16(ascii);
@@ -159,7 +161,7 @@
   base::Pickle pickle;
   ui::WriteCustomDataToPickle(data, &pickle);
   clipboard_writer_->WritePickledData(
-      pickle, ui::Clipboard::GetWebCustomDataFormatType());
+      pickle, ui::ClipboardFormatType::GetWebCustomDataType());
 }
 
 void ClipboardHostImpl::WriteBookmark(ui::ClipboardType,
--- a/content/browser/renderer_host/clipboard_host_impl_unittest.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/renderer_host/clipboard_host_impl_unittest.cc	2019-02-20 20:44:04.864000000 +0300
@@ -15,7 +15,7 @@
 #include "mojo/public/cpp/system/message_pipe.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "third_party/skia/include/core/SkBitmap.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/gfx/skia_util.h"
 
 namespace content {
@@ -55,9 +55,10 @@
   EXPECT_NE(sequence_number, system_clipboard()->GetSequenceNumber(
                                  ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_FALSE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetPlainTextFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::ClipboardFormatType::GetPlainTextType(),
+      ui::CLIPBOARD_TYPE_COPY_PASTE));
   EXPECT_TRUE(system_clipboard()->IsFormatAvailable(
-      ui::Clipboard::GetBitmapFormatType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
+      ui::ClipboardFormatType::GetBitmapType(), ui::CLIPBOARD_TYPE_COPY_PASTE));
 
   SkBitmap actual =
       system_clipboard()->ReadImage(ui::CLIPBOARD_TYPE_COPY_PASTE);
--- a/content/browser/renderer_host/render_widget_host_impl.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/renderer_host/render_widget_host_impl.cc	2019-02-20 20:44:04.936000000 +0300
@@ -100,7 +100,7 @@
 #include "skia/ext/platform_canvas.h"
 #include "storage/browser/fileapi/isolated_context.h"
 #include "third_party/blink/public/web/web_ime_text_span.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/display/display_switches.h"
 #include "ui/display/screen.h"
@@ -223,20 +223,17 @@
   std::vector<DropData::Metadata> metadata;
   if (!drop_data.text.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeText)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeText)));
   }
 
   if (drop_data.url.is_valid()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeURIList)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeURIList)));
   }
 
   if (!drop_data.html.is_null()) {
     metadata.push_back(DropData::Metadata::CreateForMimeType(
-        DropData::Kind::STRING,
-        base::ASCIIToUTF16(ui::Clipboard::kMimeTypeHTML)));
+        DropData::Kind::STRING, base::ASCIIToUTF16(ui::kMimeTypeHTML)));
   }
 
   // On Aura, filenames are available before drop.
--- a/content/browser/renderer_host/render_widget_host_view_child_frame.h	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/renderer_host/render_widget_host_view_child_frame.h	2019-02-20 20:44:04.948000000 +0300
@@ -212,6 +212,11 @@
     return frame_connector_;
   }
 
+  // Returns the current surface scale factor.
+  float current_surface_scale_factor() {
+    return last_activated_surface_info_.device_scale_factor();
+  }
+
   // Returns the view into which this view is directly embedded. This can
   // return nullptr when this view's associated child frame is not connected
   // to the frame tree.
--- a/content/browser/web_contents/web_contents_view_android.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/web_contents/web_contents_view_android.cc	2019-02-20 20:44:05.052000000 +0300
@@ -28,6 +28,7 @@
 #include "jni/DragEvent_jni.h"
 #include "ui/android/overscroll_refresh_handler.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/display/screen.h"
 #include "ui/events/android/drag_event_android.h"
 #include "ui/events/android/gesture_event_android.h"
@@ -413,9 +414,9 @@
       base::string16 drop_content =
           ConvertJavaStringToUTF16(env, event.GetJavaContent());
       for (const base::string16& mime_type : event.mime_types()) {
-        if (base::EqualsASCII(mime_type, ui::Clipboard::kMimeTypeURIList)) {
+        if (base::EqualsASCII(mime_type, ui::kMimeTypeURIList)) {
           drop_data.url = GURL(drop_content);
-        } else if (base::EqualsASCII(mime_type, ui::Clipboard::kMimeTypeText)) {
+        } else if (base::EqualsASCII(mime_type, ui::kMimeTypeText)) {
           drop_data.text = base::NullableString16(drop_content, false);
         } else {
           drop_data.html = base::NullableString16(drop_content, false);
--- a/content/browser/web_contents/web_contents_view_aura.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/web_contents/web_contents_view_aura.cc	2019-02-20 20:44:05.052000000 +0300
@@ -228,10 +228,10 @@
 }
 #endif  // defined(OS_WIN)
 
-// Returns the FormatType to store file system files.
-const ui::Clipboard::FormatType& GetFileSystemFileFormatType() {
-  static base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"));
+// Returns the ClipboardFormatType to store file system files.
+const ui::ClipboardFormatType& GetFileSystemFileFormatType() {
+  static base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"));
   return *format;
 }
 
@@ -275,7 +274,7 @@
   if (!drop_data.custom_data.empty()) {
     base::Pickle pickle;
     ui::WriteCustomDataToPickle(drop_data.custom_data, &pickle);
-    provider->SetPickledData(ui::Clipboard::GetWebCustomDataFormatType(),
+    provider->SetPickledData(ui::ClipboardFormatType::GetWebCustomDataType(),
                              pickle);
   }
 }
@@ -315,7 +314,8 @@
           pickle, &file_system_files))
     drop_data->file_system_files = file_system_files;
 
-  if (data.GetPickledData(ui::Clipboard::GetWebCustomDataFormatType(), &pickle))
+  if (data.GetPickledData(ui::ClipboardFormatType::GetWebCustomDataType(),
+                          &pickle))
     ui::ReadCustomDataIntoMap(
         pickle.data(), pickle.size(), &drop_data->custom_data);
 }
--- a/content/browser/web_contents/web_drag_dest_mac.mm	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/web_contents/web_drag_dest_mac.mm	2019-02-20 20:44:05.060000000 +0300
@@ -18,6 +18,7 @@
 #include "content/public/common/drop_data.h"
 #include "third_party/blink/public/platform/web_input_event.h"
 #import "third_party/mozilla/NSPasteboard+Utils.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/cocoa/cocoa_base_utils.h"
--- a/content/browser/web_contents/web_drag_source_mac.mm	2019-02-14 01:14:20.000000000 +0300
+++ b/content/browser/web_contents/web_drag_source_mac.mm	2019-02-20 20:44:05.060000000 +0300
@@ -31,6 +31,7 @@
 #include "net/base/escape.h"
 #include "net/base/filename_util.h"
 #include "net/base/mime_util.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/clipboard/custom_data_helper.h"
 #include "ui/base/cocoa/cocoa_base_utils.h"
--- a/content/public/common/network_service_util.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/public/common/network_service_util.cc	2019-02-20 20:44:05.280000000 +0300
@@ -27,10 +27,6 @@
     1077};
 #endif
 
-// Indicates whether the network service is forced to be running in the browser
-// process.
-bool g_force_in_process_network_service = false;
-
 }  // namespace
 
 bool IsOutOfProcessNetworkService() {
@@ -42,8 +38,7 @@
   if (!base::FeatureList::IsEnabled(network::features::kNetworkService))
     return false;
 
-  if (g_force_in_process_network_service ||
-      base::FeatureList::IsEnabled(features::kNetworkServiceInProcess) ||
+  if (base::FeatureList::IsEnabled(features::kNetworkServiceInProcess) ||
       base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kSingleProcess)) {
     return true;
@@ -56,8 +51,4 @@
   return false;
 }
 
-void ForceInProcessNetworkService(bool is_forced) {
-  g_force_in_process_network_service = is_forced;
-}
-
 }  // namespace content
--- a/content/public/common/network_service_util.h	2019-02-14 01:14:20.000000000 +0300
+++ b/content/public/common/network_service_util.h	2019-02-20 20:44:05.280000000 +0300
@@ -17,9 +17,6 @@
 // browser process.
 CONTENT_EXPORT bool IsInProcessNetworkService();
 
-// Sets the flag of whether the network service is forced to be running in the
-// browser process. The flag will be checked in |IsInProcessNetworkService()|.
-CONTENT_EXPORT void ForceInProcessNetworkService(bool is_forced);
 }  // namespace content
 
 #endif  // CONTENT_PUBLIC_COMMON_NETWORK_SERVICE_UTIL_H_
--- a/content/public/test/browser_test_utils.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/public/test/browser_test_utils.cc	2019-02-20 20:44:05.308000000 +0300
@@ -114,8 +114,8 @@
 #include "third_party/blink/public/mojom/filesystem/file_system.mojom.h"
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/base/resource/resource_bundle.h"
-#include "ui/base/test/test_clipboard.h"
 #include "ui/compositor/test/draw_waiter_for_test.h"
 #include "ui/events/base_event_utils.h"
 #include "ui/events/gesture_detection/gesture_configuration.h"
--- a/content/renderer/BUILD.gn	2019-02-14 01:14:20.000000000 +0300
+++ b/content/renderer/BUILD.gn	2019-02-20 20:44:05.344000000 +0300
@@ -742,6 +742,7 @@
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:dom_keycode_converter",
--- a/content/renderer/dom_storage/local_storage_cached_areas.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/renderer/dom_storage/local_storage_cached_areas.cc	2019-02-20 20:44:05.356000000 +0300
@@ -134,6 +134,7 @@
     LOCAL_HISTOGRAM_ENUMERATION("SessionStorage.RendererAreaCacheHit", metric);
 
   if (!result) {
+    ClearAreasIfNeeded();
     if (!dom_namespace) {
       dom_namespace = &cached_namespaces_[namespace_id];
     }
@@ -154,7 +155,6 @@
           this, scheduler);
     }
     dom_namespace->cached_areas.emplace(origin, result);
-    ClearAreasIfNeeded();
   }
   return result;
 }
--- a/content/renderer/drop_data_builder.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/renderer/drop_data_builder.cc	2019-02-20 20:44:05.356000000 +0300
@@ -13,7 +13,7 @@
 #include "third_party/blink/public/platform/web_drag_data.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/public/platform/web_vector.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 
 using blink::WebDragData;
 using blink::WebString;
@@ -33,20 +33,20 @@
     switch (item.storage_type) {
       case WebDragData::Item::kStorageTypeString: {
         base::string16 str_type(item.string_type.Utf16());
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeText)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeText)) {
           result.text = WebString::ToNullableString16(item.string_data);
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeURIList)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeURIList)) {
           result.url = blink::WebStringToGURL(item.string_data);
           result.url_title = item.title.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeDownloadURL)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeDownloadURL)) {
           result.download_metadata = item.string_data.Utf16();
           break;
         }
-        if (base::EqualsASCII(str_type, ui::Clipboard::kMimeTypeHTML)) {
+        if (base::EqualsASCII(str_type, ui::kMimeTypeHTML)) {
           result.html = WebString::ToNullableString16(item.string_data);
           result.html_base_url = item.base_url;
           break;
--- a/content/renderer/render_widget.cc	2019-02-14 01:14:20.000000000 +0300
+++ b/content/renderer/render_widget.cc	2019-02-20 20:44:05.496000000 +0300
@@ -107,7 +107,7 @@
 #include "third_party/blink/public/web/web_view.h"
 #include "third_party/blink/public/web/web_widget.h"
 #include "third_party/skia/include/core/SkShader.h"
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/base/ui_base_switches.h"
 #include "ui/events/base_event_utils.h"
@@ -227,8 +227,7 @@
       // DropData::MetaData --> WebDragData-->DropData. In the end, DropData
       // will contain an empty URL (which means no URL is dragged) if the URL in
       // WebDragData is empty.
-      if (base::EqualsASCII(meta_data_item.mime_type,
-                            ui::Clipboard::kMimeTypeURIList)) {
+      if (base::EqualsASCII(meta_data_item.mime_type, ui::kMimeTypeURIList)) {
         item.string_data = WebString::FromUTF8("about:dragdrop-placeholder");
       }
       item_list.push_back(item);
@@ -273,7 +272,7 @@
   if (!drop_data.text.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeText);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeText);
     item.string_data = WebString::FromUTF16(drop_data.text.string());
     item_list.push_back(item);
   }
@@ -281,7 +280,7 @@
   if (!drop_data.url.is_empty()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeURIList);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeURIList);
     item.string_data = WebString::FromUTF8(drop_data.url.spec());
     item.title = WebString::FromUTF16(drop_data.url_title);
     item_list.push_back(item);
@@ -290,7 +289,7 @@
   if (!drop_data.html.is_null()) {
     WebDragData::Item item;
     item.storage_type = WebDragData::Item::kStorageTypeString;
-    item.string_type = WebString::FromUTF8(ui::Clipboard::kMimeTypeHTML);
+    item.string_type = WebString::FromUTF8(ui::kMimeTypeHTML);
     item.string_data = WebString::FromUTF16(drop_data.html.string());
     item.base_url = drop_data.html_base_url;
     item_list.push_back(item);
--- a/content/shell/BUILD.gn	2019-02-14 01:14:20.000000000 +0300
+++ b/content/shell/BUILD.gn	2019-02-20 20:44:05.516000000 +0300
@@ -324,6 +324,7 @@
     "//third_party/blink/public:test_support",
     "//third_party/icu",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display",
     "//ui/events:events_base",
--- a/content/test/BUILD.gn	2019-02-14 01:14:20.000000000 +0300
+++ b/content/test/BUILD.gn	2019-02-20 20:44:05.692000000 +0300
@@ -379,6 +379,8 @@
     "//ui/base",
     "//ui/base:test_support",
     "//ui/base:ui_data_pack",
+    "//ui/base/clipboard",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
@@ -1014,6 +1016,7 @@
     "//ui/accessibility",
     "//ui/accessibility:ax_enums_mojo",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/compositor",
     "//ui/display",
@@ -1953,6 +1956,7 @@
     "//third_party/widevine/cdm:headers",
     "//ui/accessibility",
     "//ui/base:test_support",
+    "//ui/base/clipboard:clipboard_test_support",
     "//ui/base/ime",
     "//ui/compositor:test_support",
     "//ui/display",
