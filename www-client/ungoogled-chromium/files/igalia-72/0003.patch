--- a/components/arc/BUILD.gn	2019-02-14 01:14:18.000000000 +0300
+++ b/components/arc/BUILD.gn	2019-02-20 20:44:01.332000000 +0300
@@ -105,6 +105,7 @@
     "//third_party/re2:re2",
     "//ui/aura",
     "//ui/base:base",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/display/manager",
     "//ui/events",
@@ -332,6 +333,7 @@
     "//ui/aura",
     "//ui/aura:test_support",
     "//ui/base:test_support",
+    "//ui/base/clipboard",
     "//ui/base/ime",
     "//ui/events",
     "//ui/events:dom_keycode_converter",
--- a/components/arc/clipboard/arc_clipboard_bridge.cc	2019-02-14 01:14:18.000000000 +0300
+++ b/components/arc/clipboard/arc_clipboard_bridge.cc	2019-02-20 20:44:01.352000000 +0300
@@ -14,6 +14,7 @@
 #include "components/arc/arc_bridge_service.h"
 #include "components/arc/arc_browser_context_keyed_service_factory_base.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
 #include "ui/base/clipboard/clipboard_monitor.h"
 #include "ui/base/clipboard/scoped_clipboard_writer.h"
 
@@ -59,7 +60,7 @@
   std::string text(base::UTF16ToUTF8(
       markup16.substr(fragment_start, fragment_end - fragment_start)));
 
-  std::string mime_type(ui::Clipboard::kMimeTypeHTML);
+  std::string mime_type(ui::kMimeTypeHTML);
 
   // Send non-sanitized HTML content. Instance should sanitize it if needed.
   return mojom::ClipRepresentation::New(mime_type,
@@ -72,7 +73,7 @@
   // Unused. Title is not used at Instance.
   base::string16 title;
   std::string text;
-  std::string mime_type(ui::Clipboard::kMimeTypeText);
+  std::string mime_type(ui::kMimeTypeText);
 
   // Both Bookmark and AsciiText are represented by text/plain. If both are
   // present, only use Bookmark.
@@ -97,9 +98,9 @@
   // Populate ClipData with ClipRepresentation objects.
   for (const auto& mime_type16 : mime_types) {
     const std::string mime_type(base::UTF16ToUTF8(mime_type16));
-    if (mime_type == ui::Clipboard::kMimeTypeHTML) {
+    if (mime_type == ui::kMimeTypeHTML) {
       clip_data->representations.push_back(CreateHTML(clipboard));
-    } else if (mime_type == ui::Clipboard::kMimeTypeText) {
+    } else if (mime_type == ui::kMimeTypeText) {
       clip_data->representations.push_back(CreatePlainText(clipboard));
     } else {
       // TODO(ricardoq): Add other supported mime_types here.
@@ -218,9 +219,9 @@
 
   for (const auto& repr : clip_data->representations) {
     const std::string& mime_type(repr->mime_type);
-    if (mime_type == ui::Clipboard::kMimeTypeHTML) {
+    if (mime_type == ui::kMimeTypeHTML) {
       ProcessHTML(repr.get(), &writer);
-    } else if (mime_type == ui::Clipboard::kMimeTypeText) {
+    } else if (mime_type == ui::kMimeTypeText) {
       ProcessPlainText(repr.get(), &writer);
     }
   }
--- a/components/bookmarks/browser/bookmark_node_data.cc	2019-02-14 01:14:18.000000000 +0300
+++ b/components/bookmarks/browser/bookmark_node_data.cc	2019-02-20 20:44:01.580000000 +0300
@@ -123,7 +123,7 @@
 // static
 bool BookmarkNodeData::ClipboardContainsBookmarks() {
   return ui::Clipboard::GetForCurrentThread()->IsFormatAvailable(
-      ui::Clipboard::GetFormatType(kClipboardFormatString),
+      ui::ClipboardFormatType::GetType(kClipboardFormatString),
       ui::CLIPBOARD_TYPE_COPY_PASTE);
 }
 #endif
@@ -208,15 +208,15 @@
 
   base::Pickle pickle;
   WriteToPickle(base::FilePath(), &pickle);
-  scw.WritePickledData(pickle,
-                       ui::Clipboard::GetFormatType(kClipboardFormatString));
+  scw.WritePickledData(
+      pickle, ui::ClipboardFormatType::GetType(kClipboardFormatString));
 }
 
 bool BookmarkNodeData::ReadFromClipboard(ui::ClipboardType type) {
   DCHECK_EQ(type, ui::CLIPBOARD_TYPE_COPY_PASTE);
   std::string data;
   ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
-  clipboard->ReadData(ui::Clipboard::GetFormatType(kClipboardFormatString),
+  clipboard->ReadData(ui::ClipboardFormatType::GetType(kClipboardFormatString),
                       &data);
 
   if (!data.empty()) {
--- a/components/bookmarks/browser/bookmark_node_data.h	2019-02-14 01:14:18.000000000 +0300
+++ b/components/bookmarks/browser/bookmark_node_data.h	2019-02-20 20:44:01.580000000 +0300
@@ -19,7 +19,7 @@
 #include "url/gurl.h"
 
 #if defined(TOOLKIT_VIEWS)
-#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #endif
 
 namespace base {
@@ -115,7 +115,7 @@
   ~BookmarkNodeData();
 
 #if defined(TOOLKIT_VIEWS)
-  static const ui::Clipboard::FormatType& GetBookmarkFormatType();
+  static const ui::ClipboardFormatType& GetBookmarkFormatType();
 #endif
 
   static bool ClipboardContainsBookmarks();
--- a/components/bookmarks/browser/bookmark_node_data_mac.mm	2019-02-14 01:14:18.000000000 +0300
+++ b/components/bookmarks/browser/bookmark_node_data_mac.mm	2019-02-20 20:44:01.580000000 +0300
@@ -16,9 +16,9 @@
 #if defined(TOOLKIT_VIEWS)
 
 // static
-const ui::Clipboard::FormatType& BookmarkNodeData::GetBookmarkFormatType() {
-  static const base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType(
+const ui::ClipboardFormatType& BookmarkNodeData::GetBookmarkFormatType() {
+  static const base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType(
           base::SysNSStringToUTF8(kUTTypeChromiumBookmarkDictionaryList)));
 
   return *format;
--- a/components/bookmarks/browser/bookmark_node_data_views.cc	2019-02-14 01:14:18.000000000 +0300
+++ b/components/bookmarks/browser/bookmark_node_data_views.cc	2019-02-20 20:44:01.580000000 +0300
@@ -9,15 +9,17 @@
 #include "base/pickle.h"
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "url/url_constants.h"
 
 namespace bookmarks {
 
 // static
-const ui::Clipboard::FormatType& BookmarkNodeData::GetBookmarkFormatType() {
-  static const base::NoDestructor<ui::Clipboard::FormatType> format(
-      ui::Clipboard::GetFormatType(BookmarkNodeData::kClipboardFormatString));
+const ui::ClipboardFormatType& BookmarkNodeData::GetBookmarkFormatType() {
+  static const base::NoDestructor<ui::ClipboardFormatType> format(
+      ui::ClipboardFormatType::GetType(
+          BookmarkNodeData::kClipboardFormatString));
 
   return *format;
 }
--- a/components/bookmarks/browser/BUILD.gn	2019-02-14 01:14:18.000000000 +0300
+++ b/components/bookmarks/browser/BUILD.gn	2019-02-20 20:44:01.580000000 +0300
@@ -68,6 +68,7 @@
     "//net",
     "//third_party/icu",
     "//ui/base",
+    "//ui/base/clipboard",
     "//ui/gfx",
     "//url",
   ]
@@ -135,6 +136,7 @@
     "//components/prefs:test_support",
     "//testing/gtest",
     "//ui/base",
+    "//ui/base/clipboard",
     "//url",
   ]
 }
--- a/components/cronet/tools/generate_javadoc.py	2019-02-14 01:14:18.000000000 +0300
+++ b/components/cronet/tools/generate_javadoc.py	2019-02-20 20:44:01.764000000 +0300
@@ -114,9 +114,7 @@
     assert options.zip_file
     deps = []
     for root, _, filenames in os.walk(options.input_dir):
-      # Ignore .pyc files here, it might be re-generated during build.
-      deps.extend(os.path.join(root, f) for f in filenames
-                  if not f.endswith('.pyc'))
+      deps.extend(os.path.join(root, f) for f in filenames)
     build_utils.WriteDepfile(options.depfile, options.zip_file, deps)
   # Clean up temporary output directory.
   build_utils.DeleteDirectory(unzipped_jar_path)
--- a/components/exo/data_offer.cc	2019-02-14 01:14:19.000000000 +0300
+++ b/components/exo/data_offer.cc	2019-02-20 20:44:01.992000000 +0300
@@ -14,6 +14,8 @@
 #include "components/exo/data_offer_observer.h"
 #include "components/exo/file_helper.h"
 #include "ui/base/clipboard/clipboard.h"
+#include "ui/base/clipboard/clipboard_constants.h"
+#include "ui/base/clipboard/clipboard_types.h"
 #include "ui/base/dragdrop/file_info.h"
 #include "ui/base/dragdrop/os_exchange_data.h"
 #include "url/gurl.h"
@@ -76,10 +78,10 @@
   return !url_list_string->empty();
 }
 
-ui::Clipboard::FormatType GetClipboardFormatType() {
+ui::ClipboardFormatType GetClipboardFormatType() {
   static const char kFormatString[] = "chromium/x-file-system-files";
-  static base::NoDestructor<ui::Clipboard::FormatType> format_type(
-      ui::Clipboard::GetFormatType(kFormatString));
+  static base::NoDestructor<ui::ClipboardFormatType> format_type(
+      ui::ClipboardFormatType::GetType(kFormatString));
   return *format_type;
 }
 
@@ -166,8 +168,7 @@
 
   base::string16 string_content;
   if (data.HasString() && data.GetString(&string_content)) {
-    const std::string text_mime_type =
-        std::string(ui::Clipboard::kMimeTypeText);
+    const std::string text_mime_type = std::string(ui::kMimeTypeText);
     data_.emplace(text_mime_type,
                   RefCountedString16::TakeString(std::move(string_content)));
     delegate_->OnOffer(text_mime_type);
@@ -178,7 +179,7 @@
 void DataOffer::SetClipboardData(FileHelper* file_helper,
                                  const ui::Clipboard& data) {
   DCHECK_EQ(0u, data_.size());
-  if (data.IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
+  if (data.IsFormatAvailable(ui::ClipboardFormatType::GetPlainTextWType(),
                              ui::CLIPBOARD_TYPE_COPY_PASTE)) {
     base::string16 content;
     data.ReadText(ui::CLIPBOARD_TYPE_COPY_PASTE, &content);
--- a/components/exo/data_offer_unittest.cc	2019-02-14 01:14:19.000000000 +0300
+++ b/components/exo/data_offer_unittest.cc	2019-02-20 20:44:01.992000000 +0300
@@ -184,7 +184,7 @@
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   EXPECT_EQ(1u, delegate.mime_types().size());
@@ -242,7 +242,7 @@
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   // Run callback with a resolved URL.
@@ -278,7 +278,7 @@
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   base::ScopedFD read_pipe1;
@@ -326,7 +326,7 @@
   pickle.WriteInt64(1000);   // file size
   pickle.WriteString("id");  // filesystem id
   data.SetPickledData(
-      ui::Clipboard::GetFormatType("chromium/x-file-system-files"), pickle);
+      ui::ClipboardFormatType::GetType("chromium/x-file-system-files"), pickle);
   data_offer.SetDropData(&file_helper, data);
 
   base::ScopedFD read_pipe;
--- a/components/open_from_clipboard/BUILD.gn	2019-02-14 01:14:19.000000000 +0300
+++ b/components/open_from_clipboard/BUILD.gn	2019-02-20 20:44:02.492000000 +0300
@@ -10,13 +10,6 @@
     "clipboard_recent_content_ios.mm",
   ]
 
-  if (!is_ios) {
-    sources += [
-      "clipboard_recent_content_generic.cc",
-      "clipboard_recent_content_generic.h",
-    ]
-  }
-
   deps = [
     ":open_from_clipboard_impl",
     "//base",
@@ -25,6 +18,14 @@
     "//ui/base:base",
     "//url",
   ]
+
+  if (!is_ios) {
+    sources += [
+      "clipboard_recent_content_generic.cc",
+      "clipboard_recent_content_generic.h",
+    ]
+    deps += [ "//ui/base/clipboard" ]
+  }
 }
 
 # Helper classes used by "open_from_clipboard" target. These classes must have
@@ -63,10 +64,6 @@
     "clipboard_recent_content_ios_unittest.mm",
   ]
 
-  if (!is_ios) {
-    sources += [ "clipboard_recent_content_generic_unittest.cc" ]
-  }
-
   deps = [
     ":open_from_clipboard",
     ":open_from_clipboard_impl",
@@ -75,4 +72,9 @@
     "//ui/base:test_support",
     "//url",
   ]
+
+  if (!is_ios) {
+    sources += [ "clipboard_recent_content_generic_unittest.cc" ]
+    deps += [ "//ui/base/clipboard:clipboard_test_support" ]
+  }
 }
--- a/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc	2019-02-14 01:14:19.000000000 +0300
+++ b/components/open_from_clipboard/clipboard_recent_content_generic_unittest.cc	2019-02-20 20:44:02.492000000 +0300
@@ -10,7 +10,7 @@
 #include "base/strings/string16.h"
 #include "base/time/time.h"
 #include "testing/gtest/include/gtest/gtest.h"
-#include "ui/base/test/test_clipboard.h"
+#include "ui/base/clipboard/test/test_clipboard.h"
 #include "url/gurl.h"
 
 class ClipboardRecentContentGenericTest : public testing::Test {
