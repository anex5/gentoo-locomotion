--- a/chrome/browser/chrome_browser_main_linux.cc
+++ b/chrome/browser/chrome_browser_main_linux.cc
@@ -95,7 +95,7 @@ void ChromeBrowserMainPartsLinux::PostProfileInit() {
 }

 void ChromeBrowserMainPartsLinux::PostMainMessageLoopStart() {
-#if !BUILDFLAG(IS_CHROMEOS_ASH)
+#if !BUILDFLAG(IS_CHROMEOS_ASH) && defined(USE_DBUS)
   bluez::BluezDBusManager::Initialize(nullptr /* system_bus */);
 #endif

@@ -104,7 +104,7 @@ void ChromeBrowserMainPartsLinux::PostMainMessageLoopStart() {
 }
 
 void ChromeBrowserMainPartsLinux::PostDestroyThreads() {
-#if !BUILDFLAG(IS_CHROMEOS_ASH)
+#if !BUILDFLAG(IS_CHROMEOS_ASH) && defined(USE_DBUS)
   bluez::BluezDBusManager::Shutdown();
   bluez::BluezDBusThreadManager::Shutdown();
 #endif
--- a/device/bluetooth/bluetooth_adapter_factory.cc
+++ b/device/bluetooth/bluetooth_adapter_factory.cc
@@ -46,7 +46,7 @@ bool BluetoothAdapterFactory::IsBluetoothSupported() {
   if (Get()->adapter_)
     return true;
 #if defined(OS_ANDROID) || defined(OS_WIN) || defined(OS_LINUX) || \
-    defined(OS_CHROMEOS) || defined(OS_MAC)
+    defined(OS_CHROMEOS) || defined(OS_MAC) && defined(USE_DBUS) 
   return true;
 #else
   return false;
@@ -68,7 +68,7 @@ bool BluetoothAdapterFactory::IsLowEnergySupported() {
   return base::win::GetVersion() >= base::win::Version::WIN10;
 #elif defined(OS_MAC)
   return true;
-#elif (defined(OS_LINUX) || defined(OS_CHROMEOS))
+#elif (defined(OS_LINUX) || defined(OS_CHROMEOS) && defined(USE_DBUS))
   return true;
 #else
   return false;
--- a/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
+++ b/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
@@ -1326,7 +1326,7 @@ void BluetoothLowEnergyCreateServiceFunction::DoWork() {
 // TODO: Ideally this should be handled by our feature system, so that this
 // code doesn't even compile on OSes it isn't being used on, but currently this
 // is not possible.
-#if !defined(OS_WIN)
+#if !defined(OS_WIN) && (!defined(OS_LINUX) || defined(USE_DBUS))
   base::WeakPtr<device::BluetoothLocalGattService> service =
       device::BluetoothLocalGattService::Create(
           event_router_->adapter(),
@@ -1355,6 +1355,7 @@ bool BluetoothLowEnergyCreateCharacteristicFunction::ParseParams() {
 }
 
 void BluetoothLowEnergyCreateCharacteristicFunction::DoWork() {
+#if !defined(OS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattService* service =
       event_router_->adapter()->GetGattService(params_->service_id);
   if (!service) {
@@ -1375,6 +1376,9 @@ void BluetoothLowEnergyCreateCharacteristicFunction::DoWork() {
 
   Respond(ArgumentList(apibtle::CreateCharacteristic::Results::Create(
       characteristic->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // createDescriptor:
@@ -1391,6 +1395,7 @@ bool BluetoothLowEnergyCreateDescriptorFunction::ParseParams() {
 }
 
 void BluetoothLowEnergyCreateDescriptorFunction::DoWork() {
+#if !defined(OS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattCharacteristic* characteristic =
       event_router_->GetLocalCharacteristic(params_->characteristic_id);
   if (!characteristic) {
@@ -1406,6 +1411,9 @@ void BluetoothLowEnergyCreateDescriptorFunction::DoWork() {
 
   Respond(ArgumentList(
       apibtle::CreateDescriptor::Results::Create(descriptor->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // registerService:
--- a/services/device/battery/battery_status_manager_default.cc
+++ b/services/device/battery/battery_status_manager_default.cc
@@ -22,11 +22,10 @@ class BatteryStatusManagerDefault : public BatteryStatusManager {
  private:
   // BatteryStatusManager:
   bool StartListeningBatteryChange() override {
-    NOTIMPLEMENTED();
     return false;
   }
 
-  void StopListeningBatteryChange() override { NOTIMPLEMENTED(); }
+  void StopListeningBatteryChange() override { }
 
   DISALLOW_COPY_AND_ASSIGN(BatteryStatusManagerDefault);
 };
--- a/services/device/wake_lock/power_save_blocker/BUILD.gn
+++ b/services/device/wake_lock/power_save_blocker/BUILD.gn
@@ -62,6 +62,9 @@ source_set("power_save_blocker") {
   if (is_chromeos || !use_x11 || !use_dbus) {
     sources -= [ "power_save_blocker_x11.cc" ]
   }
+  if (!is_chromeos && use_x11 && !use_dbus) {
+    sources += [ "power_save_blocker_ozone.cc" ]
+  }
 
   if (is_android) {
     deps += [ ":jni_headers" ]

--- a/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
+++ b/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
@@ -201,7 +201,7 @@ void RecordStartupMetrics() {
                         base::TimeTicks::IsHighResolution());
 #endif  // defined(OS_WIN)

-  bluetooth_utility::ReportBluetoothAvailability();
+  // bluetooth_utility::ReportBluetoothAvailability();

   // Record whether Chrome is the default browser or not.
   shell_integration::DefaultWebClientState default_state =
--- a/chrome/browser/metrics/bluetooth_available_utility.cc
+++ b/chrome/browser/metrics/bluetooth_available_utility.cc
@@ -13,7 +13,7 @@
 #include "device/bluetooth/bluetooth_adapter.h"
 #include "device/bluetooth/bluetooth_adapter_factory.h"

-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(USE_DBUS) && defined(OS_LINUX) || defined(OS_CHROMEOS)
 #include "device/bluetooth/dbus/bluez_dbus_manager.h"
 #endif  // defined(OS_LINUX) || defined(OS_CHROMEOS)
