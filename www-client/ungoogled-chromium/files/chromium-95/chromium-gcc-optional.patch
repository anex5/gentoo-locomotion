--- chromium-75.0.3770.90/third_party/webrtc/video/video_quality_observer.cc.gcc8	2019-06-13 09:15:05.000000000 +0200
+++ chromium-75.0.3770.90/third_party/webrtc/video/video_quality_observer.cc	2019-06-16 14:22:53.563078943 +0200
@@ -165,9 +165,11 @@ void VideoQualityObserver::OnRenderedFra
         const absl::optional<int64_t> avg_interframe_delay =
             render_interframe_delays_.GetAverageRoundedDown();
         RTC_DCHECK(avg_interframe_delay);
-        was_freeze = interframe_delay_ms >=
-                     std::max(3 * *avg_interframe_delay,
-                              *avg_interframe_delay + kMinIncreaseForFreezeMs);
+        if (avg_interframe_delay) {
+          was_freeze = interframe_delay_ms >=
+                       std::max(3 * *avg_interframe_delay,
+                                *avg_interframe_delay + kMinIncreaseForFreezeMs);
+        }
       }
 
       if (was_freeze) {
--- chromium-87.0.4280.40/chrome/browser/ui/webui/signin/profile_picker_handler.cc.gcc10	2020-10-29 23:25:30.000000000 +0100
+++ chromium-87.0.4280.40/chrome/browser/ui/webui/signin/profile_picker_handler.cc	2020-11-01 16:05:38.738228979 +0100
@@ -311,6 +311,8 @@ void ProfilePickerHandler::HandleGetProf
   const base::Value& user_theme_choice = args->GetList()[1];
   int color_id = user_theme_choice.FindIntKey("colorId").value();
   absl::optional<SkColor> color = user_theme_choice.FindDoubleKey("color");
+  if (!color.has_value())
+    return;
   int avatar_icon_size =
       kProfileCreationAvatarSize * web_ui()->GetDeviceScaleFactor();
   base::Value dict;
