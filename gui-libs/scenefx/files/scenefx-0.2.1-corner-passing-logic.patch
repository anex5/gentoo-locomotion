From 1775286a04a3c60d6b15221693586ac8174a0b88 Mon Sep 17 00:00:00 2001
From: William McKinnon <contact@willmckinnon.com>
Date: Mon, 24 Feb 2025 18:34:58 -0500
Subject: [PATCH] simplified individual corner passing logic (#109)

---
 include/render/fx_renderer/shaders.h          |  58 ++++-----
 render/fx_renderer/fx_pass.c                  | 113 +++++++++---------
 .../fx_renderer/gles2/shaders/box_shadow.frag |  24 ++--
 render/fx_renderer/gles2/shaders/quad.frag    |  22 ++--
 .../gles2/shaders/quad_grad_round.frag        |  19 ++-
 .../fx_renderer/gles2/shaders/quad_round.frag |  42 +++----
 render/fx_renderer/gles2/shaders/tex.frag     |  19 ++-
 render/fx_renderer/shaders.c                  |  57 ++++-----
 8 files changed, 157 insertions(+), 197 deletions(-)

diff --git a/include/render/fx_renderer/shaders.h b/include/render/fx_renderer/shaders.h
index 9ed5a87..d874321 100644
--- a/include/render/fx_renderer/shaders.h
+++ b/include/render/fx_renderer/shaders.h
@@ -28,11 +28,10 @@ struct quad_shader {
 
 	GLint clip_size;
 	GLint clip_position;
-	GLint clip_corner_radius;
-	GLint clip_round_top_left;
-	GLint clip_round_top_right;
-	GLint clip_round_bottom_left;
-	GLint clip_round_bottom_right;
+	GLint clip_radius_top_left;
+	GLint clip_radius_top_right;
+	GLint clip_radius_bottom_left;
+	GLint clip_radius_bottom_right;
 };
 
 bool link_quad_program(struct quad_shader *shader);
@@ -62,20 +61,18 @@ struct quad_round_shader {
 	GLint pos_attrib;
 	GLint size;
 	GLint position;
-	GLint radius;
+
+	GLint radius_top_left;
+	GLint radius_top_right;
+	GLint radius_bottom_left;
+	GLint radius_bottom_right;
 
 	GLint clip_size;
 	GLint clip_position;
-	GLint clip_corner_radius;
-	GLint clip_round_top_left;
-	GLint clip_round_top_right;
-	GLint clip_round_bottom_left;
-	GLint clip_round_bottom_right;
-
-	GLint round_top_left;
-	GLint round_top_right;
-	GLint round_bottom_left;
-	GLint round_bottom_right;
+	GLint clip_radius_top_left;
+	GLint clip_radius_top_right;
+	GLint clip_radius_bottom_left;
+	GLint clip_radius_bottom_right;
 };
 
 bool link_quad_round_program(struct quad_round_shader *shader);
@@ -87,7 +84,6 @@ struct quad_grad_round_shader {
 	GLint pos_attrib;
 	GLint size;
 	GLint position;
-	GLint radius;
 
 	GLint colors;
 	GLint grad_size;
@@ -98,10 +94,10 @@ struct quad_grad_round_shader {
 	GLint count;
 	GLint blend;
 
-	GLint round_top_left;
-	GLint round_top_right;
-	GLint round_bottom_left;
-	GLint round_bottom_right;
+	GLint radius_top_left;
+	GLint radius_top_right;
+	GLint radius_bottom_left;
+	GLint radius_bottom_right;
 
 	int max_len;
 };
@@ -117,13 +113,12 @@ struct tex_shader {
 	GLint pos_attrib;
 	GLint size;
 	GLint position;
-	GLint radius;
-	GLint discard_transparent;
+	GLint radius_top_left;
+	GLint radius_top_right;
+	GLint radius_bottom_left;
+	GLint radius_bottom_right;
 
-	GLint round_top_left;
-	GLint round_top_right;
-	GLint round_bottom_left;
-	GLint round_bottom_right;
+	GLint discard_transparent;
 };
 
 bool link_tex_program(struct tex_shader *shader, enum fx_tex_shader_source source);
@@ -140,11 +135,10 @@ struct box_shadow_shader {
 
 	GLint clip_position;
 	GLint clip_size;
-	GLint clip_corner_radius;
-	GLint clip_round_top_left;
-	GLint clip_round_top_right;
-	GLint clip_round_bottom_left;
-	GLint clip_round_bottom_right;
+	GLint clip_radius_top_left;
+	GLint clip_radius_top_right;
+	GLint clip_radius_bottom_left;
+	GLint clip_radius_bottom_right;
 };
 
 bool link_box_shadow_program(struct box_shadow_shader *shader);
diff --git a/render/fx_renderer/fx_pass.c b/render/fx_renderer/fx_pass.c
index 2aa7bd0..f396d7e 100644
--- a/render/fx_renderer/fx_pass.c
+++ b/render/fx_renderer/fx_pass.c
@@ -320,16 +320,15 @@ void fx_render_pass_add_texture(struct fx_gles_render_pass *pass,
 	glUniform1f(shader->alpha, alpha);
 	glUniform2f(shader->size, clip_box->width, clip_box->height);
 	glUniform2f(shader->position, clip_box->x, clip_box->y);
-	glUniform1f(shader->radius, fx_options->corner_radius);
 	glUniform1f(shader->discard_transparent, fx_options->discard_transparent);
-	glUniform1f(shader->round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(shader->round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(shader->round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(shader->round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & corners) == CORNER_LOCATION_BOTTOM_RIGHT);
+	glUniform1f(shader->radius_top_left, (CORNER_LOCATION_TOP_LEFT & corners) == CORNER_LOCATION_TOP_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader->radius_top_right, (CORNER_LOCATION_TOP_RIGHT & corners) == CORNER_LOCATION_TOP_RIGHT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader->radius_bottom_left, (CORNER_LOCATION_BOTTOM_LEFT & corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader->radius_bottom_right, (CORNER_LOCATION_BOTTOM_RIGHT & corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			fx_options->corner_radius : 0);
 
 	set_proj_matrix(shader->proj, pass->projection_matrix, &dst_box);
 	set_tex_matrix(shader->tex_proj, options->transform, &src_fbox);
@@ -386,15 +385,14 @@ void fx_render_pass_add_rect(struct fx_gles_render_pass *pass,
 	glUniform4f(shader.color, color->r, color->g, color->b, color->a);
 	glUniform2f(shader.clip_size, clipped_region_box.width, clipped_region_box.height);
 	glUniform2f(shader.clip_position, clipped_region_box.x, clipped_region_box.y);
-	glUniform1f(shader.clip_corner_radius, fx_options->clipped_region.corner_radius);
-	glUniform1f(shader.clip_round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(shader.clip_round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(shader.clip_round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(shader.clip_round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT);
+	glUniform1f(shader.clip_radius_top_left, (CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_top_right, (CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_bottom_left, (CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_bottom_right, (CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			clipped_region_corner_radius : 0);
 
 	render(&box, &clip_region, renderer->shaders.quad.pos_attrib);
 	pixman_region32_fini(&clip_region);
@@ -487,27 +485,26 @@ void fx_render_pass_add_rounded_rect(struct fx_gles_render_pass *pass,
 
 	glUniform2f(shader.size, box.width, box.height);
 	glUniform2f(shader.position, box.x, box.y);
-	glUniform1f(shader.radius, fx_options->corner_radius);
 	glUniform2f(shader.clip_size, clipped_region_box.width, clipped_region_box.height);
 	glUniform2f(shader.clip_position, clipped_region_box.x, clipped_region_box.y);
-	glUniform1f(shader.clip_corner_radius, fx_options->clipped_region.corner_radius);
-	glUniform1f(shader.clip_round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(shader.clip_round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(shader.clip_round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(shader.clip_round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT);
-
-	glUniform1f(shader.round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & fx_options->corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(shader.round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & fx_options->corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(shader.round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & fx_options->corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(shader.round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & fx_options->corners) == CORNER_LOCATION_BOTTOM_RIGHT);
+	glUniform1f(shader.clip_radius_top_left, (CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_top_right, (CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_bottom_left, (CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(shader.clip_radius_bottom_right, (CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			clipped_region_corner_radius : 0);
+
+	enum corner_location corners = fx_options->corners;
+	glUniform1f(shader.radius_top_left, (CORNER_LOCATION_TOP_LEFT & corners) == CORNER_LOCATION_TOP_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_top_right, (CORNER_LOCATION_TOP_RIGHT & corners) == CORNER_LOCATION_TOP_RIGHT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_bottom_left, (CORNER_LOCATION_BOTTOM_LEFT & corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_bottom_right, (CORNER_LOCATION_BOTTOM_RIGHT & corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			fx_options->corner_radius : 0);
 
 	render(&box, &clip_region, renderer->shaders.quad_round.pos_attrib);
 	pixman_region32_fini(&clip_region);
@@ -542,7 +539,6 @@ void fx_render_pass_add_rounded_rect_grad(struct fx_gles_render_pass *pass,
 
 	glUniform2f(shader.size, box.width, box.height);
 	glUniform2f(shader.position, box.x, box.y);
-	glUniform1f(shader.radius, fx_options->corner_radius);
 
 	glUniform4fv(shader.colors, fx_options->gradient.count, (GLfloat*)fx_options->gradient.colors);
 	glUniform1i(shader.count, fx_options->gradient.count);
@@ -553,14 +549,15 @@ void fx_render_pass_add_rounded_rect_grad(struct fx_gles_render_pass *pass,
 	glUniform2f(shader.grad_box, fx_options->gradient.range.x, fx_options->gradient.range.y);
 	glUniform2f(shader.origin, fx_options->gradient.origin[0], fx_options->gradient.origin[1]);
 
-	glUniform1f(shader.round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & fx_options->corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(shader.round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & fx_options->corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(shader.round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & fx_options->corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(shader.round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & fx_options->corners) == CORNER_LOCATION_BOTTOM_RIGHT);
+	enum corner_location corners = fx_options->corners;
+	glUniform1f(shader.radius_top_left, (CORNER_LOCATION_TOP_LEFT & corners) == CORNER_LOCATION_TOP_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_top_right, (CORNER_LOCATION_TOP_RIGHT & corners) == CORNER_LOCATION_TOP_RIGHT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_bottom_left, (CORNER_LOCATION_BOTTOM_LEFT & corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			fx_options->corner_radius : 0);
+	glUniform1f(shader.radius_bottom_right, (CORNER_LOCATION_BOTTOM_RIGHT & corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			fx_options->corner_radius : 0);
 
 	render(&box, options->clip, shader.pos_attrib);
 
@@ -610,19 +607,21 @@ void fx_render_pass_add_box_shadow(struct fx_gles_render_pass *pass,
 	set_proj_matrix(renderer->shaders.box_shadow.proj, pass->projection_matrix, &box);
 	glUniform4f(renderer->shaders.box_shadow.color, color->r, color->g, color->b, color->a);
 	glUniform1f(renderer->shaders.box_shadow.blur_sigma, options->blur_sigma);
-	glUniform1f(renderer->shaders.box_shadow.corner_radius, options->corner_radius);
 	glUniform2f(renderer->shaders.box_shadow.size, box.width, box.height);
 	glUniform2f(renderer->shaders.box_shadow.position, box.x, box.y);
-	glUniform1f(renderer->shaders.box_shadow.clip_corner_radius, clipped_region_corner_radius);
-	glUniform2f(renderer->shaders.box_shadow.clip_size, clipped_region_box.width, clipped_region_box.height);
-	glUniform1f(renderer->shaders.box_shadow.clip_round_top_left,
-			(CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT);
-	glUniform1f(renderer->shaders.box_shadow.clip_round_top_right,
-			(CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT);
-	glUniform1f(renderer->shaders.box_shadow.clip_round_bottom_left,
-			(CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT);
-	glUniform1f(renderer->shaders.box_shadow.clip_round_bottom_right,
-			(CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT);
+
+	glUniform1f(renderer->shaders.box_shadow.clip_radius_top_left,
+			(CORNER_LOCATION_TOP_LEFT & clipped_region_corners) == CORNER_LOCATION_TOP_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(renderer->shaders.box_shadow.clip_radius_top_right,
+			(CORNER_LOCATION_TOP_RIGHT & clipped_region_corners) == CORNER_LOCATION_TOP_RIGHT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(renderer->shaders.box_shadow.clip_radius_bottom_left,
+			(CORNER_LOCATION_BOTTOM_LEFT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_LEFT ?
+			clipped_region_corner_radius : 0);
+	glUniform1f(renderer->shaders.box_shadow.clip_radius_bottom_right,
+			(CORNER_LOCATION_BOTTOM_RIGHT & clipped_region_corners) == CORNER_LOCATION_BOTTOM_RIGHT ?
+			clipped_region_corner_radius : 0);
 
 	glUniform2f(renderer->shaders.box_shadow.clip_position, clipped_region_box.x, clipped_region_box.y);
 
diff --git a/render/fx_renderer/gles2/shaders/box_shadow.frag b/render/fx_renderer/gles2/shaders/box_shadow.frag
index 0770e5e..24cf9ae 100644
--- a/render/fx_renderer/gles2/shaders/box_shadow.frag
+++ b/render/fx_renderer/gles2/shaders/box_shadow.frag
@@ -15,11 +15,10 @@ uniform float blur_sigma;
 uniform float corner_radius;
 uniform vec2 clip_position;
 uniform vec2 clip_size;
-uniform float clip_corner_radius;
-uniform bool clip_round_top_left;
-uniform bool clip_round_top_right;
-uniform bool clip_round_bottom_left;
-uniform bool clip_round_bottom_right;
+uniform float clip_radius_top_left;
+uniform float clip_radius_top_right;
+uniform float clip_radius_bottom_left;
+uniform float clip_radius_bottom_right;
 
 float gaussian(float x, float sigma) {
     const float pi = 3.141592653589793;
@@ -87,18 +86,11 @@ void main() {
     float clip_corner_alpha = corner_alpha(
         clip_size - 1.0,
         clip_position + 0.5,
-        float(clip_round_top_left) * clip_corner_radius,
-        float(clip_round_top_right) * clip_corner_radius,
-        float(clip_round_bottom_left) * clip_corner_radius,
-        float(clip_round_bottom_right) * clip_corner_radius
+        clip_radius_top_left,
+        clip_radius_top_right,
+        clip_radius_bottom_left,
+        clip_radius_bottom_right
     );
 
-    // Make sure that there are corners to round, sets the window alpha to 1.0
-    // if window CORNER_LOCATION_NONE or window radius is 0.
-    float base_case = float(clip_round_top_left) + float(clip_round_top_right)
-            + float(clip_round_bottom_left) + float(clip_round_bottom_right);
-    base_case *= step(1.0, clip_corner_radius); // Corner radius is 0
-    clip_corner_alpha = max(clip_corner_alpha, 1.0 - step(1.0, base_case));
-
     gl_FragColor = vec4(v_color.rgb, shadow_alpha) * clip_corner_alpha;
 }
diff --git a/render/fx_renderer/gles2/shaders/quad.frag b/render/fx_renderer/gles2/shaders/quad.frag
index fa57849..3144f93 100644
--- a/render/fx_renderer/gles2/shaders/quad.frag
+++ b/render/fx_renderer/gles2/shaders/quad.frag
@@ -9,11 +9,10 @@ varying vec2 v_texcoord;
 
 uniform vec2 clip_size;
 uniform vec2 clip_position;
-uniform float clip_corner_radius;
-uniform bool clip_round_top_left;
-uniform bool clip_round_top_right;
-uniform bool clip_round_bottom_left;
-uniform bool clip_round_bottom_right;
+uniform float clip_radius_top_left;
+uniform float clip_radius_top_right;
+uniform float clip_radius_bottom_left;
+uniform float clip_radius_bottom_right;
 
 float corner_alpha(vec2 size, vec2 position, float radius_tl, float radius_tr, float radius_bl, float radius_br);
 
@@ -22,16 +21,11 @@ void main() {
     float clip_corner_alpha = corner_alpha(
         clip_size - 1.0,
         clip_position + 0.5,
-        float(clip_round_top_left) * clip_corner_radius,
-        float(clip_round_top_right) * clip_corner_radius,
-        float(clip_round_bottom_left) * clip_corner_radius,
-        float(clip_round_bottom_right) * clip_corner_radius
+        clip_radius_top_left,
+        clip_radius_top_right,
+        clip_radius_bottom_left,
+        clip_radius_bottom_right
     );
 
-    float base_case = float(clip_round_top_left) + float(clip_round_top_right)
-            + float(clip_round_bottom_left) + float(clip_round_bottom_right);
-    base_case *= step(1.0, clip_corner_radius); // Corner radius is 0
-    clip_corner_alpha = max(clip_corner_alpha, 1.0 - step(1.0, base_case));
-
     gl_FragColor = v_color * clip_corner_alpha;
 }
diff --git a/render/fx_renderer/gles2/shaders/quad_grad_round.frag b/render/fx_renderer/gles2/shaders/quad_grad_round.frag
index cca4915..dc5d710 100644
--- a/render/fx_renderer/gles2/shaders/quad_grad_round.frag
+++ b/render/fx_renderer/gles2/shaders/quad_grad_round.frag
@@ -4,7 +4,11 @@ varying vec2 v_texcoord;
 
 uniform vec2 size;
 uniform vec2 position;
-uniform float radius;
+
+uniform float radius_top_left;
+uniform float radius_top_right;
+uniform float radius_bottom_left;
+uniform float radius_bottom_right;
 
 uniform vec4 colors[LEN];
 uniform vec2 grad_size;
@@ -15,11 +19,6 @@ uniform bool linear;
 uniform bool blend;
 uniform int count;
 
-uniform bool round_top_left;
-uniform bool round_top_right;
-uniform bool round_bottom_left;
-uniform bool round_bottom_right;
-
 vec4 gradient(vec4 colors[LEN], int count, vec2 size, vec2 grad_box, vec2 origin, float degree, bool linear, bool blend);
 
 float corner_alpha(vec2 size, vec2 position, float round_tl, float round_tr, float round_bl, float round_br);
@@ -29,10 +28,10 @@ void main() {
     float quad_corner_alpha = corner_alpha(
         size,
         position,
-        float(round_top_left) * radius,
-        float(round_top_right) * radius,
-        float(round_bottom_left) * radius,
-        float(round_bottom_right) * radius
+        radius_top_left,
+        radius_top_right,
+        radius_bottom_left,
+        radius_bottom_right
     );
     float rect_alpha = v_color.a * quad_corner_alpha;
 
diff --git a/render/fx_renderer/gles2/shaders/quad_round.frag b/render/fx_renderer/gles2/shaders/quad_round.frag
index 46c395a..26118ae 100644
--- a/render/fx_renderer/gles2/shaders/quad_round.frag
+++ b/render/fx_renderer/gles2/shaders/quad_round.frag
@@ -4,20 +4,17 @@ varying vec2 v_texcoord;
 
 uniform vec2 size;
 uniform vec2 position;
-uniform float radius;
+uniform float radius_top_left;
+uniform float radius_top_right;
+uniform float radius_bottom_left;
+uniform float radius_bottom_right;
 
 uniform vec2 clip_size;
 uniform vec2 clip_position;
-uniform float clip_corner_radius;
-uniform bool clip_round_top_left;
-uniform bool clip_round_top_right;
-uniform bool clip_round_bottom_left;
-uniform bool clip_round_bottom_right;
-
-uniform bool round_top_left;
-uniform bool round_top_right;
-uniform bool round_bottom_left;
-uniform bool round_bottom_right;
+uniform float clip_radius_top_left;
+uniform float clip_radius_top_right;
+uniform float clip_radius_bottom_left;
+uniform float clip_radius_bottom_right;
 
 float corner_alpha(vec2 size, vec2 position, float round_tl, float round_tr, float round_bl, float round_br);
 
@@ -25,28 +22,21 @@ void main() {
     float quad_corner_alpha = corner_alpha(
         size,
         position,
-        float(round_top_left) * radius,
-        float(round_top_right) * radius,
-        float(round_bottom_left) * radius,
-        float(round_bottom_right) * radius
+        radius_top_left,
+        radius_top_right,
+        radius_bottom_left,
+        radius_bottom_right
     );
 
     // Clipping
     float clip_corner_alpha = corner_alpha(
         clip_size - 1.0,
         clip_position + 0.5,
-        float(clip_round_top_left) * clip_corner_radius,
-        float(clip_round_top_right) * clip_corner_radius,
-        float(clip_round_bottom_left) * clip_corner_radius,
-        float(clip_round_bottom_right) * clip_corner_radius
+        clip_radius_top_left,
+        clip_radius_top_right,
+        clip_radius_bottom_left,
+        clip_radius_bottom_right
     );
 
-    // Make sure that there are corners to round, sets the window alpha to 1.0
-    // if window CORNER_LOCATION_NONE or window radius is 0.
-    float base_case = float(clip_round_top_left) + float(clip_round_top_right)
-            + float(clip_round_bottom_left) + float(clip_round_bottom_right);
-    base_case *= step(1.0, clip_corner_radius); // Corner radius is 0
-    clip_corner_alpha = max(clip_corner_alpha, 1.0 - step(1.0, base_case));
-
     gl_FragColor = mix(v_color, vec4(0.0), quad_corner_alpha) * clip_corner_alpha;
 }
diff --git a/render/fx_renderer/gles2/shaders/tex.frag b/render/fx_renderer/gles2/shaders/tex.frag
index bb071a0..2bbc9d4 100644
--- a/render/fx_renderer/gles2/shaders/tex.frag
+++ b/render/fx_renderer/gles2/shaders/tex.frag
@@ -28,13 +28,12 @@ uniform float alpha;
 
 uniform vec2 size;
 uniform vec2 position;
-uniform float radius;
-uniform bool discard_transparent;
+uniform float radius_top_left;
+uniform float radius_top_right;
+uniform float radius_bottom_left;
+uniform float radius_bottom_right;
 
-uniform bool round_top_left;
-uniform bool round_top_right;
-uniform bool round_bottom_left;
-uniform bool round_bottom_right;
+uniform bool discard_transparent;
 
 vec4 sample_texture() {
 #if SOURCE == SOURCE_TEXTURE_RGBA || SOURCE == SOURCE_TEXTURE_EXTERNAL
@@ -50,10 +49,10 @@ void main() {
     float corner_alpha = corner_alpha(
         size,
         position,
-        float(round_top_left) * radius,
-        float(round_top_right) * radius,
-        float(round_bottom_left) * radius,
-        float(round_bottom_right) * radius
+        radius_top_left,
+        radius_top_right,
+        radius_bottom_left,
+        radius_bottom_right
     );
 	gl_FragColor = mix(sample_texture() * alpha, vec4(0.0), corner_alpha);
 
diff --git a/render/fx_renderer/shaders.c b/render/fx_renderer/shaders.c
index cd5c389..3b06619 100644
--- a/render/fx_renderer/shaders.c
+++ b/render/fx_renderer/shaders.c
@@ -119,11 +119,10 @@ bool link_quad_program(struct quad_shader *shader) {
 	shader->pos_attrib = glGetAttribLocation(prog, "pos");
 	shader->clip_size = glGetUniformLocation(prog, "clip_size");
 	shader->clip_position = glGetUniformLocation(prog, "clip_position");
-	shader->clip_corner_radius = glGetUniformLocation(prog, "clip_corner_radius");
-	shader->clip_round_top_left = glGetUniformLocation(prog, "clip_round_top_left");
-	shader->clip_round_top_right = glGetUniformLocation(prog, "clip_round_top_right");
-	shader->clip_round_bottom_left = glGetUniformLocation(prog, "clip_round_bottom_left");
-	shader->clip_round_bottom_right = glGetUniformLocation(prog, "clip_round_bottom_right");
+	shader->clip_radius_top_left = glGetUniformLocation(prog, "clip_radius_top_left");
+	shader->clip_radius_top_right = glGetUniformLocation(prog, "clip_radius_top_right");
+	shader->clip_radius_bottom_left = glGetUniformLocation(prog, "clip_radius_bottom_left");
+	shader->clip_radius_bottom_right = glGetUniformLocation(prog, "clip_radius_bottom_right");
 
 	return true;
 }
@@ -171,19 +170,17 @@ bool link_quad_round_program(struct quad_round_shader *shader) {
 	shader->pos_attrib = glGetAttribLocation(prog, "pos");
 	shader->size = glGetUniformLocation(prog, "size");
 	shader->position = glGetUniformLocation(prog, "position");
-	shader->radius = glGetUniformLocation(prog, "radius");
+	shader->radius_top_left = glGetUniformLocation(prog, "radius_top_left");
+	shader->radius_top_right = glGetUniformLocation(prog, "radius_top_right");
+	shader->radius_bottom_left = glGetUniformLocation(prog, "radius_bottom_left");
+	shader->radius_bottom_right = glGetUniformLocation(prog, "radius_bottom_right");
+
 	shader->clip_size = glGetUniformLocation(prog, "clip_size");
 	shader->clip_position = glGetUniformLocation(prog, "clip_position");
-	shader->clip_corner_radius = glGetUniformLocation(prog, "clip_corner_radius");
-	shader->clip_round_top_left = glGetUniformLocation(prog, "clip_round_top_left");
-	shader->clip_round_top_right = glGetUniformLocation(prog, "clip_round_top_right");
-	shader->clip_round_bottom_left = glGetUniformLocation(prog, "clip_round_bottom_left");
-	shader->clip_round_bottom_right = glGetUniformLocation(prog, "clip_round_bottom_right");
-
-	shader->round_top_left = glGetUniformLocation(prog, "round_top_left");
-	shader->round_top_right = glGetUniformLocation(prog, "round_top_right");
-	shader->round_bottom_left = glGetUniformLocation(prog, "round_bottom_left");
-	shader->round_bottom_right = glGetUniformLocation(prog, "round_bottom_right");
+	shader->clip_radius_top_left = glGetUniformLocation(prog, "clip_radius_top_left");
+	shader->clip_radius_top_right = glGetUniformLocation(prog, "clip_radius_top_right");
+	shader->clip_radius_bottom_left = glGetUniformLocation(prog, "clip_radius_bottom_left");
+	shader->clip_radius_bottom_right = glGetUniformLocation(prog, "clip_radius_bottom_right");
 
 	return true;
 }
@@ -204,7 +201,10 @@ bool link_quad_grad_round_program(struct quad_grad_round_shader *shader, int max
 	shader->pos_attrib = glGetAttribLocation(prog, "pos");
 	shader->size = glGetUniformLocation(prog, "size");
 	shader->position = glGetUniformLocation(prog, "position");
-	shader->radius = glGetUniformLocation(prog, "radius");
+	shader->radius_top_left = glGetUniformLocation(prog, "radius_top_left");
+	shader->radius_top_right = glGetUniformLocation(prog, "radius_top_right");
+	shader->radius_bottom_left = glGetUniformLocation(prog, "radius_bottom_left");
+	shader->radius_bottom_right = glGetUniformLocation(prog, "radius_bottom_right");
 
 	shader->grad_size = glGetUniformLocation(prog, "grad_size");
 	shader->colors = glGetUniformLocation(prog, "colors");
@@ -215,11 +215,6 @@ bool link_quad_grad_round_program(struct quad_grad_round_shader *shader, int max
 	shader->count = glGetUniformLocation(prog, "count");
 	shader->blend = glGetUniformLocation(prog, "blend");
 
-	shader->round_top_left = glGetUniformLocation(prog, "round_top_left");
-	shader->round_top_right = glGetUniformLocation(prog, "round_top_right");
-	shader->round_bottom_left = glGetUniformLocation(prog, "round_bottom_left");
-	shader->round_bottom_right = glGetUniformLocation(prog, "round_bottom_right");
-
 	shader->max_len = max_len;
 
 	return true;
@@ -243,12 +238,11 @@ bool link_tex_program(struct tex_shader *shader, enum fx_tex_shader_source sourc
 	shader->tex_proj = glGetUniformLocation(prog, "tex_proj");
 	shader->size = glGetUniformLocation(prog, "size");
 	shader->position = glGetUniformLocation(prog, "position");
-	shader->radius = glGetUniformLocation(prog, "radius");
+	shader->radius_top_left = glGetUniformLocation(prog, "radius_top_left");
+	shader->radius_top_right = glGetUniformLocation(prog, "radius_top_right");
+	shader->radius_bottom_left = glGetUniformLocation(prog, "radius_bottom_left");
+	shader->radius_bottom_right = glGetUniformLocation(prog, "radius_bottom_right");
 	shader->discard_transparent = glGetUniformLocation(prog, "discard_transparent");
-	shader->round_top_left = glGetUniformLocation(prog, "round_top_left");
-	shader->round_top_right = glGetUniformLocation(prog, "round_top_right");
-	shader->round_bottom_left = glGetUniformLocation(prog, "round_bottom_left");
-	shader->round_bottom_right = glGetUniformLocation(prog, "round_bottom_right");
 
 	return true;
 }
@@ -272,11 +266,10 @@ bool link_box_shadow_program(struct box_shadow_shader *shader) {
 	shader->corner_radius = glGetUniformLocation(prog, "corner_radius");
 	shader->clip_position = glGetUniformLocation(prog, "clip_position");
 	shader->clip_size = glGetUniformLocation(prog, "clip_size");
-	shader->clip_corner_radius = glGetUniformLocation(prog, "clip_corner_radius");
-	shader->clip_round_top_left = glGetUniformLocation(prog, "clip_round_top_left");
-	shader->clip_round_top_right = glGetUniformLocation(prog, "clip_round_top_right");
-	shader->clip_round_bottom_left = glGetUniformLocation(prog, "clip_round_bottom_left");
-	shader->clip_round_bottom_right = glGetUniformLocation(prog, "clip_round_bottom_right");
+	shader->clip_radius_top_left = glGetUniformLocation(prog, "clip_radius_top_left");
+	shader->clip_radius_top_right = glGetUniformLocation(prog, "clip_radius_top_right");
+	shader->clip_radius_bottom_left = glGetUniformLocation(prog, "clip_radius_bottom_left");
+	shader->clip_radius_bottom_right = glGetUniformLocation(prog, "clip_radius_bottom_right");
 
 	return true;
 }
